/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço responsável por gerenciar as linguagens da aplicação.
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoLanguageService {
    set languageDefault(language: string);
    get languageDefault(): string;
    /**
     * @description
     *
     * Método responsável por retornar o idioma ativo.
     *
     * A busca do idioma será feita na seguinte ordem:
     *
     *   1 - o idioma que foi armazenado no *localStorage*, através do método `setLanguage()` utilizado pelo i18n.
     *
     *   2 - o valor inserido nas configurações do módulo do i18n através do parâmetro `config`, sendo o idioma inserido
     * na propriedade `language` da interface `PoI18nConfigDefault`.
     *
     *   3 - o idioma do navegador utilizado.
     *
     * > Caso o idioma do navegador não seja suportado pelo PO (`pt`, `en`, `es` ou `ru`), será retornado valor `pt`.
     *
     * **Retorno:** `string` com a sigla do idioma ativo.
     */
    getLanguage(): string;
    /**
     * @description
     *
     * Método responsável por retornar o idioma *default* da aplicação definido nas configurações do módulo do i18n através
     * do parâmetro `config`.
     *
     * **Retorno:** `string` com a sigla do idioma *default*.
     */
    getLanguageDefault(): string;
    /**
     * @description
     *
     * Método responsável por retornar a abreviação do idioma ativo na aplicação.
     *
     * @default `pt`
     *
     * **Retorno:** `string` com a sigla abreviada do idioma ativo.
     */
    getShortLanguage(): string;
    /**
     * @description
     *
     * Método para salvar o idioma da aplicação no *storage*, utilizado pelo serviço do i18n.
     *
     * > Ao definir um idioma por este método, todos os módulos da aplicação utilizarão o idioma definido.
     *
     * @param language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     */
    setLanguage(language: string): void;
    /**
     * @description
     *
     * Método que define o idioma configurado a partir do parâmetro `config` utilizado pelo módulo do i18n.
     *
     * > Ao definir um idioma por este serviço, apenas o módulo do i18n referente a esta configuração utilizará o idioma definido.
     *
     * @param language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     */
    setLanguageDefault(language: string): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoLanguageService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbGFuZ3VhZ2Uuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJwby1sYW5ndWFnZS5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogU2VydmnDp28gcmVzcG9uc8OhdmVsIHBvciBnZXJlbmNpYXIgYXMgbGluZ3VhZ2VucyBkYSBhcGxpY2HDp8Ojby5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUG9MYW5ndWFnZVNlcnZpY2Uge1xuICAgIHNldCBsYW5ndWFnZURlZmF1bHQobGFuZ3VhZ2U6IHN0cmluZyk7XG4gICAgZ2V0IGxhbmd1YWdlRGVmYXVsdCgpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBNw6l0b2RvIHJlc3BvbnPDoXZlbCBwb3IgcmV0b3JuYXIgbyBpZGlvbWEgYXRpdm8uXG4gICAgICpcbiAgICAgKiBBIGJ1c2NhIGRvIGlkaW9tYSBzZXLDoSBmZWl0YSBuYSBzZWd1aW50ZSBvcmRlbTpcbiAgICAgKlxuICAgICAqICAgMSAtIG8gaWRpb21hIHF1ZSBmb2kgYXJtYXplbmFkbyBubyAqbG9jYWxTdG9yYWdlKiwgYXRyYXbDqXMgZG8gbcOpdG9kbyBgc2V0TGFuZ3VhZ2UoKWAgdXRpbGl6YWRvIHBlbG8gaTE4bi5cbiAgICAgKlxuICAgICAqICAgMiAtIG8gdmFsb3IgaW5zZXJpZG8gbmFzIGNvbmZpZ3VyYcOnw7VlcyBkbyBtw7NkdWxvIGRvIGkxOG4gYXRyYXbDqXMgZG8gcGFyw6JtZXRybyBgY29uZmlnYCwgc2VuZG8gbyBpZGlvbWEgaW5zZXJpZG9cbiAgICAgKiBuYSBwcm9wcmllZGFkZSBgbGFuZ3VhZ2VgIGRhIGludGVyZmFjZSBgUG9JMThuQ29uZmlnRGVmYXVsdGAuXG4gICAgICpcbiAgICAgKiAgIDMgLSBvIGlkaW9tYSBkbyBuYXZlZ2Fkb3IgdXRpbGl6YWRvLlxuICAgICAqXG4gICAgICogPiBDYXNvIG8gaWRpb21hIGRvIG5hdmVnYWRvciBuw6NvIHNlamEgc3Vwb3J0YWRvIHBlbG8gUE8gKGBwdGAsIGBlbmAsIGBlc2Agb3UgYHJ1YCksIHNlcsOhIHJldG9ybmFkbyB2YWxvciBgcHRgLlxuICAgICAqXG4gICAgICogKipSZXRvcm5vOioqIGBzdHJpbmdgIGNvbSBhIHNpZ2xhIGRvIGlkaW9tYSBhdGl2by5cbiAgICAgKi9cbiAgICBnZXRMYW5ndWFnZSgpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBNw6l0b2RvIHJlc3BvbnPDoXZlbCBwb3IgcmV0b3JuYXIgbyBpZGlvbWEgKmRlZmF1bHQqIGRhIGFwbGljYcOnw6NvIGRlZmluaWRvIG5hcyBjb25maWd1cmHDp8O1ZXMgZG8gbcOzZHVsbyBkbyBpMThuIGF0cmF2w6lzXG4gICAgICogZG8gcGFyw6JtZXRybyBgY29uZmlnYC5cbiAgICAgKlxuICAgICAqICoqUmV0b3JubzoqKiBgc3RyaW5nYCBjb20gYSBzaWdsYSBkbyBpZGlvbWEgKmRlZmF1bHQqLlxuICAgICAqL1xuICAgIGdldExhbmd1YWdlRGVmYXVsdCgpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBNw6l0b2RvIHJlc3BvbnPDoXZlbCBwb3IgcmV0b3JuYXIgYSBhYnJldmlhw6fDo28gZG8gaWRpb21hIGF0aXZvIG5hIGFwbGljYcOnw6NvLlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgYHB0YFxuICAgICAqXG4gICAgICogKipSZXRvcm5vOioqIGBzdHJpbmdgIGNvbSBhIHNpZ2xhIGFicmV2aWFkYSBkbyBpZGlvbWEgYXRpdm8uXG4gICAgICovXG4gICAgZ2V0U2hvcnRMYW5ndWFnZSgpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBNw6l0b2RvIHBhcmEgc2FsdmFyIG8gaWRpb21hIGRhIGFwbGljYcOnw6NvIG5vICpzdG9yYWdlKiwgdXRpbGl6YWRvIHBlbG8gc2VydmnDp28gZG8gaTE4bi5cbiAgICAgKlxuICAgICAqID4gQW8gZGVmaW5pciB1bSBpZGlvbWEgcG9yIGVzdGUgbcOpdG9kbywgdG9kb3Mgb3MgbcOzZHVsb3MgZGEgYXBsaWNhw6fDo28gdXRpbGl6YXLDo28gbyBpZGlvbWEgZGVmaW5pZG8uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGFuZ3VhZ2Ugc2lnbGEgZG8gaWRpb21hLlxuICAgICAqXG4gICAgICogRXN0YSBzaWdsYSBkZXZlIHNlciBjb21wb3N0YSBwb3IgZHVhcyBsZXRyYXMgcmVwcmVzZW50YW5kbyBvIGlkaW9tYSxcbiAgICAgKiBwb2RlbmRvIHNlciBhZGljaW9uYWRvIG91dHJhcyBkdWFzIGxldHJhcyByZXByZXNlbnRhbmRvIG8gcGHDrXMsIHBvciBleGVtcGxvOiBgcHRgLCBgcHQtQlJgLCBgcHQtYnJgLCBgZW5gIG91IGBlbi1VU2AuXG4gICAgICpcbiAgICAgKiA+IENhc28gc2VqYSBpbmZvcm1hZG8gdW0gdmFsb3IgZGlmZXJlbnRlIGRlc3RlIHBhZHLDo28sIG8gbWVzbW8gc2Vyw6EgaWdub3JhZG8uXG4gICAgICovXG4gICAgc2V0TGFuZ3VhZ2UobGFuZ3VhZ2U6IHN0cmluZyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBNw6l0b2RvIHF1ZSBkZWZpbmUgbyBpZGlvbWEgY29uZmlndXJhZG8gYSBwYXJ0aXIgZG8gcGFyw6JtZXRybyBgY29uZmlnYCB1dGlsaXphZG8gcGVsbyBtw7NkdWxvIGRvIGkxOG4uXG4gICAgICpcbiAgICAgKiA+IEFvIGRlZmluaXIgdW0gaWRpb21hIHBvciBlc3RlIHNlcnZpw6dvLCBhcGVuYXMgbyBtw7NkdWxvIGRvIGkxOG4gcmVmZXJlbnRlIGEgZXN0YSBjb25maWd1cmHDp8OjbyB1dGlsaXphcsOhIG8gaWRpb21hIGRlZmluaWRvLlxuICAgICAqXG4gICAgICogQHBhcmFtIGxhbmd1YWdlIHNpZ2xhIGRvIGlkaW9tYS5cbiAgICAgKlxuICAgICAqIEVzdGEgc2lnbGEgZGV2ZSBzZXIgY29tcG9zdGEgcG9yIGR1YXMgbGV0cmFzIHJlcHJlc2VudGFuZG8gbyBpZGlvbWEsXG4gICAgICogcG9kZW5kbyBzZXIgYWRpY2lvbmFkbyBvdXRyYXMgZHVhcyBsZXRyYXMgcmVwcmVzZW50YW5kbyBvIHBhw61zLCBwb3IgZXhlbXBsbzogYHB0YCwgYHB0LUJSYCwgYHB0LWJyYCwgYGVuYCBvdSBgZW4tVVNgLlxuICAgICAqXG4gICAgICogPiBDYXNvIHNlamEgaW5mb3JtYWRvIHVtIHZhbG9yIGRpZmVyZW50ZSBkZXN0ZSBwYWRyw6NvLCBvIG1lc21vIHNlcsOhIGlnbm9yYWRvLlxuICAgICAqL1xuICAgIHNldExhbmd1YWdlRGVmYXVsdChsYW5ndWFnZTogc3RyaW5nKTogdm9pZDtcbn1cbiJdfQ==