import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';
import { Observable } from 'rxjs';
import { PoComponentInjectorService } from '../../services/po-component-injector/po-component-injector.service';
import { PoHttpRequesControltService } from './po-http-request-control-service';
/**
 * @description
 *
 * O serviço PO Http Request Interceptor realiza a contabilização de requisições pendentes na aplicação.
 *
 * Existe a possibilidade de não efetuar a contabilização das requisições pendentes, utilizando o parâmetro
 * `X-PO-No-Count-Pending-Requests`. Para isso deve ser informado no cabeçalho da requisição com o valor `'true'`,
 * por exemplo:
 *
 * ```
 * ...
 *  const headers = { 'X-PO-No-Count-Pending-Requests': 'true' };
 *
 *  this.http.get(`/customers/1`, { headers: headers });
 * ...
 *
 * ```
 * Para obter a quantidade de requisições pendentes, deve inscrever-se no método `getCountPendingRequests` do
 * serviço `PoHttpRequestInterceptorService`, com isso, ao realizar requisições utilizando `HttpClient`,
 * será retornado a quantidade de requisições pendentes.
 *
 * Também existe a possibildade de travar a tela e mostrar uma imagem de _loading_ durante o processamento de uma requisição
 * deve-se passar o parâmetro `X-PO-Screen-Lock` no cabeçalho da requisição com valor `'true'`.
 *
 * por exemplo:
 *
 * ```
 * ...
 *  const headers = { 'X-PO-Screen-Lock': 'true' };
 *
 *  this.http.get(`/customers/1`, { headers: headers });
 * ...
 *
 * ```
 * > Após a validação no interceptor, o parâmetro será removido do cabeçalho da requisição.
 *
 * Ao importar o módulo `PoModule` na aplicação, o `po-http-request-interceptor` é automaticamente configurado sem a necessidade
 * de qualquer configuração extra.
 *
 *
 * Segue abaixo um exemplo de uso:
 *
 * ```
 * import { HttpClient } from '@angular/common/http';
 *
 * ...
 *
 * @Injectable()
 * export class CustomersService {
 *
 *  headers = { 'X-PO-No-Count-Pending-Requests': true, 'X-PO-Screen-Lock': 'true' }
 *  pendingRequests: number = 0;
 *  subscription: Subscription;
 *
 *  constructor(
 *    private http: HttpClient,
 *    private httpRequestInterceptor: PoHttpRequestInterceptorService) { }
 *
 *  ngOnDestroy(): void {
 *    this.subscription.unsubscribe();
 *  }
 *
 *  ngOnInit(): void {
 *    this.subscription = this.httpRequestInterceptor.getCountPendingRequests().subscribe(data => {
 *      this.pendingRequests = data;
 *    });
 *  }
 *
 *  getCustomers() {
 *    return this.http.get(`/customers/1`, { headers: headers });
 *  }
 *
 *  ...
 *
 * }
 * ```
 *
 * @example
 * <example name='po-http-request-interceptor-labs' title='PO Http Request Interceptor Labs'>
 *  <file name='sample-po-http-request-interceptor-labs.component.ts'> </file>
 *  <file name='sample-po-http-request-interceptor-labs.component.html'> </file>
 * </example>
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoHttpRequestInterceptorService implements HttpInterceptor {
    private controlHttpRequest;
    private poComponentInjector;
    private loadingOverlayComponent;
    private pendingRequests;
    private overlayRequests;
    constructor(controlHttpRequest: PoHttpRequesControltService, poComponentInjector: PoComponentInjectorService);
    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;
    getCountPendingRequests(): Observable<any>;
    private buildLoading;
    private destroyLoading;
    private requestCloneWithoutHeaderParam;
    private setCountPendingRequests;
    private setCountOverlayRequests;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoHttpRequestInterceptorService, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8taHR0cC1yZXF1ZXN0LWludGVyY2VwdG9yLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsicG8taHR0cC1yZXF1ZXN0LWludGVyY2VwdG9yLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBFdmVudCwgSHR0cEhhbmRsZXIsIEh0dHBJbnRlcmNlcHRvciwgSHR0cFJlcXVlc3QgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBQb0NvbXBvbmVudEluamVjdG9yU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3BvLWNvbXBvbmVudC1pbmplY3Rvci9wby1jb21wb25lbnQtaW5qZWN0b3Iuc2VydmljZSc7XG5pbXBvcnQgeyBQb0h0dHBSZXF1ZXNDb250cm9sdFNlcnZpY2UgfSBmcm9tICcuL3BvLWh0dHAtcmVxdWVzdC1jb250cm9sLXNlcnZpY2UnO1xuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBPIHNlcnZpw6dvIFBPIEh0dHAgUmVxdWVzdCBJbnRlcmNlcHRvciByZWFsaXphIGEgY29udGFiaWxpemHDp8OjbyBkZSByZXF1aXNpw6fDtWVzIHBlbmRlbnRlcyBuYSBhcGxpY2HDp8Ojby5cbiAqXG4gKiBFeGlzdGUgYSBwb3NzaWJpbGlkYWRlIGRlIG7Do28gZWZldHVhciBhIGNvbnRhYmlsaXphw6fDo28gZGFzIHJlcXVpc2nDp8O1ZXMgcGVuZGVudGVzLCB1dGlsaXphbmRvIG8gcGFyw6JtZXRyb1xuICogYFgtUE8tTm8tQ291bnQtUGVuZGluZy1SZXF1ZXN0c2AuIFBhcmEgaXNzbyBkZXZlIHNlciBpbmZvcm1hZG8gbm8gY2FiZcOnYWxobyBkYSByZXF1aXNpw6fDo28gY29tIG8gdmFsb3IgYCd0cnVlJ2AsXG4gKiBwb3IgZXhlbXBsbzpcbiAqXG4gKiBgYGBcbiAqIC4uLlxuICogIGNvbnN0IGhlYWRlcnMgPSB7ICdYLVBPLU5vLUNvdW50LVBlbmRpbmctUmVxdWVzdHMnOiAndHJ1ZScgfTtcbiAqXG4gKiAgdGhpcy5odHRwLmdldChgL2N1c3RvbWVycy8xYCwgeyBoZWFkZXJzOiBoZWFkZXJzIH0pO1xuICogLi4uXG4gKlxuICogYGBgXG4gKiBQYXJhIG9idGVyIGEgcXVhbnRpZGFkZSBkZSByZXF1aXNpw6fDtWVzIHBlbmRlbnRlcywgZGV2ZSBpbnNjcmV2ZXItc2Ugbm8gbcOpdG9kbyBgZ2V0Q291bnRQZW5kaW5nUmVxdWVzdHNgIGRvXG4gKiBzZXJ2acOnbyBgUG9IdHRwUmVxdWVzdEludGVyY2VwdG9yU2VydmljZWAsIGNvbSBpc3NvLCBhbyByZWFsaXphciByZXF1aXNpw6fDtWVzIHV0aWxpemFuZG8gYEh0dHBDbGllbnRgLFxuICogc2Vyw6EgcmV0b3JuYWRvIGEgcXVhbnRpZGFkZSBkZSByZXF1aXNpw6fDtWVzIHBlbmRlbnRlcy5cbiAqXG4gKiBUYW1iw6ltIGV4aXN0ZSBhIHBvc3NpYmlsZGFkZSBkZSB0cmF2YXIgYSB0ZWxhIGUgbW9zdHJhciB1bWEgaW1hZ2VtIGRlIF9sb2FkaW5nXyBkdXJhbnRlIG8gcHJvY2Vzc2FtZW50byBkZSB1bWEgcmVxdWlzacOnw6NvXG4gKiBkZXZlLXNlIHBhc3NhciBvIHBhcsOibWV0cm8gYFgtUE8tU2NyZWVuLUxvY2tgIG5vIGNhYmXDp2FsaG8gZGEgcmVxdWlzacOnw6NvIGNvbSB2YWxvciBgJ3RydWUnYC5cbiAqXG4gKiBwb3IgZXhlbXBsbzpcbiAqXG4gKiBgYGBcbiAqIC4uLlxuICogIGNvbnN0IGhlYWRlcnMgPSB7ICdYLVBPLVNjcmVlbi1Mb2NrJzogJ3RydWUnIH07XG4gKlxuICogIHRoaXMuaHR0cC5nZXQoYC9jdXN0b21lcnMvMWAsIHsgaGVhZGVyczogaGVhZGVycyB9KTtcbiAqIC4uLlxuICpcbiAqIGBgYFxuICogPiBBcMOzcyBhIHZhbGlkYcOnw6NvIG5vIGludGVyY2VwdG9yLCBvIHBhcsOibWV0cm8gc2Vyw6EgcmVtb3ZpZG8gZG8gY2FiZcOnYWxobyBkYSByZXF1aXNpw6fDo28uXG4gKlxuICogQW8gaW1wb3J0YXIgbyBtw7NkdWxvIGBQb01vZHVsZWAgbmEgYXBsaWNhw6fDo28sIG8gYHBvLWh0dHAtcmVxdWVzdC1pbnRlcmNlcHRvcmAgw6kgYXV0b21hdGljYW1lbnRlIGNvbmZpZ3VyYWRvIHNlbSBhIG5lY2Vzc2lkYWRlXG4gKiBkZSBxdWFscXVlciBjb25maWd1cmHDp8OjbyBleHRyYS5cbiAqXG4gKlxuICogU2VndWUgYWJhaXhvIHVtIGV4ZW1wbG8gZGUgdXNvOlxuICpcbiAqIGBgYFxuICogaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbiAqXG4gKiAuLi5cbiAqXG4gKiBASW5qZWN0YWJsZSgpXG4gKiBleHBvcnQgY2xhc3MgQ3VzdG9tZXJzU2VydmljZSB7XG4gKlxuICogIGhlYWRlcnMgPSB7ICdYLVBPLU5vLUNvdW50LVBlbmRpbmctUmVxdWVzdHMnOiB0cnVlLCAnWC1QTy1TY3JlZW4tTG9jayc6ICd0cnVlJyB9XG4gKiAgcGVuZGluZ1JlcXVlc3RzOiBudW1iZXIgPSAwO1xuICogIHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuICpcbiAqICBjb25zdHJ1Y3RvcihcbiAqICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCxcbiAqICAgIHByaXZhdGUgaHR0cFJlcXVlc3RJbnRlcmNlcHRvcjogUG9IdHRwUmVxdWVzdEludGVyY2VwdG9yU2VydmljZSkgeyB9XG4gKlxuICogIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICogICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAqICB9XG4gKlxuICogIG5nT25Jbml0KCk6IHZvaWQge1xuICogICAgdGhpcy5zdWJzY3JpcHRpb24gPSB0aGlzLmh0dHBSZXF1ZXN0SW50ZXJjZXB0b3IuZ2V0Q291bnRQZW5kaW5nUmVxdWVzdHMoKS5zdWJzY3JpYmUoZGF0YSA9PiB7XG4gKiAgICAgIHRoaXMucGVuZGluZ1JlcXVlc3RzID0gZGF0YTtcbiAqICAgIH0pO1xuICogIH1cbiAqXG4gKiAgZ2V0Q3VzdG9tZXJzKCkge1xuICogICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoYC9jdXN0b21lcnMvMWAsIHsgaGVhZGVyczogaGVhZGVycyB9KTtcbiAqICB9XG4gKlxuICogIC4uLlxuICpcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlXG4gKiA8ZXhhbXBsZSBuYW1lPSdwby1odHRwLXJlcXVlc3QtaW50ZXJjZXB0b3ItbGFicycgdGl0bGU9J1BPIEh0dHAgUmVxdWVzdCBJbnRlcmNlcHRvciBMYWJzJz5cbiAqICA8ZmlsZSBuYW1lPSdzYW1wbGUtcG8taHR0cC1yZXF1ZXN0LWludGVyY2VwdG9yLWxhYnMuY29tcG9uZW50LnRzJz4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9J3NhbXBsZS1wby1odHRwLXJlcXVlc3QtaW50ZXJjZXB0b3ItbGFicy5jb21wb25lbnQuaHRtbCc+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUG9IdHRwUmVxdWVzdEludGVyY2VwdG9yU2VydmljZSBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XG4gICAgcHJpdmF0ZSBjb250cm9sSHR0cFJlcXVlc3Q7XG4gICAgcHJpdmF0ZSBwb0NvbXBvbmVudEluamVjdG9yO1xuICAgIHByaXZhdGUgbG9hZGluZ092ZXJsYXlDb21wb25lbnQ7XG4gICAgcHJpdmF0ZSBwZW5kaW5nUmVxdWVzdHM7XG4gICAgcHJpdmF0ZSBvdmVybGF5UmVxdWVzdHM7XG4gICAgY29uc3RydWN0b3IoY29udHJvbEh0dHBSZXF1ZXN0OiBQb0h0dHBSZXF1ZXNDb250cm9sdFNlcnZpY2UsIHBvQ29tcG9uZW50SW5qZWN0b3I6IFBvQ29tcG9uZW50SW5qZWN0b3JTZXJ2aWNlKTtcbiAgICBpbnRlcmNlcHQocmVxdWVzdDogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PjtcbiAgICBnZXRDb3VudFBlbmRpbmdSZXF1ZXN0cygpOiBPYnNlcnZhYmxlPGFueT47XG4gICAgcHJpdmF0ZSBidWlsZExvYWRpbmc7XG4gICAgcHJpdmF0ZSBkZXN0cm95TG9hZGluZztcbiAgICBwcml2YXRlIHJlcXVlc3RDbG9uZVdpdGhvdXRIZWFkZXJQYXJhbTtcbiAgICBwcml2YXRlIHNldENvdW50UGVuZGluZ1JlcXVlc3RzO1xuICAgIHByaXZhdGUgc2V0Q291bnRPdmVybGF5UmVxdWVzdHM7XG59XG4iXX0=