import { PoMenuComponent } from '../po-menu';
import { PoNavbarIconAction } from './interfaces/po-navbar-icon-action.interface';
import { PoNavbarItem } from './interfaces/po-navbar-item.interface';
import { PoNavbarLiterals } from './interfaces/po-navbar-literals.interface';
import * as ɵngcc0 from '@angular/core';
export declare const poNavbarLiteralsDefault: {
    en: PoNavbarLiterals;
    es: PoNavbarLiterals;
    pt: PoNavbarLiterals;
    ru: PoNavbarLiterals;
};
/**
 * @description
 *
 * O componente `po-navbar` é um cabeçalho fixo que permite apresentar uma lista de links para facilitar a navegação pelas
 * páginas da aplicação. Também possui ícones com ações.
 */
export declare abstract class PoNavbarBaseComponent {
    private _iconActions;
    private _items;
    private _literals;
    private _logo;
    private _shadow;
    /**
     * @optional
     *
     * @description
     *
     * Define uma lista de ações apresentadas em ícones no lado direito do `po-navbar`.
     */
    set iconActions(value: Array<PoNavbarIconAction>);
    get iconActions(): Array<PoNavbarIconAction>;
    /**
     * @optional
     *
     * @description
     *
     * Define uma lista de items do `po-navbar`.
     */
    set items(value: Array<PoNavbarItem>);
    get items(): Array<PoNavbarItem>;
    /**
     * @optional
     *
     * @description
     *
     * Objeto com a literal usada na propriedade `p-literals`.
     *
     * Para customizar a literal, basta declarar um objeto do tipo `PoNavbarLiterals` conforme exemplo abaixo:
     *
     * ```
     *  const customLiterals: PoNavbarLiterals = {
     *    navbarLinks: 'Itens de navegação'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-navbar
     *   [p-literals]="customLiterals">
     * </po-navbar>
     * ```
     *
     *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
     */
    set literals(value: PoNavbarLiterals);
    get literals(): PoNavbarLiterals;
    /**
     * @optional
     *
     * @description
     *
     * Define a logo apresentada `po-navbar`.
     */
    set logo(value: string);
    get logo(): string;
    /**
     * @optional
     *
     * @description
     *
     * Caso já possua um menu na aplicação o mesmo deve ser repassado para essa propriedade para que quando entre em modo
     * responsivo os items do `po-navbar` possam ser adicionados no primeiro item do menu definido.
     *
     * > Ao utilizar menu e navbar com logo mantém apenas a logo do navbar.
     *
     * Exemplo:
     *
     * ```
     * <po-navbar
     *  [p-items]="items"
     *  [p-icon-actions]="iconActions"
     *  [p-menu]="userMenu">
     * </po-navbar>
     * <div class="po-wrapper">
     *  <po-menu #userMenu
     *   [p-menus]="[{ label: 'Item 1', link: '/' }]">
     *  </po-menu>
     * </div>
     * ```
     */
    menu?: PoMenuComponent;
    /**
     * @optional
     *
     * @description
     *
     * Aplica uma sombra na parte inferior do `po-navbar`.
     *
     * @default `false`
     */
    set shadow(value: boolean);
    get shadow(): boolean;
    protected abstract validateMenuLogo(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoNavbarBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoNavbarBaseComponent, never, never, { "iconActions": "p-icon-actions"; "items": "p-items"; "literals": "p-literals"; "logo": "p-logo"; "shadow": "p-shadow"; "menu": "p-menu"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbmF2YmFyLWJhc2UuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBvLW5hdmJhci1iYXNlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUG9NZW51Q29tcG9uZW50IH0gZnJvbSAnLi4vcG8tbWVudSc7XG5pbXBvcnQgeyBQb05hdmJhckljb25BY3Rpb24gfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tbmF2YmFyLWljb24tYWN0aW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb05hdmJhckl0ZW0gfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tbmF2YmFyLWl0ZW0uaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvTmF2YmFyTGl0ZXJhbHMgfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tbmF2YmFyLWxpdGVyYWxzLmludGVyZmFjZSc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBwb05hdmJhckxpdGVyYWxzRGVmYXVsdDoge1xuICAgIGVuOiBQb05hdmJhckxpdGVyYWxzO1xuICAgIGVzOiBQb05hdmJhckxpdGVyYWxzO1xuICAgIHB0OiBQb05hdmJhckxpdGVyYWxzO1xuICAgIHJ1OiBQb05hdmJhckxpdGVyYWxzO1xufTtcbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogTyBjb21wb25lbnRlIGBwby1uYXZiYXJgIMOpIHVtIGNhYmXDp2FsaG8gZml4byBxdWUgcGVybWl0ZSBhcHJlc2VudGFyIHVtYSBsaXN0YSBkZSBsaW5rcyBwYXJhIGZhY2lsaXRhciBhIG5hdmVnYcOnw6NvIHBlbGFzXG4gKiBww6FnaW5hcyBkYSBhcGxpY2HDp8Ojby4gVGFtYsOpbSBwb3NzdWkgw61jb25lcyBjb20gYcOnw7Vlcy5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgYWJzdHJhY3QgY2xhc3MgUG9OYXZiYXJCYXNlQ29tcG9uZW50IHtcbiAgICBwcml2YXRlIF9pY29uQWN0aW9ucztcbiAgICBwcml2YXRlIF9pdGVtcztcbiAgICBwcml2YXRlIF9saXRlcmFscztcbiAgICBwcml2YXRlIF9sb2dvO1xuICAgIHByaXZhdGUgX3NoYWRvdztcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogRGVmaW5lIHVtYSBsaXN0YSBkZSBhw6fDtWVzIGFwcmVzZW50YWRhcyBlbSDDrWNvbmVzIG5vIGxhZG8gZGlyZWl0byBkbyBgcG8tbmF2YmFyYC5cbiAgICAgKi9cbiAgICBzZXQgaWNvbkFjdGlvbnModmFsdWU6IEFycmF5PFBvTmF2YmFySWNvbkFjdGlvbj4pO1xuICAgIGdldCBpY29uQWN0aW9ucygpOiBBcnJheTxQb05hdmJhckljb25BY3Rpb24+O1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBEZWZpbmUgdW1hIGxpc3RhIGRlIGl0ZW1zIGRvIGBwby1uYXZiYXJgLlxuICAgICAqL1xuICAgIHNldCBpdGVtcyh2YWx1ZTogQXJyYXk8UG9OYXZiYXJJdGVtPik7XG4gICAgZ2V0IGl0ZW1zKCk6IEFycmF5PFBvTmF2YmFySXRlbT47XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIE9iamV0byBjb20gYSBsaXRlcmFsIHVzYWRhIG5hIHByb3ByaWVkYWRlIGBwLWxpdGVyYWxzYC5cbiAgICAgKlxuICAgICAqIFBhcmEgY3VzdG9taXphciBhIGxpdGVyYWwsIGJhc3RhIGRlY2xhcmFyIHVtIG9iamV0byBkbyB0aXBvIGBQb05hdmJhckxpdGVyYWxzYCBjb25mb3JtZSBleGVtcGxvIGFiYWl4bzpcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqICBjb25zdCBjdXN0b21MaXRlcmFsczogUG9OYXZiYXJMaXRlcmFscyA9IHtcbiAgICAgKiAgICBuYXZiYXJMaW5rczogJ0l0ZW5zIGRlIG5hdmVnYcOnw6NvJ1xuICAgICAqICB9O1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogRSBwYXJhIGNhcnJlZ2FyIGFzIGxpdGVyYWlzIGN1c3RvbWl6YWRhcywgYmFzdGEgYXBlbmFzIHBhc3NhciBvIG9iamV0byBwYXJhIG8gY29tcG9uZW50ZS5cbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIDxwby1uYXZiYXJcbiAgICAgKiAgIFtwLWxpdGVyYWxzXT1cImN1c3RvbUxpdGVyYWxzXCI+XG4gICAgICogPC9wby1uYXZiYXI+XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiAgPiBPIG9iamV0byBwYWRyw6NvIGRlIGxpdGVyYWlzIHNlcsOhIHRyYWR1emlkbyBkZSBhY29yZG8gY29tIG8gaWRpb21hIGRvICpicm93c2VyKiAocHQsIGVuLCBlcykuXG4gICAgICovXG4gICAgc2V0IGxpdGVyYWxzKHZhbHVlOiBQb05hdmJhckxpdGVyYWxzKTtcbiAgICBnZXQgbGl0ZXJhbHMoKTogUG9OYXZiYXJMaXRlcmFscztcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogRGVmaW5lIGEgbG9nbyBhcHJlc2VudGFkYSBgcG8tbmF2YmFyYC5cbiAgICAgKi9cbiAgICBzZXQgbG9nbyh2YWx1ZTogc3RyaW5nKTtcbiAgICBnZXQgbG9nbygpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIENhc28gasOhIHBvc3N1YSB1bSBtZW51IG5hIGFwbGljYcOnw6NvIG8gbWVzbW8gZGV2ZSBzZXIgcmVwYXNzYWRvIHBhcmEgZXNzYSBwcm9wcmllZGFkZSBwYXJhIHF1ZSBxdWFuZG8gZW50cmUgZW0gbW9kb1xuICAgICAqIHJlc3BvbnNpdm8gb3MgaXRlbXMgZG8gYHBvLW5hdmJhcmAgcG9zc2FtIHNlciBhZGljaW9uYWRvcyBubyBwcmltZWlybyBpdGVtIGRvIG1lbnUgZGVmaW5pZG8uXG4gICAgICpcbiAgICAgKiA+IEFvIHV0aWxpemFyIG1lbnUgZSBuYXZiYXIgY29tIGxvZ28gbWFudMOpbSBhcGVuYXMgYSBsb2dvIGRvIG5hdmJhci5cbiAgICAgKlxuICAgICAqIEV4ZW1wbG86XG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiA8cG8tbmF2YmFyXG4gICAgICogIFtwLWl0ZW1zXT1cIml0ZW1zXCJcbiAgICAgKiAgW3AtaWNvbi1hY3Rpb25zXT1cImljb25BY3Rpb25zXCJcbiAgICAgKiAgW3AtbWVudV09XCJ1c2VyTWVudVwiPlxuICAgICAqIDwvcG8tbmF2YmFyPlxuICAgICAqIDxkaXYgY2xhc3M9XCJwby13cmFwcGVyXCI+XG4gICAgICogIDxwby1tZW51ICN1c2VyTWVudVxuICAgICAqICAgW3AtbWVudXNdPVwiW3sgbGFiZWw6ICdJdGVtIDEnLCBsaW5rOiAnLycgfV1cIj5cbiAgICAgKiAgPC9wby1tZW51PlxuICAgICAqIDwvZGl2PlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIG1lbnU/OiBQb01lbnVDb21wb25lbnQ7XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIEFwbGljYSB1bWEgc29tYnJhIG5hIHBhcnRlIGluZmVyaW9yIGRvIGBwby1uYXZiYXJgLlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgICAqL1xuICAgIHNldCBzaGFkb3codmFsdWU6IGJvb2xlYW4pO1xuICAgIGdldCBzaGFkb3coKTogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgdmFsaWRhdGVNZW51TG9nbygpOiB2b2lkO1xufVxuIl19