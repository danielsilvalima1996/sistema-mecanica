import { PoSlideItem } from './interfaces/po-slide-item.interface';
/**
 * @description
 *
 * Componente de slide para visualização e controle de elementos de forma cíclica. Exibe um conjunto de imagens ou dados que permitem
 * customizar sua visualização utilizando a diretiva **[p-slide-content-template](/documentation/po-slide-content-template)**.
 *
 * #### Boas práticas:
 * - Utilizar imagens no slide, mesmo quando possui conteúdo personalizado.
 * - Evitar utilizar apenas um slide isolado, utilize pelo menos dois.
 * - Evitar utilizar mais de 5 slides, pois a ideia do componente é destacar apenas informações importantes.
 */
import * as ɵngcc0 from '@angular/core';
export declare abstract class PoSlideBaseComponent {
    private _interval;
    private _height?;
    private _slides;
    /**
     * @optional
     *
     * @description
     * Altura do po-slide, caso seja slide com template customizado, não assume o valor `default`.
     *
     * @default `336`
     */
    set height(value: number);
    get height(): number;
    /**
     * @optional
     *
     * @description
     *
     * Valor em milissegundos que define o tempo de troca dos slides, caso o valor seja menor que `1000` os slides não trocam automaticamente.
     *
     * @default `4000`
     */
    set interval(value: number);
    get interval(): number;
    /**
     * @description
     *
     * Array de imagens ou dados para o slide, pode ser de três formas:
     *
     * - Array implementando objetos da interface `PoSlideItem`:
     * ```
     * [{ image: '/assets/image-1', action: 'imageClick.bind(this)'}, { image: '/assets/image-2' }]
     * ```
     * - Array de `strings` com os caminhos das imagens:
     * ```
     * ['/assets/image-1', '/assets/image-2' ]
     * ```
     * - Array com lista de itens (para utilizar template):
     * ```
     * [{ label: '1', img: '/assets/image-1' }, { label: '2', img: '/assets/image-1' }]
     * ```
     *
     * > As setas de navegação e o controle com círculos apenas serão renderizados caso possua mais de um slide.
     */
    set slides(value: Array<PoSlideItem | string | any>);
    get slides(): Array<PoSlideItem | string | any>;
    abstract setSlideHeight(height: number): void;
    protected abstract cancelInterval(): void;
    protected abstract setSlideItems(value: Array<PoSlideItem | string | any>): void;
    protected abstract startSlide(): void;
    protected abstract startInterval(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoSlideBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoSlideBaseComponent, never, never, { "height": "p-height"; "interval": "p-interval"; "slides": "p-slides"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tc2xpZGUtYmFzZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicG8tc2xpZGUtYmFzZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUG9TbGlkZUl0ZW0gfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tc2xpZGUtaXRlbS5pbnRlcmZhY2UnO1xuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBDb21wb25lbnRlIGRlIHNsaWRlIHBhcmEgdmlzdWFsaXphw6fDo28gZSBjb250cm9sZSBkZSBlbGVtZW50b3MgZGUgZm9ybWEgY8OtY2xpY2EuIEV4aWJlIHVtIGNvbmp1bnRvIGRlIGltYWdlbnMgb3UgZGFkb3MgcXVlIHBlcm1pdGVtXG4gKiBjdXN0b21pemFyIHN1YSB2aXN1YWxpemHDp8OjbyB1dGlsaXphbmRvIGEgZGlyZXRpdmEgKipbcC1zbGlkZS1jb250ZW50LXRlbXBsYXRlXSgvZG9jdW1lbnRhdGlvbi9wby1zbGlkZS1jb250ZW50LXRlbXBsYXRlKSoqLlxuICpcbiAqICMjIyMgQm9hcyBwcsOhdGljYXM6XG4gKiAtIFV0aWxpemFyIGltYWdlbnMgbm8gc2xpZGUsIG1lc21vIHF1YW5kbyBwb3NzdWkgY29udGXDumRvIHBlcnNvbmFsaXphZG8uXG4gKiAtIEV2aXRhciB1dGlsaXphciBhcGVuYXMgdW0gc2xpZGUgaXNvbGFkbywgdXRpbGl6ZSBwZWxvIG1lbm9zIGRvaXMuXG4gKiAtIEV2aXRhciB1dGlsaXphciBtYWlzIGRlIDUgc2xpZGVzLCBwb2lzIGEgaWRlaWEgZG8gY29tcG9uZW50ZSDDqSBkZXN0YWNhciBhcGVuYXMgaW5mb3JtYcOnw7VlcyBpbXBvcnRhbnRlcy5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgYWJzdHJhY3QgY2xhc3MgUG9TbGlkZUJhc2VDb21wb25lbnQge1xuICAgIHByaXZhdGUgX2ludGVydmFsO1xuICAgIHByaXZhdGUgX2hlaWdodD87XG4gICAgcHJpdmF0ZSBfc2xpZGVzO1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQWx0dXJhIGRvIHBvLXNsaWRlLCBjYXNvIHNlamEgc2xpZGUgY29tIHRlbXBsYXRlIGN1c3RvbWl6YWRvLCBuw6NvIGFzc3VtZSBvIHZhbG9yIGBkZWZhdWx0YC5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IGAzMzZgXG4gICAgICovXG4gICAgc2V0IGhlaWdodCh2YWx1ZTogbnVtYmVyKTtcbiAgICBnZXQgaGVpZ2h0KCk6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogVmFsb3IgZW0gbWlsaXNzZWd1bmRvcyBxdWUgZGVmaW5lIG8gdGVtcG8gZGUgdHJvY2EgZG9zIHNsaWRlcywgY2FzbyBvIHZhbG9yIHNlamEgbWVub3IgcXVlIGAxMDAwYCBvcyBzbGlkZXMgbsOjbyB0cm9jYW0gYXV0b21hdGljYW1lbnRlLlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgYDQwMDBgXG4gICAgICovXG4gICAgc2V0IGludGVydmFsKHZhbHVlOiBudW1iZXIpO1xuICAgIGdldCBpbnRlcnZhbCgpOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBBcnJheSBkZSBpbWFnZW5zIG91IGRhZG9zIHBhcmEgbyBzbGlkZSwgcG9kZSBzZXIgZGUgdHLDqnMgZm9ybWFzOlxuICAgICAqXG4gICAgICogLSBBcnJheSBpbXBsZW1lbnRhbmRvIG9iamV0b3MgZGEgaW50ZXJmYWNlIGBQb1NsaWRlSXRlbWA6XG4gICAgICogYGBgXG4gICAgICogW3sgaW1hZ2U6ICcvYXNzZXRzL2ltYWdlLTEnLCBhY3Rpb246ICdpbWFnZUNsaWNrLmJpbmQodGhpcyknfSwgeyBpbWFnZTogJy9hc3NldHMvaW1hZ2UtMicgfV1cbiAgICAgKiBgYGBcbiAgICAgKiAtIEFycmF5IGRlIGBzdHJpbmdzYCBjb20gb3MgY2FtaW5ob3MgZGFzIGltYWdlbnM6XG4gICAgICogYGBgXG4gICAgICogWycvYXNzZXRzL2ltYWdlLTEnLCAnL2Fzc2V0cy9pbWFnZS0yJyBdXG4gICAgICogYGBgXG4gICAgICogLSBBcnJheSBjb20gbGlzdGEgZGUgaXRlbnMgKHBhcmEgdXRpbGl6YXIgdGVtcGxhdGUpOlxuICAgICAqIGBgYFxuICAgICAqIFt7IGxhYmVsOiAnMScsIGltZzogJy9hc3NldHMvaW1hZ2UtMScgfSwgeyBsYWJlbDogJzInLCBpbWc6ICcvYXNzZXRzL2ltYWdlLTEnIH1dXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiA+IEFzIHNldGFzIGRlIG5hdmVnYcOnw6NvIGUgbyBjb250cm9sZSBjb20gY8OtcmN1bG9zIGFwZW5hcyBzZXLDo28gcmVuZGVyaXphZG9zIGNhc28gcG9zc3VhIG1haXMgZGUgdW0gc2xpZGUuXG4gICAgICovXG4gICAgc2V0IHNsaWRlcyh2YWx1ZTogQXJyYXk8UG9TbGlkZUl0ZW0gfCBzdHJpbmcgfCBhbnk+KTtcbiAgICBnZXQgc2xpZGVzKCk6IEFycmF5PFBvU2xpZGVJdGVtIHwgc3RyaW5nIHwgYW55PjtcbiAgICBhYnN0cmFjdCBzZXRTbGlkZUhlaWdodChoZWlnaHQ6IG51bWJlcik6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IGNhbmNlbEludGVydmFsKCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IHNldFNsaWRlSXRlbXModmFsdWU6IEFycmF5PFBvU2xpZGVJdGVtIHwgc3RyaW5nIHwgYW55Pik6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IHN0YXJ0U2xpZGUoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3Qgc3RhcnRJbnRlcnZhbCgpOiB2b2lkO1xufVxuIl19