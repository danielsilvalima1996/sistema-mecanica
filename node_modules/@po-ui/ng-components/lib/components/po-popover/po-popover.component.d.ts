import { AfterViewInit, ElementRef, OnDestroy, Renderer2 } from '@angular/core';
import { PoControlPositionService } from './../../services/po-control-position/po-control-position.service';
import { PoPopoverBaseComponent } from './po-popover-base.component';
/**
 *
 * @docsExtends PoPopoverBaseComponent
 *
 * @example
 *
 * <example name="po-popover-basic" title="PO Popover Basic">
 *   <file name="sample-po-popover-basic/sample-po-popover-basic.component.html"> </file>
 *   <file name="sample-po-popover-basic/sample-po-popover-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-popover-labs" title="PO Popover Labs">
 *   <file name="sample-po-popover-labs/sample-po-popover-labs.component.html"> </file>
 *   <file name="sample-po-popover-labs/sample-po-popover-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-popover-credit-card" title="PO Popover - Credit Card">
 *   <file name="sample-po-popover-credit-card/sample-po-popover-credit-card.component.html"> </file>
 *   <file name="sample-po-popover-credit-card/sample-po-popover-credit-card.component.ts"> </file>
 * </example>
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoPopoverComponent extends PoPopoverBaseComponent implements AfterViewInit, OnDestroy {
    private renderer;
    private poControlPosition;
    arrowDirection: string;
    timeoutResize: any;
    eventListenerFunction: () => void;
    popoverElement: ElementRef;
    constructor(renderer: Renderer2, poControlPosition: PoControlPositionService);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    close(): void;
    debounceResize(): void;
    open(): void;
    setOpacity(value: number): void;
    setPopoverPosition(): void;
    setRendererListenInit(): void;
    togglePopup(event: any): void;
    private addScrollEventListener;
    private initEventListenerFunction;
    private removeListeners;
    private setElementsControlPosition;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoPopoverComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PoPopoverComponent, "po-popover", never, {}, {}, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcG9wb3Zlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicG8tcG9wb3Zlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIEVsZW1lbnRSZWYsIE9uRGVzdHJveSwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQb0NvbnRyb2xQb3NpdGlvblNlcnZpY2UgfSBmcm9tICcuLy4uLy4uL3NlcnZpY2VzL3BvLWNvbnRyb2wtcG9zaXRpb24vcG8tY29udHJvbC1wb3NpdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IFBvUG9wb3ZlckJhc2VDb21wb25lbnQgfSBmcm9tICcuL3BvLXBvcG92ZXItYmFzZS5jb21wb25lbnQnO1xuLyoqXG4gKlxuICogQGRvY3NFeHRlbmRzIFBvUG9wb3ZlckJhc2VDb21wb25lbnRcbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJwby1wb3BvdmVyLWJhc2ljXCIgdGl0bGU9XCJQTyBQb3BvdmVyIEJhc2ljXCI+XG4gKiAgIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tcG9wb3Zlci1iYXNpYy9zYW1wbGUtcG8tcG9wb3Zlci1iYXNpYy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tcG9wb3Zlci1iYXNpYy9zYW1wbGUtcG8tcG9wb3Zlci1iYXNpYy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJwby1wb3BvdmVyLWxhYnNcIiB0aXRsZT1cIlBPIFBvcG92ZXIgTGFic1wiPlxuICogICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXBvcG92ZXItbGFicy9zYW1wbGUtcG8tcG9wb3Zlci1sYWJzLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1wb3BvdmVyLWxhYnMvc2FtcGxlLXBvLXBvcG92ZXItbGFicy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJwby1wb3BvdmVyLWNyZWRpdC1jYXJkXCIgdGl0bGU9XCJQTyBQb3BvdmVyIC0gQ3JlZGl0IENhcmRcIj5cbiAqICAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1wb3BvdmVyLWNyZWRpdC1jYXJkL3NhbXBsZS1wby1wb3BvdmVyLWNyZWRpdC1jYXJkLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1wb3BvdmVyLWNyZWRpdC1jYXJkL3NhbXBsZS1wby1wb3BvdmVyLWNyZWRpdC1jYXJkLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBvUG9wb3ZlckNvbXBvbmVudCBleHRlbmRzIFBvUG9wb3ZlckJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgcmVuZGVyZXI7XG4gICAgcHJpdmF0ZSBwb0NvbnRyb2xQb3NpdGlvbjtcbiAgICBhcnJvd0RpcmVjdGlvbjogc3RyaW5nO1xuICAgIHRpbWVvdXRSZXNpemU6IGFueTtcbiAgICBldmVudExpc3RlbmVyRnVuY3Rpb246ICgpID0+IHZvaWQ7XG4gICAgcG9wb3ZlckVsZW1lbnQ6IEVsZW1lbnRSZWY7XG4gICAgY29uc3RydWN0b3IocmVuZGVyZXI6IFJlbmRlcmVyMiwgcG9Db250cm9sUG9zaXRpb246IFBvQ29udHJvbFBvc2l0aW9uU2VydmljZSk7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBjbG9zZSgpOiB2b2lkO1xuICAgIGRlYm91bmNlUmVzaXplKCk6IHZvaWQ7XG4gICAgb3BlbigpOiB2b2lkO1xuICAgIHNldE9wYWNpdHkodmFsdWU6IG51bWJlcik6IHZvaWQ7XG4gICAgc2V0UG9wb3ZlclBvc2l0aW9uKCk6IHZvaWQ7XG4gICAgc2V0UmVuZGVyZXJMaXN0ZW5Jbml0KCk6IHZvaWQ7XG4gICAgdG9nZ2xlUG9wdXAoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBhZGRTY3JvbGxFdmVudExpc3RlbmVyO1xuICAgIHByaXZhdGUgaW5pdEV2ZW50TGlzdGVuZXJGdW5jdGlvbjtcbiAgICBwcml2YXRlIHJlbW92ZUxpc3RlbmVycztcbiAgICBwcml2YXRlIHNldEVsZW1lbnRzQ29udHJvbFBvc2l0aW9uO1xufVxuIl19