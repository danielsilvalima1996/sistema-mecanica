import { PoLanguageService } from '../../../services/po-language/po-language.service';
import { PoLoadingOverlayLiterals } from './interfaces/po-loading-overlay-literals.interface';
import * as ɵngcc0 from '@angular/core';
export declare const poLoadingOverlayLiteralsDefault: {
    en: PoLoadingOverlayLiterals;
    es: PoLoadingOverlayLiterals;
    pt: PoLoadingOverlayLiterals;
    ru: PoLoadingOverlayLiterals;
};
/**
 *
 * @description
 *
 * Este componente mostra ao usuário uma imagem de _loading_ e bloqueia a página inteira ou o container escolhido,
 * enquanto aguarda a resposta de alguma requisição.
 */
export declare class PoLoadingOverlayBaseComponent {
    private languageService;
    private _screenLock?;
    private _text?;
    /**
     * @optional
     *
     * @description
     *
     * Define se o *overlay* será aplicado a um *container* ou a página inteira.
     *
     * Para utilizar o componente como um *container*, o elemento pai deverá receber uma posição relativa, por exemplo:
     *
     * ```
     * <div style="position: relative">
     *
     *  <po-chart [p-series]="[{ value: 10, category: 'Example' }]">
     *  </po-chart>
     *
     *  <po-loading-overlay>
     *  </po-loading-overlay>
     * </div>
     * ```
     *
     * @default `false`
     */
    set screenLock(screenLock: boolean);
    get screenLock(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Texto a ser exibido no componente.
     *
     * > O valor padrão será traduzido acordo com o idioma configurado no [**PoI18n**](/documentation/po-i18n) ou navegador.
     *
     * @default `Carregando`
     */
    set text(value: string);
    get text(): string;
    constructor(languageService: PoLanguageService);
    private getTextDefault;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoLoadingOverlayBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoLoadingOverlayBaseComponent, never, never, { "text": "p-text"; "screenLock": "p-screen-lock"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbG9hZGluZy1vdmVybGF5LWJhc2UuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBvLWxvYWRpbmctb3ZlcmxheS1iYXNlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQb0xhbmd1YWdlU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3NlcnZpY2VzL3BvLWxhbmd1YWdlL3BvLWxhbmd1YWdlLnNlcnZpY2UnO1xuaW1wb3J0IHsgUG9Mb2FkaW5nT3ZlcmxheUxpdGVyYWxzIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BvLWxvYWRpbmctb3ZlcmxheS1saXRlcmFscy5pbnRlcmZhY2UnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgcG9Mb2FkaW5nT3ZlcmxheUxpdGVyYWxzRGVmYXVsdDoge1xuICAgIGVuOiBQb0xvYWRpbmdPdmVybGF5TGl0ZXJhbHM7XG4gICAgZXM6IFBvTG9hZGluZ092ZXJsYXlMaXRlcmFscztcbiAgICBwdDogUG9Mb2FkaW5nT3ZlcmxheUxpdGVyYWxzO1xuICAgIHJ1OiBQb0xvYWRpbmdPdmVybGF5TGl0ZXJhbHM7XG59O1xuLyoqXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogRXN0ZSBjb21wb25lbnRlIG1vc3RyYSBhbyB1c3XDoXJpbyB1bWEgaW1hZ2VtIGRlIF9sb2FkaW5nXyBlIGJsb3F1ZWlhIGEgcMOhZ2luYSBpbnRlaXJhIG91IG8gY29udGFpbmVyIGVzY29saGlkbyxcbiAqIGVucXVhbnRvIGFndWFyZGEgYSByZXNwb3N0YSBkZSBhbGd1bWEgcmVxdWlzacOnw6NvLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQb0xvYWRpbmdPdmVybGF5QmFzZUNvbXBvbmVudCB7XG4gICAgcHJpdmF0ZSBsYW5ndWFnZVNlcnZpY2U7XG4gICAgcHJpdmF0ZSBfc2NyZWVuTG9jaz87XG4gICAgcHJpdmF0ZSBfdGV4dD87XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIERlZmluZSBzZSBvICpvdmVybGF5KiBzZXLDoSBhcGxpY2FkbyBhIHVtICpjb250YWluZXIqIG91IGEgcMOhZ2luYSBpbnRlaXJhLlxuICAgICAqXG4gICAgICogUGFyYSB1dGlsaXphciBvIGNvbXBvbmVudGUgY29tbyB1bSAqY29udGFpbmVyKiwgbyBlbGVtZW50byBwYWkgZGV2ZXLDoSByZWNlYmVyIHVtYSBwb3Npw6fDo28gcmVsYXRpdmEsIHBvciBleGVtcGxvOlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogPGRpdiBzdHlsZT1cInBvc2l0aW9uOiByZWxhdGl2ZVwiPlxuICAgICAqXG4gICAgICogIDxwby1jaGFydCBbcC1zZXJpZXNdPVwiW3sgdmFsdWU6IDEwLCBjYXRlZ29yeTogJ0V4YW1wbGUnIH1dXCI+XG4gICAgICogIDwvcG8tY2hhcnQ+XG4gICAgICpcbiAgICAgKiAgPHBvLWxvYWRpbmctb3ZlcmxheT5cbiAgICAgKiAgPC9wby1sb2FkaW5nLW92ZXJsYXk+XG4gICAgICogPC9kaXY+XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAgICovXG4gICAgc2V0IHNjcmVlbkxvY2soc2NyZWVuTG9jazogYm9vbGVhbik7XG4gICAgZ2V0IHNjcmVlbkxvY2soKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogVGV4dG8gYSBzZXIgZXhpYmlkbyBubyBjb21wb25lbnRlLlxuICAgICAqXG4gICAgICogPiBPIHZhbG9yIHBhZHLDo28gc2Vyw6EgdHJhZHV6aWRvIGFjb3JkbyBjb20gbyBpZGlvbWEgY29uZmlndXJhZG8gbm8gWyoqUG9JMThuKipdKC9kb2N1bWVudGF0aW9uL3BvLWkxOG4pIG91IG5hdmVnYWRvci5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IGBDYXJyZWdhbmRvYFxuICAgICAqL1xuICAgIHNldCB0ZXh0KHZhbHVlOiBzdHJpbmcpO1xuICAgIGdldCB0ZXh0KCk6IHN0cmluZztcbiAgICBjb25zdHJ1Y3RvcihsYW5ndWFnZVNlcnZpY2U6IFBvTGFuZ3VhZ2VTZXJ2aWNlKTtcbiAgICBwcml2YXRlIGdldFRleHREZWZhdWx0O1xufVxuIl19