import { DoCheck, EventEmitter, IterableDiffers } from '@angular/core';
import { PoDisclaimer } from '../po-disclaimer/po-disclaimer.interface';
import * as ɵngcc0 from '@angular/core';
export declare const poDisclaimerGroupLiteralsDefault: {
    en: {
        removeAll: string;
    };
    es: {
        removeAll: string;
    };
    pt: {
        removeAll: string;
    };
};
/**
 * @description
 *
 * O componente `po-disclaimer-group` é recomendado para manipular palavras-chave de filtros aplicados em uma pesquisa.
 *
 * À partir de dois *disclaimers* com o botão **fechar** habilitado, o componente renderiza de forma automática um novo e destacado
 * *disclaimer* que possibilita **remover todos**, mas que também pode ser desabilitado.
 *
 * Também é possível navegar entre os *disclaimers* através do teclado utilizando a tecla *tab* e, para remoção do *disclaimer* selecionado,
 * basta pressionar a tecla *enter*. Esta funcionalidade não se aplica caso a propriedade `hideClose` estiver habilitada.
 *
 * > Veja a integração destas funcionalidade no componente [po-page-list](/documentation/po-page-list).
 */
export declare class PoDisclaimerGroupBaseComponent implements DoCheck {
    private _disclaimers;
    private _hideRemoveAll;
    private differ;
    private previousDisclaimers;
    readonly literals: any;
    /** Lista de *disclaimers*. */
    /**
     * @description
     *
     * Lista de *disclaimers*.
     *
     * Para que a lista de *disclaimers* seja atualizada dinamicamente deve-se passar uma nova referência do array de `PoDisclaimer`.
     *
     * Exemplo adicionando um *disclaimer* no array:
     *
     * ```
     * this.disclaimers = [...this.disclaimers, disclaimer];
     * ```
     *
     * ou
     *
     * ```
     * this.disclaimers = this.disclaimers.concat(disclaimer);
     * ```
     */
    set disclaimers(value: Array<PoDisclaimer>);
    get disclaimers(): Array<PoDisclaimer>;
    /**
     * @optional
     *
     * @description
     *
     * Oculta o botão para remover todos os *disclaimers* do grupo.
     *
     * > Por padrão, o mesmo é exibido à partir de dois ou mais *disclaimers* com a opção `hideClose` habilitada.
     *
     * @default `false`
     */
    set hideRemoveAll(value: boolean);
    get hideRemoveAll(): boolean;
    /** Título do grupo de *disclaimers*. */
    title?: string;
    /** Função que será disparada quando a lista de *disclaimers* for modificada. */
    change?: EventEmitter<any>;
    constructor(differs: IterableDiffers);
    ngDoCheck(): void;
    closeItem(disclaimer: any, emitChange?: boolean): void;
    isRemoveAll(): boolean;
    onKeyPress(event: any): void;
    removeAllItems(): void;
    private checkChanges;
    private checkDisclaimers;
    private disclaimersAreChanged;
    private emitChangeDisclaimers;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoDisclaimerGroupBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoDisclaimerGroupBaseComponent, never, never, { "disclaimers": "p-disclaimers"; "hideRemoveAll": "p-hide-remove-all"; "title": "p-title"; }, { "change": "p-change"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZGlzY2xhaW1lci1ncm91cC1iYXNlLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJwby1kaXNjbGFpbWVyLWdyb3VwLWJhc2UuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEb0NoZWNrLCBFdmVudEVtaXR0ZXIsIEl0ZXJhYmxlRGlmZmVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUG9EaXNjbGFpbWVyIH0gZnJvbSAnLi4vcG8tZGlzY2xhaW1lci9wby1kaXNjbGFpbWVyLmludGVyZmFjZSc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBwb0Rpc2NsYWltZXJHcm91cExpdGVyYWxzRGVmYXVsdDoge1xuICAgIGVuOiB7XG4gICAgICAgIHJlbW92ZUFsbDogc3RyaW5nO1xuICAgIH07XG4gICAgZXM6IHtcbiAgICAgICAgcmVtb3ZlQWxsOiBzdHJpbmc7XG4gICAgfTtcbiAgICBwdDoge1xuICAgICAgICByZW1vdmVBbGw6IHN0cmluZztcbiAgICB9O1xufTtcbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogTyBjb21wb25lbnRlIGBwby1kaXNjbGFpbWVyLWdyb3VwYCDDqSByZWNvbWVuZGFkbyBwYXJhIG1hbmlwdWxhciBwYWxhdnJhcy1jaGF2ZSBkZSBmaWx0cm9zIGFwbGljYWRvcyBlbSB1bWEgcGVzcXVpc2EuXG4gKlxuICogw4AgcGFydGlyIGRlIGRvaXMgKmRpc2NsYWltZXJzKiBjb20gbyBib3TDo28gKipmZWNoYXIqKiBoYWJpbGl0YWRvLCBvIGNvbXBvbmVudGUgcmVuZGVyaXphIGRlIGZvcm1hIGF1dG9tw6F0aWNhIHVtIG5vdm8gZSBkZXN0YWNhZG9cbiAqICpkaXNjbGFpbWVyKiBxdWUgcG9zc2liaWxpdGEgKipyZW1vdmVyIHRvZG9zKiosIG1hcyBxdWUgdGFtYsOpbSBwb2RlIHNlciBkZXNhYmlsaXRhZG8uXG4gKlxuICogVGFtYsOpbSDDqSBwb3Nzw612ZWwgbmF2ZWdhciBlbnRyZSBvcyAqZGlzY2xhaW1lcnMqIGF0cmF2w6lzIGRvIHRlY2xhZG8gdXRpbGl6YW5kbyBhIHRlY2xhICp0YWIqIGUsIHBhcmEgcmVtb8Onw6NvIGRvICpkaXNjbGFpbWVyKiBzZWxlY2lvbmFkbyxcbiAqIGJhc3RhIHByZXNzaW9uYXIgYSB0ZWNsYSAqZW50ZXIqLiBFc3RhIGZ1bmNpb25hbGlkYWRlIG7Do28gc2UgYXBsaWNhIGNhc28gYSBwcm9wcmllZGFkZSBgaGlkZUNsb3NlYCBlc3RpdmVyIGhhYmlsaXRhZGEuXG4gKlxuICogPiBWZWphIGEgaW50ZWdyYcOnw6NvIGRlc3RhcyBmdW5jaW9uYWxpZGFkZSBubyBjb21wb25lbnRlIFtwby1wYWdlLWxpc3RdKC9kb2N1bWVudGF0aW9uL3BvLXBhZ2UtbGlzdCkuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBvRGlzY2xhaW1lckdyb3VwQmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIERvQ2hlY2sge1xuICAgIHByaXZhdGUgX2Rpc2NsYWltZXJzO1xuICAgIHByaXZhdGUgX2hpZGVSZW1vdmVBbGw7XG4gICAgcHJpdmF0ZSBkaWZmZXI7XG4gICAgcHJpdmF0ZSBwcmV2aW91c0Rpc2NsYWltZXJzO1xuICAgIHJlYWRvbmx5IGxpdGVyYWxzOiBhbnk7XG4gICAgLyoqIExpc3RhIGRlICpkaXNjbGFpbWVycyouICovXG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBMaXN0YSBkZSAqZGlzY2xhaW1lcnMqLlxuICAgICAqXG4gICAgICogUGFyYSBxdWUgYSBsaXN0YSBkZSAqZGlzY2xhaW1lcnMqIHNlamEgYXR1YWxpemFkYSBkaW5hbWljYW1lbnRlIGRldmUtc2UgcGFzc2FyIHVtYSBub3ZhIHJlZmVyw6puY2lhIGRvIGFycmF5IGRlIGBQb0Rpc2NsYWltZXJgLlxuICAgICAqXG4gICAgICogRXhlbXBsbyBhZGljaW9uYW5kbyB1bSAqZGlzY2xhaW1lciogbm8gYXJyYXk6XG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiB0aGlzLmRpc2NsYWltZXJzID0gWy4uLnRoaXMuZGlzY2xhaW1lcnMsIGRpc2NsYWltZXJdO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogb3VcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIHRoaXMuZGlzY2xhaW1lcnMgPSB0aGlzLmRpc2NsYWltZXJzLmNvbmNhdChkaXNjbGFpbWVyKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBzZXQgZGlzY2xhaW1lcnModmFsdWU6IEFycmF5PFBvRGlzY2xhaW1lcj4pO1xuICAgIGdldCBkaXNjbGFpbWVycygpOiBBcnJheTxQb0Rpc2NsYWltZXI+O1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBPY3VsdGEgbyBib3TDo28gcGFyYSByZW1vdmVyIHRvZG9zIG9zICpkaXNjbGFpbWVycyogZG8gZ3J1cG8uXG4gICAgICpcbiAgICAgKiA+IFBvciBwYWRyw6NvLCBvIG1lc21vIMOpIGV4aWJpZG8gw6AgcGFydGlyIGRlIGRvaXMgb3UgbWFpcyAqZGlzY2xhaW1lcnMqIGNvbSBhIG9ww6fDo28gYGhpZGVDbG9zZWAgaGFiaWxpdGFkYS5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICAgKi9cbiAgICBzZXQgaGlkZVJlbW92ZUFsbCh2YWx1ZTogYm9vbGVhbik7XG4gICAgZ2V0IGhpZGVSZW1vdmVBbGwoKTogYm9vbGVhbjtcbiAgICAvKiogVMOtdHVsbyBkbyBncnVwbyBkZSAqZGlzY2xhaW1lcnMqLiAqL1xuICAgIHRpdGxlPzogc3RyaW5nO1xuICAgIC8qKiBGdW7Dp8OjbyBxdWUgc2Vyw6EgZGlzcGFyYWRhIHF1YW5kbyBhIGxpc3RhIGRlICpkaXNjbGFpbWVycyogZm9yIG1vZGlmaWNhZGEuICovXG4gICAgY2hhbmdlPzogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgY29uc3RydWN0b3IoZGlmZmVyczogSXRlcmFibGVEaWZmZXJzKTtcbiAgICBuZ0RvQ2hlY2soKTogdm9pZDtcbiAgICBjbG9zZUl0ZW0oZGlzY2xhaW1lcjogYW55LCBlbWl0Q2hhbmdlPzogYm9vbGVhbik6IHZvaWQ7XG4gICAgaXNSZW1vdmVBbGwoKTogYm9vbGVhbjtcbiAgICBvbktleVByZXNzKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIHJlbW92ZUFsbEl0ZW1zKCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBjaGVja0NoYW5nZXM7XG4gICAgcHJpdmF0ZSBjaGVja0Rpc2NsYWltZXJzO1xuICAgIHByaXZhdGUgZGlzY2xhaW1lcnNBcmVDaGFuZ2VkO1xuICAgIHByaXZhdGUgZW1pdENoYW5nZURpc2NsYWltZXJzO1xufVxuIl19