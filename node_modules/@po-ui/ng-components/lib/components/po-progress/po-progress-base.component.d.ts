import { EventEmitter } from '@angular/core';
import { PoProgressStatus } from './enums/po-progress-status.enum';
/**
 * @description
 *
 * Componente de barra de progresso que possibilita exibir visualmente o progresso/carregamento de uma tarefa.
 *
 * Este componente pode ser utilizado no *upload* de arquivos, uma atualização no sistema ou o processamento de uma imagem.
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoProgressBaseComponent {
    private _indeterminate?;
    private _value?;
    /**
     * @optional
     *
     * @description
     *
     * Habilita o modo indeterminado na barra de progresso, que mostra uma animação fixa sem um valor estabelecido.
     *
     * Esta opção pode ser utilizada quando não souber quanto tempo levará para que um processo seja concluído.
     *
     * > Caso esta propriedade e a `p-value` seja habilitada, a propriedade `p-value` será ignorada.
     *
     * @default `false`
     */
    set indeterminate(indeterminate: boolean);
    get indeterminate(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Informação adicional que aparecerá abaixo da barra de progresso ao lado direito.
     */
    info?: string;
    /**
     * @optional
     *
     * @description
     *
     * Ícone que aparecerá ao lado do texto da propriedade `p-info`.
     *
     * Exemplo: `po-icon-ok`.
     */
    infoIcon?: string;
    /**
     * @optional
     *
     * @description
     *
     * Status da barra de progresso que indicará visualmente ao usuário
     * o andamento, por exemplo, se a mesma foi concluída com sucesso.
     *
     * @default `PoProgressStatus.Default`
     */
    status: PoProgressStatus;
    /**
     * @optional
     *
     * @description
     *
     * Texto principal que aparecerá abaixo da barra de progresso no lado esquerdo.
     */
    text?: string;
    /**
     * @optional
     *
     * @description
     *
     * Valor que representará o progresso.
     *
     * > Os valores aceitos são números inteiros de `0` à `100`.
     *
     * @default `0`
     */
    set value(value: number);
    get value(): number;
    /**
     * @optional
     *
     * @description
     *
     * Evento que será disparado ao clicar no ícone de cancelamento ("x") na parte inferior da barra de progresso.
     *
     * Ao ser disparado, a função receberá como parâmetro o status atual da barra de progresso.
     *
     * > Se nenhuma função for passada para o evento ou a barra de progresso estiver com o status `PoProgressStatus.Success`,
     * o ícone de cancelamento não será exibido.
     */
    cancel: EventEmitter<any>;
    /**
     * @optional
     *
     * @description
     *
     * Evento que será disparado ao clicar no ícone de tentar novamente na parte inferior da barra de progresso.
     *
     * > o ícone será exibido apenas se informar uma função neste evento e o status da barra de progresso for
     * `PoProgressStatus.Error`.
     */
    retry: EventEmitter<any>;
    private isProgressRangeValue;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoProgressBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoProgressBaseComponent, never, never, { "status": "p-status"; "indeterminate": "p-indeterminate"; "value": "p-value"; "info": "p-info"; "infoIcon": "p-info-icon"; "text": "p-text"; }, { "cancel": "p-cancel"; "retry": "p-retry"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcHJvZ3Jlc3MtYmFzZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicG8tcHJvZ3Jlc3MtYmFzZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUG9Qcm9ncmVzc1N0YXR1cyB9IGZyb20gJy4vZW51bXMvcG8tcHJvZ3Jlc3Mtc3RhdHVzLmVudW0nO1xuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBDb21wb25lbnRlIGRlIGJhcnJhIGRlIHByb2dyZXNzbyBxdWUgcG9zc2liaWxpdGEgZXhpYmlyIHZpc3VhbG1lbnRlIG8gcHJvZ3Jlc3NvL2NhcnJlZ2FtZW50byBkZSB1bWEgdGFyZWZhLlxuICpcbiAqIEVzdGUgY29tcG9uZW50ZSBwb2RlIHNlciB1dGlsaXphZG8gbm8gKnVwbG9hZCogZGUgYXJxdWl2b3MsIHVtYSBhdHVhbGl6YcOnw6NvIG5vIHNpc3RlbWEgb3UgbyBwcm9jZXNzYW1lbnRvIGRlIHVtYSBpbWFnZW0uXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBvUHJvZ3Jlc3NCYXNlQ29tcG9uZW50IHtcbiAgICBwcml2YXRlIF9pbmRldGVybWluYXRlPztcbiAgICBwcml2YXRlIF92YWx1ZT87XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIEhhYmlsaXRhIG8gbW9kbyBpbmRldGVybWluYWRvIG5hIGJhcnJhIGRlIHByb2dyZXNzbywgcXVlIG1vc3RyYSB1bWEgYW5pbWHDp8OjbyBmaXhhIHNlbSB1bSB2YWxvciBlc3RhYmVsZWNpZG8uXG4gICAgICpcbiAgICAgKiBFc3RhIG9ww6fDo28gcG9kZSBzZXIgdXRpbGl6YWRhIHF1YW5kbyBuw6NvIHNvdWJlciBxdWFudG8gdGVtcG8gbGV2YXLDoSBwYXJhIHF1ZSB1bSBwcm9jZXNzbyBzZWphIGNvbmNsdcOtZG8uXG4gICAgICpcbiAgICAgKiA+IENhc28gZXN0YSBwcm9wcmllZGFkZSBlIGEgYHAtdmFsdWVgIHNlamEgaGFiaWxpdGFkYSwgYSBwcm9wcmllZGFkZSBgcC12YWx1ZWAgc2Vyw6EgaWdub3JhZGEuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAgICovXG4gICAgc2V0IGluZGV0ZXJtaW5hdGUoaW5kZXRlcm1pbmF0ZTogYm9vbGVhbik7XG4gICAgZ2V0IGluZGV0ZXJtaW5hdGUoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogSW5mb3JtYcOnw6NvIGFkaWNpb25hbCBxdWUgYXBhcmVjZXLDoSBhYmFpeG8gZGEgYmFycmEgZGUgcHJvZ3Jlc3NvIGFvIGxhZG8gZGlyZWl0by5cbiAgICAgKi9cbiAgICBpbmZvPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiDDjWNvbmUgcXVlIGFwYXJlY2Vyw6EgYW8gbGFkbyBkbyB0ZXh0byBkYSBwcm9wcmllZGFkZSBgcC1pbmZvYC5cbiAgICAgKlxuICAgICAqIEV4ZW1wbG86IGBwby1pY29uLW9rYC5cbiAgICAgKi9cbiAgICBpbmZvSWNvbj86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogU3RhdHVzIGRhIGJhcnJhIGRlIHByb2dyZXNzbyBxdWUgaW5kaWNhcsOhIHZpc3VhbG1lbnRlIGFvIHVzdcOhcmlvXG4gICAgICogbyBhbmRhbWVudG8sIHBvciBleGVtcGxvLCBzZSBhIG1lc21hIGZvaSBjb25jbHXDrWRhIGNvbSBzdWNlc3NvLlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgYFBvUHJvZ3Jlc3NTdGF0dXMuRGVmYXVsdGBcbiAgICAgKi9cbiAgICBzdGF0dXM6IFBvUHJvZ3Jlc3NTdGF0dXM7XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIFRleHRvIHByaW5jaXBhbCBxdWUgYXBhcmVjZXLDoSBhYmFpeG8gZGEgYmFycmEgZGUgcHJvZ3Jlc3NvIG5vIGxhZG8gZXNxdWVyZG8uXG4gICAgICovXG4gICAgdGV4dD86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogVmFsb3IgcXVlIHJlcHJlc2VudGFyw6EgbyBwcm9ncmVzc28uXG4gICAgICpcbiAgICAgKiA+IE9zIHZhbG9yZXMgYWNlaXRvcyBzw6NvIG7Dum1lcm9zIGludGVpcm9zIGRlIGAwYCDDoCBgMTAwYC5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IGAwYFxuICAgICAqL1xuICAgIHNldCB2YWx1ZSh2YWx1ZTogbnVtYmVyKTtcbiAgICBnZXQgdmFsdWUoKTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBFdmVudG8gcXVlIHNlcsOhIGRpc3BhcmFkbyBhbyBjbGljYXIgbm8gw61jb25lIGRlIGNhbmNlbGFtZW50byAoXCJ4XCIpIG5hIHBhcnRlIGluZmVyaW9yIGRhIGJhcnJhIGRlIHByb2dyZXNzby5cbiAgICAgKlxuICAgICAqIEFvIHNlciBkaXNwYXJhZG8sIGEgZnVuw6fDo28gcmVjZWJlcsOhIGNvbW8gcGFyw6JtZXRybyBvIHN0YXR1cyBhdHVhbCBkYSBiYXJyYSBkZSBwcm9ncmVzc28uXG4gICAgICpcbiAgICAgKiA+IFNlIG5lbmh1bWEgZnVuw6fDo28gZm9yIHBhc3NhZGEgcGFyYSBvIGV2ZW50byBvdSBhIGJhcnJhIGRlIHByb2dyZXNzbyBlc3RpdmVyIGNvbSBvIHN0YXR1cyBgUG9Qcm9ncmVzc1N0YXR1cy5TdWNjZXNzYCxcbiAgICAgKiBvIMOtY29uZSBkZSBjYW5jZWxhbWVudG8gbsOjbyBzZXLDoSBleGliaWRvLlxuICAgICAqL1xuICAgIGNhbmNlbDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIEV2ZW50byBxdWUgc2Vyw6EgZGlzcGFyYWRvIGFvIGNsaWNhciBubyDDrWNvbmUgZGUgdGVudGFyIG5vdmFtZW50ZSBuYSBwYXJ0ZSBpbmZlcmlvciBkYSBiYXJyYSBkZSBwcm9ncmVzc28uXG4gICAgICpcbiAgICAgKiA+IG8gw61jb25lIHNlcsOhIGV4aWJpZG8gYXBlbmFzIHNlIGluZm9ybWFyIHVtYSBmdW7Dp8OjbyBuZXN0ZSBldmVudG8gZSBvIHN0YXR1cyBkYSBiYXJyYSBkZSBwcm9ncmVzc28gZm9yXG4gICAgICogYFBvUHJvZ3Jlc3NTdGF0dXMuRXJyb3JgLlxuICAgICAqL1xuICAgIHJldHJ5OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBwcml2YXRlIGlzUHJvZ3Jlc3NSYW5nZVZhbHVlO1xufVxuIl19