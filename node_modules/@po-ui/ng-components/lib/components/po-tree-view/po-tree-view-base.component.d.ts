import { EventEmitter } from '@angular/core';
import { PoTreeViewItem } from './po-tree-view-item/po-tree-view-item.interface';
/**
 * @description
 *
 * O componente fornece um modelo de visualização em árvore, possibilitando a visualização das informações de maneira
 * hierárquica, desta forma sendo possível utilizar até 4 níveis.
 *
 * Nele é possível navegar entre os itens através da tecla *tab*, permitindo expandir ou colapsar o item em foco
 * por meio das teclas *enter* e *space*.
 *
 * Além da navegação, o componente possibilita também a seleção dos itens do primeiro ao último nível, tanto de forma parcial como completa.
 *
 * O componente também possui eventos disparados ao marcar/desmarcar e expandir/colapsar os itens.
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoTreeViewBaseComponent {
    private _items;
    private _selectable;
    /**
     * Lista de itens do tipo `PoTreeViewItem` que será renderizada pelo componente.
     */
    set items(value: Array<PoTreeViewItem>);
    get items(): Array<PoTreeViewItem>;
    /**
     * @optional
     *
     * @description
     *
     * Habilita uma caixa de seleção para selecionar e/ou desmarcar um item da lista.
     *
     * @default false
     */
    set selectable(value: boolean);
    get selectable(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Ação que será disparada ao colapsar um item.
     *
     * > Como parâmetro o componente envia o item colapsado.
     */
    collapsed: EventEmitter<PoTreeViewItem>;
    /**
     * @optional
     *
     * @description
     *
     * Ação que será disparada ao expandir um item.
     *
     * > Como parâmetro o componente envia o item expandido.
     */
    expanded: EventEmitter<PoTreeViewItem>;
    /**
     * @optional
     *
     * @description
     *
     * Ação que será disparada ao selecionar um item.
     *
     * > Como parâmetro o componente envia o item selecionado.
     */
    selected: EventEmitter<PoTreeViewItem>;
    /**
     * @optional
     *
     * @description
     *
     * Ação que será disparada ao desfazer a seleção de um item.
     *
     * > Como parâmetro o componente envia o item que foi desmarcado.
     */
    unselected: EventEmitter<PoTreeViewItem>;
    protected emitExpanded(treeViewItem: PoTreeViewItem): void;
    protected emitSelected(treeViewItem: PoTreeViewItem): void;
    private addChildItemInParent;
    private addItem;
    private selectAllItems;
    private selectItemBySubItems;
    private everyItemSelected;
    private expandParentItem;
    private getItemsByMaxLevel;
    private getItemsWithParentSelected;
    private updateItemsOnSelect;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoTreeViewBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoTreeViewBaseComponent, never, never, { "items": "p-items"; "selectable": "p-selectable"; }, { "collapsed": "p-collapsed"; "expanded": "p-expanded"; "selected": "p-selected"; "unselected": "p-unselected"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdHJlZS12aWV3LWJhc2UuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBvLXRyZWUtdmlldy1iYXNlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBvVHJlZVZpZXdJdGVtIH0gZnJvbSAnLi9wby10cmVlLXZpZXctaXRlbS9wby10cmVlLXZpZXctaXRlbS5pbnRlcmZhY2UnO1xuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBPIGNvbXBvbmVudGUgZm9ybmVjZSB1bSBtb2RlbG8gZGUgdmlzdWFsaXphw6fDo28gZW0gw6Fydm9yZSwgcG9zc2liaWxpdGFuZG8gYSB2aXN1YWxpemHDp8OjbyBkYXMgaW5mb3JtYcOnw7VlcyBkZSBtYW5laXJhXG4gKiBoaWVyw6FycXVpY2EsIGRlc3RhIGZvcm1hIHNlbmRvIHBvc3PDrXZlbCB1dGlsaXphciBhdMOpIDQgbsOtdmVpcy5cbiAqXG4gKiBOZWxlIMOpIHBvc3PDrXZlbCBuYXZlZ2FyIGVudHJlIG9zIGl0ZW5zIGF0cmF2w6lzIGRhIHRlY2xhICp0YWIqLCBwZXJtaXRpbmRvIGV4cGFuZGlyIG91IGNvbGFwc2FyIG8gaXRlbSBlbSBmb2NvXG4gKiBwb3IgbWVpbyBkYXMgdGVjbGFzICplbnRlciogZSAqc3BhY2UqLlxuICpcbiAqIEFsw6ltIGRhIG5hdmVnYcOnw6NvLCBvIGNvbXBvbmVudGUgcG9zc2liaWxpdGEgdGFtYsOpbSBhIHNlbGXDp8OjbyBkb3MgaXRlbnMgZG8gcHJpbWVpcm8gYW8gw7psdGltbyBuw612ZWwsIHRhbnRvIGRlIGZvcm1hIHBhcmNpYWwgY29tbyBjb21wbGV0YS5cbiAqXG4gKiBPIGNvbXBvbmVudGUgdGFtYsOpbSBwb3NzdWkgZXZlbnRvcyBkaXNwYXJhZG9zIGFvIG1hcmNhci9kZXNtYXJjYXIgZSBleHBhbmRpci9jb2xhcHNhciBvcyBpdGVucy5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUG9UcmVlVmlld0Jhc2VDb21wb25lbnQge1xuICAgIHByaXZhdGUgX2l0ZW1zO1xuICAgIHByaXZhdGUgX3NlbGVjdGFibGU7XG4gICAgLyoqXG4gICAgICogTGlzdGEgZGUgaXRlbnMgZG8gdGlwbyBgUG9UcmVlVmlld0l0ZW1gIHF1ZSBzZXLDoSByZW5kZXJpemFkYSBwZWxvIGNvbXBvbmVudGUuXG4gICAgICovXG4gICAgc2V0IGl0ZW1zKHZhbHVlOiBBcnJheTxQb1RyZWVWaWV3SXRlbT4pO1xuICAgIGdldCBpdGVtcygpOiBBcnJheTxQb1RyZWVWaWV3SXRlbT47XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIEhhYmlsaXRhIHVtYSBjYWl4YSBkZSBzZWxlw6fDo28gcGFyYSBzZWxlY2lvbmFyIGUvb3UgZGVzbWFyY2FyIHVtIGl0ZW0gZGEgbGlzdGEuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIHNldCBzZWxlY3RhYmxlKHZhbHVlOiBib29sZWFuKTtcbiAgICBnZXQgc2VsZWN0YWJsZSgpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBBw6fDo28gcXVlIHNlcsOhIGRpc3BhcmFkYSBhbyBjb2xhcHNhciB1bSBpdGVtLlxuICAgICAqXG4gICAgICogPiBDb21vIHBhcsOibWV0cm8gbyBjb21wb25lbnRlIGVudmlhIG8gaXRlbSBjb2xhcHNhZG8uXG4gICAgICovXG4gICAgY29sbGFwc2VkOiBFdmVudEVtaXR0ZXI8UG9UcmVlVmlld0l0ZW0+O1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBBw6fDo28gcXVlIHNlcsOhIGRpc3BhcmFkYSBhbyBleHBhbmRpciB1bSBpdGVtLlxuICAgICAqXG4gICAgICogPiBDb21vIHBhcsOibWV0cm8gbyBjb21wb25lbnRlIGVudmlhIG8gaXRlbSBleHBhbmRpZG8uXG4gICAgICovXG4gICAgZXhwYW5kZWQ6IEV2ZW50RW1pdHRlcjxQb1RyZWVWaWV3SXRlbT47XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIEHDp8OjbyBxdWUgc2Vyw6EgZGlzcGFyYWRhIGFvIHNlbGVjaW9uYXIgdW0gaXRlbS5cbiAgICAgKlxuICAgICAqID4gQ29tbyBwYXLDom1ldHJvIG8gY29tcG9uZW50ZSBlbnZpYSBvIGl0ZW0gc2VsZWNpb25hZG8uXG4gICAgICovXG4gICAgc2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjxQb1RyZWVWaWV3SXRlbT47XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIEHDp8OjbyBxdWUgc2Vyw6EgZGlzcGFyYWRhIGFvIGRlc2ZhemVyIGEgc2VsZcOnw6NvIGRlIHVtIGl0ZW0uXG4gICAgICpcbiAgICAgKiA+IENvbW8gcGFyw6JtZXRybyBvIGNvbXBvbmVudGUgZW52aWEgbyBpdGVtIHF1ZSBmb2kgZGVzbWFyY2Fkby5cbiAgICAgKi9cbiAgICB1bnNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8UG9UcmVlVmlld0l0ZW0+O1xuICAgIHByb3RlY3RlZCBlbWl0RXhwYW5kZWQodHJlZVZpZXdJdGVtOiBQb1RyZWVWaWV3SXRlbSk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGVtaXRTZWxlY3RlZCh0cmVlVmlld0l0ZW06IFBvVHJlZVZpZXdJdGVtKTogdm9pZDtcbiAgICBwcml2YXRlIGFkZENoaWxkSXRlbUluUGFyZW50O1xuICAgIHByaXZhdGUgYWRkSXRlbTtcbiAgICBwcml2YXRlIHNlbGVjdEFsbEl0ZW1zO1xuICAgIHByaXZhdGUgc2VsZWN0SXRlbUJ5U3ViSXRlbXM7XG4gICAgcHJpdmF0ZSBldmVyeUl0ZW1TZWxlY3RlZDtcbiAgICBwcml2YXRlIGV4cGFuZFBhcmVudEl0ZW07XG4gICAgcHJpdmF0ZSBnZXRJdGVtc0J5TWF4TGV2ZWw7XG4gICAgcHJpdmF0ZSBnZXRJdGVtc1dpdGhQYXJlbnRTZWxlY3RlZDtcbiAgICBwcml2YXRlIHVwZGF0ZUl0ZW1zT25TZWxlY3Q7XG59XG4iXX0=