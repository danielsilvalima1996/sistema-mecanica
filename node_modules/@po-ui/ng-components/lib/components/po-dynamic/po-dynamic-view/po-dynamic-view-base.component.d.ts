import { CurrencyPipe, DatePipe, DecimalPipe, TitleCasePipe } from '@angular/common';
import { PoTimePipe } from '../../../pipes/po-time/po-time.pipe';
import { PoDynamicViewField } from './po-dynamic-view-field.interface';
import { PoDynamicViewService } from './po-dynamic-view.service';
/**
 *
 * @description
 *
 * Componente para listar dados dinamicamente a partir de uma lista de objetos.
 *
 * > Por padrão esse componente cria `po-info` para exibição, é possível criar `po-tag` passando a propriedade { tag: true }.
 *
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoDynamicViewBaseComponent {
    private currencyPipe;
    private datePipe;
    private decimalPipe;
    private timePipe;
    private titleCasePipe;
    protected dynamicViewService: PoDynamicViewService;
    private _fields;
    private _showAllValue;
    private _value;
    visibleFields: any[];
    /**
     * @optional
     *
     * @description
     *
     * Lista de objetos que implementam a interface `PoDynamicView`.
     *
     * > Ex: `[ { property: 'age' } ]`
     *
     * Regras de tipagem e formatação dos valores exibidos:
     *
     * - Caso o *type* informado seja *currency* e não seja informado o *format* o mesmo recebe "'BRL', 'symbol', '1.2-2'"
     * como formato padrão.
     * - Caso o *type* informado seja *date* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy' como formato padrão.
     * - Caso o *type* informado seja *dateTime* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy HH:mm:ss' como formato padrão.
     * - Caso o *type* informado seja *number* e não seja informado o *format* o mesmo não será formatado.
     * - Caso o *type* informado seja *time* e não seja informado o *format* o mesmo recebe 'HH:mm:ss.ffffff' como formato padrão.
     *
     * > As propriedades informadas serão exibidas mesmo não contendo valor de referência no objeto da propriedade `p-value`.
     *
     * @default `[]`
     */
    set fields(fields: Array<PoDynamicViewField>);
    get fields(): Array<PoDynamicViewField>;
    /**
     * @optional
     *
     * @description
     *
     * Indica se exibirá todas as informações contidas dentro do objeto informado na propriedade `p-value`.
     *
     * @default `false`
     */
    set showAllValue(value: boolean);
    get showAllValue(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Possibilita executar uma função quando o componente é inicializado.
     *
     * A propriedade aceita os seguintes tipos:
     * - **String**: Endpoint usado pelo componente para requisição via `POST`.
     * - **Function**: Método que será executado na inicialização do componente.
     *
     * Para os dois tipos de utilização da propriedade espera-se o seguinte retorno:
     *
     * ```
     * {
     *   value: {
     *     cnpj: '**************', // altera valor do campo
     *     updated: (new Date()).toString() // atribui valor ao campo novo
     *   },
     *   fields: [
     *     { property: 'cnpj', tag: true, inverse: true }, // atribui novas propriedades ao field
     *     { property: 'updated', tag: true } // inclui campo novo
     *   ]
     * }
     * ```
     * > **value**: any = atribui novo valor do model.
     *
     * > **fields**: `Array<PoDynamicViewField>` = Lista de campos que deseja alterar as propriedades,
     * caso enviar um campo a mais será criado um novo campo.
     *
     * - Para esconder/remover campos precisa informar no field a propriedade `visible = false`.
     *
     */
    load: string | Function;
    /**
     * @description
     *
     * Objeto que será utilizado para exibir as informações dinâmicas, o valor será recuperado através do atributo *property*
     * dos objetos contidos na propridade `p-fields`.
     *
     * > Ex: `{ age: '35' }`
     */
    set value(value: object);
    get value(): object;
    constructor(currencyPipe: CurrencyPipe, datePipe: DatePipe, decimalPipe: DecimalPipe, timePipe: PoTimePipe, titleCasePipe: TitleCasePipe, dynamicViewService: PoDynamicViewService);
    protected getConfiguredFields(): any[];
    protected getMergedFields(): any[];
    protected getValueFields(): {
        tag?: boolean;
        color?: string;
        icon?: string;
        inverse?: boolean;
        format?: string;
        order?: number;
        key?: boolean;
        property: string;
        label: string;
        gridColumns?: number;
        gridSmColumns?: number;
        gridMdColumns?: number;
        gridLgColumns?: number;
        gridXlColumns?: number;
        visible?: boolean;
        divider?: string;
        type?: string;
        value: any;
        cssClass: string;
    }[];
    private createField;
    private transformValue;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoDynamicViewBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoDynamicViewBaseComponent, never, never, { "fields": "p-fields"; "showAllValue": "p-show-all-value"; "value": "p-value"; "load": "p-load"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZHluYW1pYy12aWV3LWJhc2UuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBvLWR5bmFtaWMtdmlldy1iYXNlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ3VycmVuY3lQaXBlLCBEYXRlUGlwZSwgRGVjaW1hbFBpcGUsIFRpdGxlQ2FzZVBpcGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgUG9UaW1lUGlwZSB9IGZyb20gJy4uLy4uLy4uL3BpcGVzL3BvLXRpbWUvcG8tdGltZS5waXBlJztcbmltcG9ydCB7IFBvRHluYW1pY1ZpZXdGaWVsZCB9IGZyb20gJy4vcG8tZHluYW1pYy12aWV3LWZpZWxkLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb0R5bmFtaWNWaWV3U2VydmljZSB9IGZyb20gJy4vcG8tZHluYW1pYy12aWV3LnNlcnZpY2UnO1xuLyoqXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogQ29tcG9uZW50ZSBwYXJhIGxpc3RhciBkYWRvcyBkaW5hbWljYW1lbnRlIGEgcGFydGlyIGRlIHVtYSBsaXN0YSBkZSBvYmpldG9zLlxuICpcbiAqID4gUG9yIHBhZHLDo28gZXNzZSBjb21wb25lbnRlIGNyaWEgYHBvLWluZm9gIHBhcmEgZXhpYmnDp8Ojbywgw6kgcG9zc8OtdmVsIGNyaWFyIGBwby10YWdgIHBhc3NhbmRvIGEgcHJvcHJpZWRhZGUgeyB0YWc6IHRydWUgfS5cbiAqXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBvRHluYW1pY1ZpZXdCYXNlQ29tcG9uZW50IHtcbiAgICBwcml2YXRlIGN1cnJlbmN5UGlwZTtcbiAgICBwcml2YXRlIGRhdGVQaXBlO1xuICAgIHByaXZhdGUgZGVjaW1hbFBpcGU7XG4gICAgcHJpdmF0ZSB0aW1lUGlwZTtcbiAgICBwcml2YXRlIHRpdGxlQ2FzZVBpcGU7XG4gICAgcHJvdGVjdGVkIGR5bmFtaWNWaWV3U2VydmljZTogUG9EeW5hbWljVmlld1NlcnZpY2U7XG4gICAgcHJpdmF0ZSBfZmllbGRzO1xuICAgIHByaXZhdGUgX3Nob3dBbGxWYWx1ZTtcbiAgICBwcml2YXRlIF92YWx1ZTtcbiAgICB2aXNpYmxlRmllbGRzOiBhbnlbXTtcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogTGlzdGEgZGUgb2JqZXRvcyBxdWUgaW1wbGVtZW50YW0gYSBpbnRlcmZhY2UgYFBvRHluYW1pY1ZpZXdgLlxuICAgICAqXG4gICAgICogPiBFeDogYFsgeyBwcm9wZXJ0eTogJ2FnZScgfSBdYFxuICAgICAqXG4gICAgICogUmVncmFzIGRlIHRpcGFnZW0gZSBmb3JtYXRhw6fDo28gZG9zIHZhbG9yZXMgZXhpYmlkb3M6XG4gICAgICpcbiAgICAgKiAtIENhc28gbyAqdHlwZSogaW5mb3JtYWRvIHNlamEgKmN1cnJlbmN5KiBlIG7Do28gc2VqYSBpbmZvcm1hZG8gbyAqZm9ybWF0KiBvIG1lc21vIHJlY2ViZSBcIidCUkwnLCAnc3ltYm9sJywgJzEuMi0yJ1wiXG4gICAgICogY29tbyBmb3JtYXRvIHBhZHLDo28uXG4gICAgICogLSBDYXNvIG8gKnR5cGUqIGluZm9ybWFkbyBzZWphICpkYXRlKiBlIG7Do28gc2VqYSBpbmZvcm1hZG8gbyAqZm9ybWF0KiBvIG1lc21vIHJlY2ViZSAnZGQvTU0veXl5eScgY29tbyBmb3JtYXRvIHBhZHLDo28uXG4gICAgICogLSBDYXNvIG8gKnR5cGUqIGluZm9ybWFkbyBzZWphICpkYXRlVGltZSogZSBuw6NvIHNlamEgaW5mb3JtYWRvIG8gKmZvcm1hdCogbyBtZXNtbyByZWNlYmUgJ2RkL01NL3l5eXkgSEg6bW06c3MnIGNvbW8gZm9ybWF0byBwYWRyw6NvLlxuICAgICAqIC0gQ2FzbyBvICp0eXBlKiBpbmZvcm1hZG8gc2VqYSAqbnVtYmVyKiBlIG7Do28gc2VqYSBpbmZvcm1hZG8gbyAqZm9ybWF0KiBvIG1lc21vIG7Do28gc2Vyw6EgZm9ybWF0YWRvLlxuICAgICAqIC0gQ2FzbyBvICp0eXBlKiBpbmZvcm1hZG8gc2VqYSAqdGltZSogZSBuw6NvIHNlamEgaW5mb3JtYWRvIG8gKmZvcm1hdCogbyBtZXNtbyByZWNlYmUgJ0hIOm1tOnNzLmZmZmZmZicgY29tbyBmb3JtYXRvIHBhZHLDo28uXG4gICAgICpcbiAgICAgKiA+IEFzIHByb3ByaWVkYWRlcyBpbmZvcm1hZGFzIHNlcsOjbyBleGliaWRhcyBtZXNtbyBuw6NvIGNvbnRlbmRvIHZhbG9yIGRlIHJlZmVyw6puY2lhIG5vIG9iamV0byBkYSBwcm9wcmllZGFkZSBgcC12YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBgW11gXG4gICAgICovXG4gICAgc2V0IGZpZWxkcyhmaWVsZHM6IEFycmF5PFBvRHluYW1pY1ZpZXdGaWVsZD4pO1xuICAgIGdldCBmaWVsZHMoKTogQXJyYXk8UG9EeW5hbWljVmlld0ZpZWxkPjtcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogSW5kaWNhIHNlIGV4aWJpcsOhIHRvZGFzIGFzIGluZm9ybWHDp8O1ZXMgY29udGlkYXMgZGVudHJvIGRvIG9iamV0byBpbmZvcm1hZG8gbmEgcHJvcHJpZWRhZGUgYHAtdmFsdWVgLlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgICAqL1xuICAgIHNldCBzaG93QWxsVmFsdWUodmFsdWU6IGJvb2xlYW4pO1xuICAgIGdldCBzaG93QWxsVmFsdWUoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogUG9zc2liaWxpdGEgZXhlY3V0YXIgdW1hIGZ1bsOnw6NvIHF1YW5kbyBvIGNvbXBvbmVudGUgw6kgaW5pY2lhbGl6YWRvLlxuICAgICAqXG4gICAgICogQSBwcm9wcmllZGFkZSBhY2VpdGEgb3Mgc2VndWludGVzIHRpcG9zOlxuICAgICAqIC0gKipTdHJpbmcqKjogRW5kcG9pbnQgdXNhZG8gcGVsbyBjb21wb25lbnRlIHBhcmEgcmVxdWlzacOnw6NvIHZpYSBgUE9TVGAuXG4gICAgICogLSAqKkZ1bmN0aW9uKio6IE3DqXRvZG8gcXVlIHNlcsOhIGV4ZWN1dGFkbyBuYSBpbmljaWFsaXphw6fDo28gZG8gY29tcG9uZW50ZS5cbiAgICAgKlxuICAgICAqIFBhcmEgb3MgZG9pcyB0aXBvcyBkZSB1dGlsaXphw6fDo28gZGEgcHJvcHJpZWRhZGUgZXNwZXJhLXNlIG8gc2VndWludGUgcmV0b3JubzpcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIHtcbiAgICAgKiAgIHZhbHVlOiB7XG4gICAgICogICAgIGNucGo6ICcqKioqKioqKioqKioqKicsIC8vIGFsdGVyYSB2YWxvciBkbyBjYW1wb1xuICAgICAqICAgICB1cGRhdGVkOiAobmV3IERhdGUoKSkudG9TdHJpbmcoKSAvLyBhdHJpYnVpIHZhbG9yIGFvIGNhbXBvIG5vdm9cbiAgICAgKiAgIH0sXG4gICAgICogICBmaWVsZHM6IFtcbiAgICAgKiAgICAgeyBwcm9wZXJ0eTogJ2NucGonLCB0YWc6IHRydWUsIGludmVyc2U6IHRydWUgfSwgLy8gYXRyaWJ1aSBub3ZhcyBwcm9wcmllZGFkZXMgYW8gZmllbGRcbiAgICAgKiAgICAgeyBwcm9wZXJ0eTogJ3VwZGF0ZWQnLCB0YWc6IHRydWUgfSAvLyBpbmNsdWkgY2FtcG8gbm92b1xuICAgICAqICAgXVxuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKiA+ICoqdmFsdWUqKjogYW55ID0gYXRyaWJ1aSBub3ZvIHZhbG9yIGRvIG1vZGVsLlxuICAgICAqXG4gICAgICogPiAqKmZpZWxkcyoqOiBgQXJyYXk8UG9EeW5hbWljVmlld0ZpZWxkPmAgPSBMaXN0YSBkZSBjYW1wb3MgcXVlIGRlc2VqYSBhbHRlcmFyIGFzIHByb3ByaWVkYWRlcyxcbiAgICAgKiBjYXNvIGVudmlhciB1bSBjYW1wbyBhIG1haXMgc2Vyw6EgY3JpYWRvIHVtIG5vdm8gY2FtcG8uXG4gICAgICpcbiAgICAgKiAtIFBhcmEgZXNjb25kZXIvcmVtb3ZlciBjYW1wb3MgcHJlY2lzYSBpbmZvcm1hciBubyBmaWVsZCBhIHByb3ByaWVkYWRlIGB2aXNpYmxlID0gZmFsc2VgLlxuICAgICAqXG4gICAgICovXG4gICAgbG9hZDogc3RyaW5nIHwgRnVuY3Rpb247XG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBPYmpldG8gcXVlIHNlcsOhIHV0aWxpemFkbyBwYXJhIGV4aWJpciBhcyBpbmZvcm1hw6fDtWVzIGRpbsOibWljYXMsIG8gdmFsb3Igc2Vyw6EgcmVjdXBlcmFkbyBhdHJhdsOpcyBkbyBhdHJpYnV0byAqcHJvcGVydHkqXG4gICAgICogZG9zIG9iamV0b3MgY29udGlkb3MgbmEgcHJvcHJpZGFkZSBgcC1maWVsZHNgLlxuICAgICAqXG4gICAgICogPiBFeDogYHsgYWdlOiAnMzUnIH1gXG4gICAgICovXG4gICAgc2V0IHZhbHVlKHZhbHVlOiBvYmplY3QpO1xuICAgIGdldCB2YWx1ZSgpOiBvYmplY3Q7XG4gICAgY29uc3RydWN0b3IoY3VycmVuY3lQaXBlOiBDdXJyZW5jeVBpcGUsIGRhdGVQaXBlOiBEYXRlUGlwZSwgZGVjaW1hbFBpcGU6IERlY2ltYWxQaXBlLCB0aW1lUGlwZTogUG9UaW1lUGlwZSwgdGl0bGVDYXNlUGlwZTogVGl0bGVDYXNlUGlwZSwgZHluYW1pY1ZpZXdTZXJ2aWNlOiBQb0R5bmFtaWNWaWV3U2VydmljZSk7XG4gICAgcHJvdGVjdGVkIGdldENvbmZpZ3VyZWRGaWVsZHMoKTogYW55W107XG4gICAgcHJvdGVjdGVkIGdldE1lcmdlZEZpZWxkcygpOiBhbnlbXTtcbiAgICBwcm90ZWN0ZWQgZ2V0VmFsdWVGaWVsZHMoKToge1xuICAgICAgICB0YWc/OiBib29sZWFuO1xuICAgICAgICBjb2xvcj86IHN0cmluZztcbiAgICAgICAgaWNvbj86IHN0cmluZztcbiAgICAgICAgaW52ZXJzZT86IGJvb2xlYW47XG4gICAgICAgIGZvcm1hdD86IHN0cmluZztcbiAgICAgICAgb3JkZXI/OiBudW1iZXI7XG4gICAgICAgIGtleT86IGJvb2xlYW47XG4gICAgICAgIHByb3BlcnR5OiBzdHJpbmc7XG4gICAgICAgIGxhYmVsOiBzdHJpbmc7XG4gICAgICAgIGdyaWRDb2x1bW5zPzogbnVtYmVyO1xuICAgICAgICBncmlkU21Db2x1bW5zPzogbnVtYmVyO1xuICAgICAgICBncmlkTWRDb2x1bW5zPzogbnVtYmVyO1xuICAgICAgICBncmlkTGdDb2x1bW5zPzogbnVtYmVyO1xuICAgICAgICBncmlkWGxDb2x1bW5zPzogbnVtYmVyO1xuICAgICAgICB2aXNpYmxlPzogYm9vbGVhbjtcbiAgICAgICAgZGl2aWRlcj86IHN0cmluZztcbiAgICAgICAgdHlwZT86IHN0cmluZztcbiAgICAgICAgdmFsdWU6IGFueTtcbiAgICAgICAgY3NzQ2xhc3M6IHN0cmluZztcbiAgICB9W107XG4gICAgcHJpdmF0ZSBjcmVhdGVGaWVsZDtcbiAgICBwcml2YXRlIHRyYW5zZm9ybVZhbHVlO1xufVxuIl19