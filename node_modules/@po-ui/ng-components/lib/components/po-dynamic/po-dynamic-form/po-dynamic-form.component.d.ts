import { ChangeDetectorRef, OnDestroy, OnInit } from '@angular/core';
import { NgForm } from '@angular/forms';
import { PoDynamicFormBaseComponent } from './po-dynamic-form-base.component';
import { PoDynamicFormField } from './po-dynamic-form-field.interface';
import { PoDynamicFormLoadService } from './po-dynamic-form-load/po-dynamic-form-load.service';
import { PoDynamicFormValidationService } from './po-dynamic-form-validation/po-dynamic-form-validation.service';
/**
 * @docsExtends PoDynamicFormBaseComponent
 *
 * @example
 *
 * <example name="po-dynamic-form-basic" title="PO Dynamic Form Basic">
 *  <file name="sample-po-dynamic-form-basic/sample-po-dynamic-form-basic.component.html"> </file>
 *  <file name="sample-po-dynamic-form-basic/sample-po-dynamic-form-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-dynamic-form-register" title="PO Dynamic Form - Register">
 *  <file name="sample-po-dynamic-form-register/sample-po-dynamic-form-register.component.html"> </file>
 *  <file name="sample-po-dynamic-form-register/sample-po-dynamic-form-register.component.ts"> </file>
 *  <file name="sample-po-dynamic-form-register/sample-po-dynamic-form-register.service.ts"> </file>
 * </example>
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoDynamicFormComponent extends PoDynamicFormBaseComponent implements OnInit, OnDestroy {
    private changes;
    private loadService;
    private validationService;
    private _form;
    disabledForm: boolean;
    private onLoadSubscription;
    private sendFormSubscription;
    set form(value: NgForm);
    get form(): NgForm;
    fieldsComponent: {
        focus: (property: string) => void;
        updatePreviousValue: () => void;
    };
    constructor(changes: ChangeDetectorRef, loadService: PoDynamicFormLoadService, validationService: PoDynamicFormValidationService);
    ngOnDestroy(): void;
    ngOnInit(): void;
    /**
     * Função que atribui foco ao campo desejado.
     *
     * Para utilizá-la é necessário capturar a instância do `dynamic form`, como por exemplo:
     *
     * ``` html
     * <po-dynamic-form #dynamicForm [p-fields]="fields"></po-dynamic-form>
     * ```
     *
     * ``` javascript
     * import { PoDynamicFormComponent, PoDynamicFormField } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild('dynamicForm', { static: true }) dynamicForm: PoDynamicFormComponent;
     *
     * fields: Array<PoDynamicFormField> = [
     *   { property: 'fieldOne' },
     *   { property: 'fieldTwo' }
     * ];
     *
     * fieldFocus() {
     *   this.dynamicForm.focus('fieldTwo');
     * }
     * ```
     *
     * @param {string} property Nome da propriedade atribuída ao `PoDynamicFormField.property`.
     */
    focus(property: string): void;
    validateForm(field: PoDynamicFormField): void;
    private applyFormUpdatesOnLoad;
    private applyFormValidation;
    private disableForm;
    private emitForm;
    private loadDataOnInitialize;
    private removeListeners;
    private setFocusOnFieldByProperty;
    private updateModelOnLoad;
    private updateModelWithValidation;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoDynamicFormComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PoDynamicFormComponent, "po-dynamic-form", never, {}, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZHluYW1pYy1mb3JtLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJwby1keW5hbWljLWZvcm0uY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgT25EZXN0cm95LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nRm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFBvRHluYW1pY0Zvcm1CYXNlQ29tcG9uZW50IH0gZnJvbSAnLi9wby1keW5hbWljLWZvcm0tYmFzZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgUG9EeW5hbWljRm9ybUZpZWxkIH0gZnJvbSAnLi9wby1keW5hbWljLWZvcm0tZmllbGQuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvRHluYW1pY0Zvcm1Mb2FkU2VydmljZSB9IGZyb20gJy4vcG8tZHluYW1pYy1mb3JtLWxvYWQvcG8tZHluYW1pYy1mb3JtLWxvYWQuc2VydmljZSc7XG5pbXBvcnQgeyBQb0R5bmFtaWNGb3JtVmFsaWRhdGlvblNlcnZpY2UgfSBmcm9tICcuL3BvLWR5bmFtaWMtZm9ybS12YWxpZGF0aW9uL3BvLWR5bmFtaWMtZm9ybS12YWxpZGF0aW9uLnNlcnZpY2UnO1xuLyoqXG4gKiBAZG9jc0V4dGVuZHMgUG9EeW5hbWljRm9ybUJhc2VDb21wb25lbnRcbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJwby1keW5hbWljLWZvcm0tYmFzaWNcIiB0aXRsZT1cIlBPIER5bmFtaWMgRm9ybSBCYXNpY1wiPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tZHluYW1pYy1mb3JtLWJhc2ljL3NhbXBsZS1wby1keW5hbWljLWZvcm0tYmFzaWMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tZHluYW1pYy1mb3JtLWJhc2ljL3NhbXBsZS1wby1keW5hbWljLWZvcm0tYmFzaWMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tZHluYW1pYy1mb3JtLXJlZ2lzdGVyXCIgdGl0bGU9XCJQTyBEeW5hbWljIEZvcm0gLSBSZWdpc3RlclwiPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tZHluYW1pYy1mb3JtLXJlZ2lzdGVyL3NhbXBsZS1wby1keW5hbWljLWZvcm0tcmVnaXN0ZXIuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tZHluYW1pYy1mb3JtLXJlZ2lzdGVyL3NhbXBsZS1wby1keW5hbWljLWZvcm0tcmVnaXN0ZXIuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWR5bmFtaWMtZm9ybS1yZWdpc3Rlci9zYW1wbGUtcG8tZHluYW1pYy1mb3JtLXJlZ2lzdGVyLnNlcnZpY2UudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQb0R5bmFtaWNGb3JtQ29tcG9uZW50IGV4dGVuZHMgUG9EeW5hbWljRm9ybUJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBjaGFuZ2VzO1xuICAgIHByaXZhdGUgbG9hZFNlcnZpY2U7XG4gICAgcHJpdmF0ZSB2YWxpZGF0aW9uU2VydmljZTtcbiAgICBwcml2YXRlIF9mb3JtO1xuICAgIGRpc2FibGVkRm9ybTogYm9vbGVhbjtcbiAgICBwcml2YXRlIG9uTG9hZFN1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIHNlbmRGb3JtU3Vic2NyaXB0aW9uO1xuICAgIHNldCBmb3JtKHZhbHVlOiBOZ0Zvcm0pO1xuICAgIGdldCBmb3JtKCk6IE5nRm9ybTtcbiAgICBmaWVsZHNDb21wb25lbnQ6IHtcbiAgICAgICAgZm9jdXM6IChwcm9wZXJ0eTogc3RyaW5nKSA9PiB2b2lkO1xuICAgICAgICB1cGRhdGVQcmV2aW91c1ZhbHVlOiAoKSA9PiB2b2lkO1xuICAgIH07XG4gICAgY29uc3RydWN0b3IoY2hhbmdlczogQ2hhbmdlRGV0ZWN0b3JSZWYsIGxvYWRTZXJ2aWNlOiBQb0R5bmFtaWNGb3JtTG9hZFNlcnZpY2UsIHZhbGlkYXRpb25TZXJ2aWNlOiBQb0R5bmFtaWNGb3JtVmFsaWRhdGlvblNlcnZpY2UpO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBGdW7Dp8OjbyBxdWUgYXRyaWJ1aSBmb2NvIGFvIGNhbXBvIGRlc2VqYWRvLlxuICAgICAqXG4gICAgICogUGFyYSB1dGlsaXrDoS1sYSDDqSBuZWNlc3PDoXJpbyBjYXB0dXJhciBhIGluc3TDom5jaWEgZG8gYGR5bmFtaWMgZm9ybWAsIGNvbW8gcG9yIGV4ZW1wbG86XG4gICAgICpcbiAgICAgKiBgYGAgaHRtbFxuICAgICAqIDxwby1keW5hbWljLWZvcm0gI2R5bmFtaWNGb3JtIFtwLWZpZWxkc109XCJmaWVsZHNcIj48L3BvLWR5bmFtaWMtZm9ybT5cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIGBgYCBqYXZhc2NyaXB0XG4gICAgICogaW1wb3J0IHsgUG9EeW5hbWljRm9ybUNvbXBvbmVudCwgUG9EeW5hbWljRm9ybUZpZWxkIH0gZnJvbSAnQHBvLXVpL25nLWNvbXBvbmVudHMnO1xuICAgICAqXG4gICAgICogLi4uXG4gICAgICpcbiAgICAgKiBAVmlld0NoaWxkKCdkeW5hbWljRm9ybScsIHsgc3RhdGljOiB0cnVlIH0pIGR5bmFtaWNGb3JtOiBQb0R5bmFtaWNGb3JtQ29tcG9uZW50O1xuICAgICAqXG4gICAgICogZmllbGRzOiBBcnJheTxQb0R5bmFtaWNGb3JtRmllbGQ+ID0gW1xuICAgICAqICAgeyBwcm9wZXJ0eTogJ2ZpZWxkT25lJyB9LFxuICAgICAqICAgeyBwcm9wZXJ0eTogJ2ZpZWxkVHdvJyB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIGZpZWxkRm9jdXMoKSB7XG4gICAgICogICB0aGlzLmR5bmFtaWNGb3JtLmZvY3VzKCdmaWVsZFR3bycpO1xuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBOb21lIGRhIHByb3ByaWVkYWRlIGF0cmlidcOtZGEgYW8gYFBvRHluYW1pY0Zvcm1GaWVsZC5wcm9wZXJ0eWAuXG4gICAgICovXG4gICAgZm9jdXMocHJvcGVydHk6IHN0cmluZyk6IHZvaWQ7XG4gICAgdmFsaWRhdGVGb3JtKGZpZWxkOiBQb0R5bmFtaWNGb3JtRmllbGQpOiB2b2lkO1xuICAgIHByaXZhdGUgYXBwbHlGb3JtVXBkYXRlc09uTG9hZDtcbiAgICBwcml2YXRlIGFwcGx5Rm9ybVZhbGlkYXRpb247XG4gICAgcHJpdmF0ZSBkaXNhYmxlRm9ybTtcbiAgICBwcml2YXRlIGVtaXRGb3JtO1xuICAgIHByaXZhdGUgbG9hZERhdGFPbkluaXRpYWxpemU7XG4gICAgcHJpdmF0ZSByZW1vdmVMaXN0ZW5lcnM7XG4gICAgcHJpdmF0ZSBzZXRGb2N1c09uRmllbGRCeVByb3BlcnR5O1xuICAgIHByaXZhdGUgdXBkYXRlTW9kZWxPbkxvYWQ7XG4gICAgcHJpdmF0ZSB1cGRhdGVNb2RlbFdpdGhWYWxpZGF0aW9uO1xufVxuIl19