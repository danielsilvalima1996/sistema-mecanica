import { PoLanguageService } from './../../../services/po-language/po-language.service';
import { PoBreadcrumb } from '../../po-breadcrumb/po-breadcrumb.interface';
import { PoDisclaimerGroup } from '../../po-disclaimer-group/po-disclaimer-group.interface';
import { PoPageDefaultBaseComponent } from '../po-page-default/po-page-default-base.component';
import { PoPageFilter } from './../po-page-filter.interface';
import { PoPageListLiterals } from './po-page-list-literals.interface';
import * as ɵngcc0 from '@angular/core';
export declare const poPageListLiteralsDefault: {
    en: PoPageListLiterals;
    es: PoPageListLiterals;
    pt: PoPageListLiterals;
    ru: PoPageListLiterals;
};
/**
 * @description
 *
 * O componente `po-page-list` é utilizado como o container principal para as telas de listagem de dados,
 * podendo ser apresentado como lista ou tabela.
 *
 * Este componente possibilita realizar filtro dos dados, no qual permite que seja atribuido uma função que será executada no momento
 * da filtragem. Este comportamento pode ser acionado tanto ao *click* do ícone [po-icon-search](/guides/icons)
 * quanto ao pressionar da tecla *ENTER* quando o foco estiver no campo de pesquisa.
 *
 * Para facilitar a manipulação e visualização dos filtros aplicados, é possível também utilizar o componente
 * [`po-disclaimer-group`](/documentation/po-disclaimer-group).
 */
export declare abstract class PoPageListBaseComponent extends PoPageDefaultBaseComponent {
    private _disclaimerGroup?;
    private _literals;
    protected language: string;
    protected resizeListener: () => void;
    /**
     * @optional
     *
     * @description
     *
     * Objeto que implementa as propriedades da interface `PoBreadcrumb`.
     */
    breadcrumb?: PoBreadcrumb;
    /**
     * @optional
     *
     * @description
     *
     * Objeto que implementa as propriedades da interface `PoDisclaimerGroup`.
     */
    set disclaimerGroup(value: PoDisclaimerGroup);
    get disclaimerGroup(): PoDisclaimerGroup;
    /**
     * @description
     *
     * Objeto que implementa as propriedades da interface `PoPageFilter`.
     */
    filter: PoPageFilter;
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-page-list`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoPageListLiterals = {
     *    otherActions: 'Mais ações'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoPageListLiterals = {
     *    otherActions: 'Ações da página'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-page-list
     *   [p-literals]="customLiterals">
     * </po-page-list>
     * ```
     *
     * > O valor padrão será traduzido de acordo com o idioma configurado no [`PoI18nService`](/documentation/po-i18n) ou *browser*.
     */
    set literals(value: PoPageListLiterals);
    get literals(): PoPageListLiterals;
    constructor(languageService: PoLanguageService);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoPageListBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoPageListBaseComponent, never, never, { "disclaimerGroup": "p-disclaimer-group"; "literals": "p-literals"; "breadcrumb": "p-breadcrumb"; "filter": "p-filter"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1saXN0LWJhc2UuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBvLXBhZ2UtbGlzdC1iYXNlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBvTGFuZ3VhZ2VTZXJ2aWNlIH0gZnJvbSAnLi8uLi8uLi8uLi9zZXJ2aWNlcy9wby1sYW5ndWFnZS9wby1sYW5ndWFnZS5zZXJ2aWNlJztcbmltcG9ydCB7IFBvQnJlYWRjcnVtYiB9IGZyb20gJy4uLy4uL3BvLWJyZWFkY3J1bWIvcG8tYnJlYWRjcnVtYi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9EaXNjbGFpbWVyR3JvdXAgfSBmcm9tICcuLi8uLi9wby1kaXNjbGFpbWVyLWdyb3VwL3BvLWRpc2NsYWltZXItZ3JvdXAuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvUGFnZURlZmF1bHRCYXNlQ29tcG9uZW50IH0gZnJvbSAnLi4vcG8tcGFnZS1kZWZhdWx0L3BvLXBhZ2UtZGVmYXVsdC1iYXNlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQb1BhZ2VGaWx0ZXIgfSBmcm9tICcuLy4uL3BvLXBhZ2UtZmlsdGVyLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb1BhZ2VMaXN0TGl0ZXJhbHMgfSBmcm9tICcuL3BvLXBhZ2UtbGlzdC1saXRlcmFscy5pbnRlcmZhY2UnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgcG9QYWdlTGlzdExpdGVyYWxzRGVmYXVsdDoge1xuICAgIGVuOiBQb1BhZ2VMaXN0TGl0ZXJhbHM7XG4gICAgZXM6IFBvUGFnZUxpc3RMaXRlcmFscztcbiAgICBwdDogUG9QYWdlTGlzdExpdGVyYWxzO1xuICAgIHJ1OiBQb1BhZ2VMaXN0TGl0ZXJhbHM7XG59O1xuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBPIGNvbXBvbmVudGUgYHBvLXBhZ2UtbGlzdGAgw6kgdXRpbGl6YWRvIGNvbW8gbyBjb250YWluZXIgcHJpbmNpcGFsIHBhcmEgYXMgdGVsYXMgZGUgbGlzdGFnZW0gZGUgZGFkb3MsXG4gKiBwb2RlbmRvIHNlciBhcHJlc2VudGFkbyBjb21vIGxpc3RhIG91IHRhYmVsYS5cbiAqXG4gKiBFc3RlIGNvbXBvbmVudGUgcG9zc2liaWxpdGEgcmVhbGl6YXIgZmlsdHJvIGRvcyBkYWRvcywgbm8gcXVhbCBwZXJtaXRlIHF1ZSBzZWphIGF0cmlidWlkbyB1bWEgZnVuw6fDo28gcXVlIHNlcsOhIGV4ZWN1dGFkYSBubyBtb21lbnRvXG4gKiBkYSBmaWx0cmFnZW0uIEVzdGUgY29tcG9ydGFtZW50byBwb2RlIHNlciBhY2lvbmFkbyB0YW50byBhbyAqY2xpY2sqIGRvIMOtY29uZSBbcG8taWNvbi1zZWFyY2hdKC9ndWlkZXMvaWNvbnMpXG4gKiBxdWFudG8gYW8gcHJlc3Npb25hciBkYSB0ZWNsYSAqRU5URVIqIHF1YW5kbyBvIGZvY28gZXN0aXZlciBubyBjYW1wbyBkZSBwZXNxdWlzYS5cbiAqXG4gKiBQYXJhIGZhY2lsaXRhciBhIG1hbmlwdWxhw6fDo28gZSB2aXN1YWxpemHDp8OjbyBkb3MgZmlsdHJvcyBhcGxpY2Fkb3MsIMOpIHBvc3PDrXZlbCB0YW1iw6ltIHV0aWxpemFyIG8gY29tcG9uZW50ZVxuICogW2Bwby1kaXNjbGFpbWVyLWdyb3VwYF0oL2RvY3VtZW50YXRpb24vcG8tZGlzY2xhaW1lci1ncm91cCkuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGFic3RyYWN0IGNsYXNzIFBvUGFnZUxpc3RCYXNlQ29tcG9uZW50IGV4dGVuZHMgUG9QYWdlRGVmYXVsdEJhc2VDb21wb25lbnQge1xuICAgIHByaXZhdGUgX2Rpc2NsYWltZXJHcm91cD87XG4gICAgcHJpdmF0ZSBfbGl0ZXJhbHM7XG4gICAgcHJvdGVjdGVkIGxhbmd1YWdlOiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIHJlc2l6ZUxpc3RlbmVyOiAoKSA9PiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBPYmpldG8gcXVlIGltcGxlbWVudGEgYXMgcHJvcHJpZWRhZGVzIGRhIGludGVyZmFjZSBgUG9CcmVhZGNydW1iYC5cbiAgICAgKi9cbiAgICBicmVhZGNydW1iPzogUG9CcmVhZGNydW1iO1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBPYmpldG8gcXVlIGltcGxlbWVudGEgYXMgcHJvcHJpZWRhZGVzIGRhIGludGVyZmFjZSBgUG9EaXNjbGFpbWVyR3JvdXBgLlxuICAgICAqL1xuICAgIHNldCBkaXNjbGFpbWVyR3JvdXAodmFsdWU6IFBvRGlzY2xhaW1lckdyb3VwKTtcbiAgICBnZXQgZGlzY2xhaW1lckdyb3VwKCk6IFBvRGlzY2xhaW1lckdyb3VwO1xuICAgIC8qKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogT2JqZXRvIHF1ZSBpbXBsZW1lbnRhIGFzIHByb3ByaWVkYWRlcyBkYSBpbnRlcmZhY2UgYFBvUGFnZUZpbHRlcmAuXG4gICAgICovXG4gICAgZmlsdGVyOiBQb1BhZ2VGaWx0ZXI7XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIE9iamV0byBjb20gYXMgbGl0ZXJhaXMgdXNhZGFzIG5vIGBwby1wYWdlLWxpc3RgLlxuICAgICAqXG4gICAgICogRXhpc3RlbSBkdWFzIG1hbmVpcmFzIGRlIGN1c3RvbWl6YXIgbyBjb21wb25lbnRlLCBwYXNzYW5kbyB1bSBvYmpldG8gY29tIHRvZGFzIGFzIGxpdGVyYWlzIGRpc3BvbsOtdmVpczpcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqICBjb25zdCBjdXN0b21MaXRlcmFsczogUG9QYWdlTGlzdExpdGVyYWxzID0ge1xuICAgICAqICAgIG90aGVyQWN0aW9uczogJ01haXMgYcOnw7VlcydcbiAgICAgKiAgfTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIE91IHBhc3NhbmRvIGFwZW5hcyBhcyBsaXRlcmFpcyBxdWUgZGVzZWphIGN1c3RvbWl6YXI6XG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiAgY29uc3QgY3VzdG9tTGl0ZXJhbHM6IFBvUGFnZUxpc3RMaXRlcmFscyA9IHtcbiAgICAgKiAgICBvdGhlckFjdGlvbnM6ICdBw6fDtWVzIGRhIHDDoWdpbmEnXG4gICAgICogIH07XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBFIHBhcmEgY2FycmVnYXIgYXMgbGl0ZXJhaXMgY3VzdG9taXphZGFzLCBiYXN0YSBhcGVuYXMgcGFzc2FyIG8gb2JqZXRvIHBhcmEgbyBjb21wb25lbnRlLlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogPHBvLXBhZ2UtbGlzdFxuICAgICAqICAgW3AtbGl0ZXJhbHNdPVwiY3VzdG9tTGl0ZXJhbHNcIj5cbiAgICAgKiA8L3BvLXBhZ2UtbGlzdD5cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqID4gTyB2YWxvciBwYWRyw6NvIHNlcsOhIHRyYWR1emlkbyBkZSBhY29yZG8gY29tIG8gaWRpb21hIGNvbmZpZ3VyYWRvIG5vIFtgUG9JMThuU2VydmljZWBdKC9kb2N1bWVudGF0aW9uL3BvLWkxOG4pIG91ICpicm93c2VyKi5cbiAgICAgKi9cbiAgICBzZXQgbGl0ZXJhbHModmFsdWU6IFBvUGFnZUxpc3RMaXRlcmFscyk7XG4gICAgZ2V0IGxpdGVyYWxzKCk6IFBvUGFnZUxpc3RMaXRlcmFscztcbiAgICBjb25zdHJ1Y3RvcihsYW5ndWFnZVNlcnZpY2U6IFBvTGFuZ3VhZ2VTZXJ2aWNlKTtcbn1cbiJdfQ==