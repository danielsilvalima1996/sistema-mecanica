import { ChangeDetectorRef, ElementRef, OnDestroy, Renderer2 } from '@angular/core';
import { PoGridRowActions } from './po-grid-row-actions.interface';
/**
 * @description
 *
 * Componente grid.
 *
 * Ações / atalhos:
 *
 * - ARROW-UP: Navega para celula superior / Na ultima linha adiciona uma linha em branco no grid;
 * - ARROW-DOWN: Navega para celula inferior;
 * - ARROW-RIGHT: Navega para celula direita;
 * - ARROW-LEFT: Navega para celula esquerda;
 * - TAB: Navega para próxima celula;
 * - SHIFT+TAB: Navega para celula anterior;
 * - CTRL+DEL: Remove linha;
 * - DEL/BACKSPACE: Limpa celula;
 * - ENTER: Edita linha com valor atual/Confirma edição da celula;
 * - DOUBLE-CLICK: Edita linha com valor atual;
 * - ESC: Cancela edição da celula / Cancela inserção de linhas em branco;
 * - A..Z/0..9: Inicia edição com valor em branco.
 *
 * @example
 *
 * <example name="po-grid-basic" title="PO Grid Basic">
 *  <file name="sample-po-grid-basic/sample-po-grid-basic.component.html"> </file>
 *  <file name="sample-po-grid-basic/sample-po-grid-basic.component.ts"> </file>
 * </example>
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoGridComponent implements OnDestroy {
    private changeDetectorRef;
    private elRef;
    lastCell: string;
    lastRow: number;
    lastColumn: number;
    currencyCell: string;
    currencyRow: number;
    currencyColumn: number;
    currencyObj: any;
    logger: boolean;
    width: string;
    widporeeze: number;
    widthActions: number;
    private resizeListener;
    private timeoutResize;
    tableElement: ElementRef;
    tableWrapper: ElementRef;
    private _columns;
    /**
     * @description
     *
     * Ações disparadas quando uma linha do grid é manipulada.
     */
    rowActions: PoGridRowActions;
    /**
     * Colunas exibidas no grid.
     */
    set columns(value: Array<any>);
    get columns(): Array<any>;
    /**
     * Lista com os dados que serão exibidos no grid.
     */
    data: Array<any>;
    constructor(changeDetectorRef: ChangeDetectorRef, elRef: ElementRef, renderer: Renderer2);
    ngOnDestroy(): void;
    private debounceResize;
    get freezeColumns(): any[];
    get actionColumns(): any[];
    cancelRow(event: any, row: any): void;
    removeRow(event: any, row: any): boolean;
    tableKeydown(event: any, direction: string): void;
    tableClick(event: any): void;
    saveRow(row: number): boolean;
    insertRow(): boolean;
    isEmptyRow(row: number): boolean;
    selectCell(row: number, col: number): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoGridComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PoGridComponent, "po-grid", never, { "rowActions": "p-row-actions"; "data": "p-data"; "columns": "p-columns"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZ3JpZC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicG8tZ3JpZC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEVsZW1lbnRSZWYsIE9uRGVzdHJveSwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQb0dyaWRSb3dBY3Rpb25zIH0gZnJvbSAnLi9wby1ncmlkLXJvdy1hY3Rpb25zLmludGVyZmFjZSc7XG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIENvbXBvbmVudGUgZ3JpZC5cbiAqXG4gKiBBw6fDtWVzIC8gYXRhbGhvczpcbiAqXG4gKiAtIEFSUk9XLVVQOiBOYXZlZ2EgcGFyYSBjZWx1bGEgc3VwZXJpb3IgLyBOYSB1bHRpbWEgbGluaGEgYWRpY2lvbmEgdW1hIGxpbmhhIGVtIGJyYW5jbyBubyBncmlkO1xuICogLSBBUlJPVy1ET1dOOiBOYXZlZ2EgcGFyYSBjZWx1bGEgaW5mZXJpb3I7XG4gKiAtIEFSUk9XLVJJR0hUOiBOYXZlZ2EgcGFyYSBjZWx1bGEgZGlyZWl0YTtcbiAqIC0gQVJST1ctTEVGVDogTmF2ZWdhIHBhcmEgY2VsdWxhIGVzcXVlcmRhO1xuICogLSBUQUI6IE5hdmVnYSBwYXJhIHByw7N4aW1hIGNlbHVsYTtcbiAqIC0gU0hJRlQrVEFCOiBOYXZlZ2EgcGFyYSBjZWx1bGEgYW50ZXJpb3I7XG4gKiAtIENUUkwrREVMOiBSZW1vdmUgbGluaGE7XG4gKiAtIERFTC9CQUNLU1BBQ0U6IExpbXBhIGNlbHVsYTtcbiAqIC0gRU5URVI6IEVkaXRhIGxpbmhhIGNvbSB2YWxvciBhdHVhbC9Db25maXJtYSBlZGnDp8OjbyBkYSBjZWx1bGE7XG4gKiAtIERPVUJMRS1DTElDSzogRWRpdGEgbGluaGEgY29tIHZhbG9yIGF0dWFsO1xuICogLSBFU0M6IENhbmNlbGEgZWRpw6fDo28gZGEgY2VsdWxhIC8gQ2FuY2VsYSBpbnNlcsOnw6NvIGRlIGxpbmhhcyBlbSBicmFuY287XG4gKiAtIEEuLlovMC4uOTogSW5pY2lhIGVkacOnw6NvIGNvbSB2YWxvciBlbSBicmFuY28uXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tZ3JpZC1iYXNpY1wiIHRpdGxlPVwiUE8gR3JpZCBCYXNpY1wiPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tZ3JpZC1iYXNpYy9zYW1wbGUtcG8tZ3JpZC1iYXNpYy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1ncmlkLWJhc2ljL3NhbXBsZS1wby1ncmlkLWJhc2ljLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBvR3JpZENvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvclJlZjtcbiAgICBwcml2YXRlIGVsUmVmO1xuICAgIGxhc3RDZWxsOiBzdHJpbmc7XG4gICAgbGFzdFJvdzogbnVtYmVyO1xuICAgIGxhc3RDb2x1bW46IG51bWJlcjtcbiAgICBjdXJyZW5jeUNlbGw6IHN0cmluZztcbiAgICBjdXJyZW5jeVJvdzogbnVtYmVyO1xuICAgIGN1cnJlbmN5Q29sdW1uOiBudW1iZXI7XG4gICAgY3VycmVuY3lPYmo6IGFueTtcbiAgICBsb2dnZXI6IGJvb2xlYW47XG4gICAgd2lkdGg6IHN0cmluZztcbiAgICB3aWRwb3JlZXplOiBudW1iZXI7XG4gICAgd2lkdGhBY3Rpb25zOiBudW1iZXI7XG4gICAgcHJpdmF0ZSByZXNpemVMaXN0ZW5lcjtcbiAgICBwcml2YXRlIHRpbWVvdXRSZXNpemU7XG4gICAgdGFibGVFbGVtZW50OiBFbGVtZW50UmVmO1xuICAgIHRhYmxlV3JhcHBlcjogRWxlbWVudFJlZjtcbiAgICBwcml2YXRlIF9jb2x1bW5zO1xuICAgIC8qKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogQcOnw7VlcyBkaXNwYXJhZGFzIHF1YW5kbyB1bWEgbGluaGEgZG8gZ3JpZCDDqSBtYW5pcHVsYWRhLlxuICAgICAqL1xuICAgIHJvd0FjdGlvbnM6IFBvR3JpZFJvd0FjdGlvbnM7XG4gICAgLyoqXG4gICAgICogQ29sdW5hcyBleGliaWRhcyBubyBncmlkLlxuICAgICAqL1xuICAgIHNldCBjb2x1bW5zKHZhbHVlOiBBcnJheTxhbnk+KTtcbiAgICBnZXQgY29sdW1ucygpOiBBcnJheTxhbnk+O1xuICAgIC8qKlxuICAgICAqIExpc3RhIGNvbSBvcyBkYWRvcyBxdWUgc2Vyw6NvIGV4aWJpZG9zIG5vIGdyaWQuXG4gICAgICovXG4gICAgZGF0YTogQXJyYXk8YW55PjtcbiAgICBjb25zdHJ1Y3RvcihjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsIGVsUmVmOiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIyKTtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHByaXZhdGUgZGVib3VuY2VSZXNpemU7XG4gICAgZ2V0IGZyZWV6ZUNvbHVtbnMoKTogYW55W107XG4gICAgZ2V0IGFjdGlvbkNvbHVtbnMoKTogYW55W107XG4gICAgY2FuY2VsUm93KGV2ZW50OiBhbnksIHJvdzogYW55KTogdm9pZDtcbiAgICByZW1vdmVSb3coZXZlbnQ6IGFueSwgcm93OiBhbnkpOiBib29sZWFuO1xuICAgIHRhYmxlS2V5ZG93bihldmVudDogYW55LCBkaXJlY3Rpb246IHN0cmluZyk6IHZvaWQ7XG4gICAgdGFibGVDbGljayhldmVudDogYW55KTogdm9pZDtcbiAgICBzYXZlUm93KHJvdzogbnVtYmVyKTogYm9vbGVhbjtcbiAgICBpbnNlcnRSb3coKTogYm9vbGVhbjtcbiAgICBpc0VtcHR5Um93KHJvdzogbnVtYmVyKTogYm9vbGVhbjtcbiAgICBzZWxlY3RDZWxsKHJvdzogbnVtYmVyLCBjb2w6IG51bWJlcik6IHZvaWQ7XG59XG4iXX0=