import { ChangeDetectorRef, ElementRef, AfterViewInit } from '@angular/core';
import { PoCheckboxBaseComponent } from './po-checkbox-base.component';
/**
 * @docsExtends PoCheckboxBaseComponent
 *
 * @example
 *
 * <example name="po-checkbox-basic" title="PO Checkbox Basic">
 *   <file name="sample-po-checkbox-basic/sample-po-checkbox-basic.component.html"> </file>
 *   <file name="sample-po-checkbox-basic/sample-po-checkbox-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-checkbox-labs" title="PO Checkbox Labs">
 *   <file name="sample-po-checkbox-labs/sample-po-checkbox-labs.component.html"> </file>
 *   <file name="sample-po-checkbox-labs/sample-po-checkbox-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-checkbox-acceptance-term" title="PO Checkbox - Acceptance Term">
 *   <file name="sample-po-checkbox-acceptance-term/sample-po-checkbox-acceptance-term.component.html"> </file>
 *   <file name="sample-po-checkbox-acceptance-term/sample-po-checkbox-acceptance-term.component.ts"> </file>
 * </example>
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoCheckboxComponent extends PoCheckboxBaseComponent implements AfterViewInit {
    private changeDetector;
    checkboxLabel: ElementRef;
    constructor(changeDetector: ChangeDetectorRef);
    /**
     * Função que atribui foco ao *checkbox*.
     *
     * Para utilizá-la é necessário capturar a referência do componente no DOM através do `ViewChild`, como por exemplo:
     *
     * ```
     * ...
     * import { ViewChild } from '@angular/core';
     * import { PoCheckboxComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoCheckboxComponent, { static: true }) checkbox: PoCheckboxComponent;
     *
     * focusCheckbox() {
     *   this.checkbox.focus();
     * }
     * ```
     */
    focus(): void;
    ngAfterViewInit(): void;
    onKeyDown(event: KeyboardEvent, value: boolean): void;
    protected changeModelValue(value: boolean | null): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoCheckboxComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PoCheckboxComponent, "po-checkbox", never, {}, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hlY2tib3guY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBvLWNoZWNrYm94LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRWxlbWVudFJlZiwgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUG9DaGVja2JveEJhc2VDb21wb25lbnQgfSBmcm9tICcuL3BvLWNoZWNrYm94LWJhc2UuY29tcG9uZW50Jztcbi8qKlxuICogQGRvY3NFeHRlbmRzIFBvQ2hlY2tib3hCYXNlQ29tcG9uZW50XG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tY2hlY2tib3gtYmFzaWNcIiB0aXRsZT1cIlBPIENoZWNrYm94IEJhc2ljXCI+XG4gKiAgIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tY2hlY2tib3gtYmFzaWMvc2FtcGxlLXBvLWNoZWNrYm94LWJhc2ljLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1jaGVja2JveC1iYXNpYy9zYW1wbGUtcG8tY2hlY2tib3gtYmFzaWMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tY2hlY2tib3gtbGFic1wiIHRpdGxlPVwiUE8gQ2hlY2tib3ggTGFic1wiPlxuICogICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWNoZWNrYm94LWxhYnMvc2FtcGxlLXBvLWNoZWNrYm94LWxhYnMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWNoZWNrYm94LWxhYnMvc2FtcGxlLXBvLWNoZWNrYm94LWxhYnMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tY2hlY2tib3gtYWNjZXB0YW5jZS10ZXJtXCIgdGl0bGU9XCJQTyBDaGVja2JveCAtIEFjY2VwdGFuY2UgVGVybVwiPlxuICogICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWNoZWNrYm94LWFjY2VwdGFuY2UtdGVybS9zYW1wbGUtcG8tY2hlY2tib3gtYWNjZXB0YW5jZS10ZXJtLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1jaGVja2JveC1hY2NlcHRhbmNlLXRlcm0vc2FtcGxlLXBvLWNoZWNrYm94LWFjY2VwdGFuY2UtdGVybS5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQb0NoZWNrYm94Q29tcG9uZW50IGV4dGVuZHMgUG9DaGVja2JveEJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcbiAgICBwcml2YXRlIGNoYW5nZURldGVjdG9yO1xuICAgIGNoZWNrYm94TGFiZWw6IEVsZW1lbnRSZWY7XG4gICAgY29uc3RydWN0b3IoY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmKTtcbiAgICAvKipcbiAgICAgKiBGdW7Dp8OjbyBxdWUgYXRyaWJ1aSBmb2NvIGFvICpjaGVja2JveCouXG4gICAgICpcbiAgICAgKiBQYXJhIHV0aWxpesOhLWxhIMOpIG5lY2Vzc8OhcmlvIGNhcHR1cmFyIGEgcmVmZXLDqm5jaWEgZG8gY29tcG9uZW50ZSBubyBET00gYXRyYXbDqXMgZG8gYFZpZXdDaGlsZGAsIGNvbW8gcG9yIGV4ZW1wbG86XG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiAuLi5cbiAgICAgKiBpbXBvcnQgeyBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbiAgICAgKiBpbXBvcnQgeyBQb0NoZWNrYm94Q29tcG9uZW50IH0gZnJvbSAnQHBvLXVpL25nLWNvbXBvbmVudHMnO1xuICAgICAqXG4gICAgICogLi4uXG4gICAgICpcbiAgICAgKiBAVmlld0NoaWxkKFBvQ2hlY2tib3hDb21wb25lbnQsIHsgc3RhdGljOiB0cnVlIH0pIGNoZWNrYm94OiBQb0NoZWNrYm94Q29tcG9uZW50O1xuICAgICAqXG4gICAgICogZm9jdXNDaGVja2JveCgpIHtcbiAgICAgKiAgIHRoaXMuY2hlY2tib3guZm9jdXMoKTtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZm9jdXMoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBvbktleURvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQsIHZhbHVlOiBib29sZWFuKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgY2hhbmdlTW9kZWxWYWx1ZSh2YWx1ZTogYm9vbGVhbiB8IG51bGwpOiB2b2lkO1xufVxuIl19