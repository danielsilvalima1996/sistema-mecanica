import { ControlValueAccessor } from '@angular/forms';
import { EventEmitter } from '@angular/core';
/**
 * @description
 *
 * O componente `po-checkbox` exibe uma caixa de opção com um texto ao lado, na qual é possível marcar e desmarcar através tanto
 * no *click* do *mouse* quanto por meio da tecla *space* quando estiver com foco.
 *
 * Cada opção poderá receber um estado de marcado, desmarcado, indeterminado e desabilitado, como também uma ação que será disparada quando
 * ocorrer mudanças do valor.
 *
 * > O *model* deste componente aceitará valores igual à `true`, `false` ou `null` para quando for indeterminado.
 */
import * as ɵngcc0 from '@angular/core';
export declare abstract class PoCheckboxBaseComponent implements ControlValueAccessor {
    checkboxValue: boolean | null;
    id: string;
    propagateChange: any;
    private _disabled?;
    /** Define o nome do *checkbox*. */
    name: string;
    /**
     * @optional
     *
     * @description
     *
     * Aplica foco no elemento ao ser iniciado.
     *
     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
     *
     * @default `false`
     */
    autoFocus: boolean;
    /**
     * @optional
     *
     * @description
     *
     * Define o estado do *checkbox* como desabilitado.
     *
     * @default `false`
     */
    set disabled(value: boolean);
    get disabled(): boolean;
    /** Texto de exibição do *checkbox*. */
    label?: string;
    /** Evento disparado quando o valor do *checkbox* for alterado. */
    change?: EventEmitter<any>;
    changeValue(): void;
    checkOption(value: boolean | null): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    writeValue(value: any): void;
    protected abstract changeModelValue(value: boolean | null): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoCheckboxBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoCheckboxBaseComponent, never, never, { "autoFocus": "p-auto-focus"; "disabled": "p-disabled"; "name": "name"; "label": "p-label"; }, { "change": "p-change"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hlY2tib3gtYmFzZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicG8tY2hlY2tib3gtYmFzZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBPIGNvbXBvbmVudGUgYHBvLWNoZWNrYm94YCBleGliZSB1bWEgY2FpeGEgZGUgb3DDp8OjbyBjb20gdW0gdGV4dG8gYW8gbGFkbywgbmEgcXVhbCDDqSBwb3Nzw612ZWwgbWFyY2FyIGUgZGVzbWFyY2FyIGF0cmF2w6lzIHRhbnRvXG4gKiBubyAqY2xpY2sqIGRvICptb3VzZSogcXVhbnRvIHBvciBtZWlvIGRhIHRlY2xhICpzcGFjZSogcXVhbmRvIGVzdGl2ZXIgY29tIGZvY28uXG4gKlxuICogQ2FkYSBvcMOnw6NvIHBvZGVyw6EgcmVjZWJlciB1bSBlc3RhZG8gZGUgbWFyY2FkbywgZGVzbWFyY2FkbywgaW5kZXRlcm1pbmFkbyBlIGRlc2FiaWxpdGFkbywgY29tbyB0YW1iw6ltIHVtYSBhw6fDo28gcXVlIHNlcsOhIGRpc3BhcmFkYSBxdWFuZG9cbiAqIG9jb3JyZXIgbXVkYW7Dp2FzIGRvIHZhbG9yLlxuICpcbiAqID4gTyAqbW9kZWwqIGRlc3RlIGNvbXBvbmVudGUgYWNlaXRhcsOhIHZhbG9yZXMgaWd1YWwgw6AgYHRydWVgLCBgZmFsc2VgIG91IGBudWxsYCBwYXJhIHF1YW5kbyBmb3IgaW5kZXRlcm1pbmFkby5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgYWJzdHJhY3QgY2xhc3MgUG9DaGVja2JveEJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gICAgY2hlY2tib3hWYWx1ZTogYm9vbGVhbiB8IG51bGw7XG4gICAgaWQ6IHN0cmluZztcbiAgICBwcm9wYWdhdGVDaGFuZ2U6IGFueTtcbiAgICBwcml2YXRlIF9kaXNhYmxlZD87XG4gICAgLyoqIERlZmluZSBvIG5vbWUgZG8gKmNoZWNrYm94Ki4gKi9cbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIEFwbGljYSBmb2NvIG5vIGVsZW1lbnRvIGFvIHNlciBpbmljaWFkby5cbiAgICAgKlxuICAgICAqID4gQ2FzbyBtYWlzIGRlIHVtIGVsZW1lbnRvIHNlamEgY29uZmlndXJhZG8gY29tIGVzc2EgcHJvcHJpZWRhZGUsIGFwZW5hcyBvIMO6bHRpbW8gZWxlbWVudG8gZGVjbGFyYWRvIGNvbSBlbGEgdGVyw6EgbyBmb2NvLlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgICAqL1xuICAgIGF1dG9Gb2N1czogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogRGVmaW5lIG8gZXN0YWRvIGRvICpjaGVja2JveCogY29tbyBkZXNhYmlsaXRhZG8uXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAgICovXG4gICAgc2V0IGRpc2FibGVkKHZhbHVlOiBib29sZWFuKTtcbiAgICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbjtcbiAgICAvKiogVGV4dG8gZGUgZXhpYmnDp8OjbyBkbyAqY2hlY2tib3gqLiAqL1xuICAgIGxhYmVsPzogc3RyaW5nO1xuICAgIC8qKiBFdmVudG8gZGlzcGFyYWRvIHF1YW5kbyBvIHZhbG9yIGRvICpjaGVja2JveCogZm9yIGFsdGVyYWRvLiAqL1xuICAgIGNoYW5nZT86IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGNoYW5nZVZhbHVlKCk6IHZvaWQ7XG4gICAgY2hlY2tPcHRpb24odmFsdWU6IGJvb2xlYW4gfCBudWxsKTogdm9pZDtcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpOiB2b2lkO1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IGNoYW5nZU1vZGVsVmFsdWUodmFsdWU6IGJvb2xlYW4gfCBudWxsKTogYW55O1xufVxuIl19