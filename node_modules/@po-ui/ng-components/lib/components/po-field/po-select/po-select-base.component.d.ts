import { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';
import { ChangeDetectorRef, ElementRef, EventEmitter } from '@angular/core';
import { PoSelectOption } from './po-select-option.interface';
/**
 * @description
 *
 * O componente po-select exibe uma lista de valores e permite que o usuário selecione um desses valores.
 * Os valores listados podem ser fixos ou dinâmicos de acordo com a necessidade do desenvolvedor, dando mais flexibilidade ao componente.
 * O po-select não permite que o usuário informe um valor diferente dos valores listados, isso garante a consistência da informação.
 * O po-select não permite que sejam passados valores duplicados, undefined e null para as opções, excluindo-os da lista.
 *
 * > Ao passar um valor para o _model_ que não está na lista de opções, o mesmo será definido como `undefined`.
 *
 * Também existe a possibilidade de utilizar um _template_ para a exibição dos itens da lista,
 * veja mais em **[p-select-option-template](/documentation/po-select-option-template)**.
 */
import * as ɵngcc0 from '@angular/core';
export declare abstract class PoSelectBaseComponent implements ControlValueAccessor, Validator {
    element: ElementRef;
    private _disabled?;
    private _options;
    private _readonly;
    private _required?;
    private onValidatorChange;
    /**
     * @optional
     *
     * @description
     *
     * Aplica foco no elemento ao ser iniciado.
     * > Caso mais de um elemento seja configurado com essa propriedade,
     * o último elemento declarado com ela terá o foco.
     *
     * @default `false`
     */
    autoFocus: boolean;
    /** Adiciona uma label no componente. */
    label?: string;
    /** Nome do componente. */
    name: string;
    /** Texto de apoio para o campo. */
    help?: string;
    /** Mensagem que aparecerá enquanto nenhuma opção estiver selecionada. */
    placeholder?: string;
    /**
     * @optional
     *
     * @description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * @default `false`
     */
    optional: boolean;
    /**
     * Nesta propriedade deve ser definido uma coleção de objetos que implementam a interface PoSelectOption.
     * Caso esta lista estiver vazia, o model será undefined.
     */
    set options(options: Array<PoSelectOption>);
    get options(): Array<PoSelectOption>;
    /** Deve ser informada uma função que será disparada quando houver alterações no ngModel. */
    change?: EventEmitter<any>;
    ngModelChange?: EventEmitter<any>;
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será desabilitado.
     *
     * @default `false`
     */
    set disabled(disabled: string | boolean);
    get disabled(): string | boolean;
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será somente para leitura.
     *
     * @default `false`
     */
    set readonly(value: boolean);
    get readonly(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será obrigatório.
     *
     * @default `false`
     */
    set required(required: string | boolean);
    get required(): string | boolean;
    changeDetector: ChangeDetectorRef;
    onModelChange: any;
    onModelTouched: any;
    readyToValidation: boolean;
    protected clickoutListener: () => void;
    constructor(element: ElementRef, changeDetector: ChangeDetectorRef);
    callModelChange(value: any): any;
    onChange(value: any): void;
    validate(abstractControl: AbstractControl): {
        [key: string]: any;
    };
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    registerOnValidatorChange(fn: any): void;
    private validateModel;
    abstract onUpdateOptions(): void;
    abstract updateModel(selectOption: PoSelectOption): void;
    abstract writeValue(value: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoSelectBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoSelectBaseComponent, never, never, { "autoFocus": "p-auto-focus"; "options": "p-options"; "disabled": "p-disabled"; "readonly": "p-readonly"; "required": "p-required"; "label": "p-label"; "name": "name"; "help": "p-help"; "placeholder": "p-placeholder"; "optional": "p-optional"; }, { "change": "p-change"; "ngModelChange": "ngModelChange"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tc2VsZWN0LWJhc2UuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBvLXNlbGVjdC1iYXNlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sLCBDb250cm9sVmFsdWVBY2Nlc3NvciwgVmFsaWRhdG9yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUG9TZWxlY3RPcHRpb24gfSBmcm9tICcuL3BvLXNlbGVjdC1vcHRpb24uaW50ZXJmYWNlJztcbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogTyBjb21wb25lbnRlIHBvLXNlbGVjdCBleGliZSB1bWEgbGlzdGEgZGUgdmFsb3JlcyBlIHBlcm1pdGUgcXVlIG8gdXN1w6FyaW8gc2VsZWNpb25lIHVtIGRlc3NlcyB2YWxvcmVzLlxuICogT3MgdmFsb3JlcyBsaXN0YWRvcyBwb2RlbSBzZXIgZml4b3Mgb3UgZGluw6JtaWNvcyBkZSBhY29yZG8gY29tIGEgbmVjZXNzaWRhZGUgZG8gZGVzZW52b2x2ZWRvciwgZGFuZG8gbWFpcyBmbGV4aWJpbGlkYWRlIGFvIGNvbXBvbmVudGUuXG4gKiBPIHBvLXNlbGVjdCBuw6NvIHBlcm1pdGUgcXVlIG8gdXN1w6FyaW8gaW5mb3JtZSB1bSB2YWxvciBkaWZlcmVudGUgZG9zIHZhbG9yZXMgbGlzdGFkb3MsIGlzc28gZ2FyYW50ZSBhIGNvbnNpc3TDqm5jaWEgZGEgaW5mb3JtYcOnw6NvLlxuICogTyBwby1zZWxlY3QgbsOjbyBwZXJtaXRlIHF1ZSBzZWphbSBwYXNzYWRvcyB2YWxvcmVzIGR1cGxpY2Fkb3MsIHVuZGVmaW5lZCBlIG51bGwgcGFyYSBhcyBvcMOnw7VlcywgZXhjbHVpbmRvLW9zIGRhIGxpc3RhLlxuICpcbiAqID4gQW8gcGFzc2FyIHVtIHZhbG9yIHBhcmEgbyBfbW9kZWxfIHF1ZSBuw6NvIGVzdMOhIG5hIGxpc3RhIGRlIG9ww6fDtWVzLCBvIG1lc21vIHNlcsOhIGRlZmluaWRvIGNvbW8gYHVuZGVmaW5lZGAuXG4gKlxuICogVGFtYsOpbSBleGlzdGUgYSBwb3NzaWJpbGlkYWRlIGRlIHV0aWxpemFyIHVtIF90ZW1wbGF0ZV8gcGFyYSBhIGV4aWJpw6fDo28gZG9zIGl0ZW5zIGRhIGxpc3RhLFxuICogdmVqYSBtYWlzIGVtICoqW3Atc2VsZWN0LW9wdGlvbi10ZW1wbGF0ZV0oL2RvY3VtZW50YXRpb24vcG8tc2VsZWN0LW9wdGlvbi10ZW1wbGF0ZSkqKi5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgYWJzdHJhY3QgY2xhc3MgUG9TZWxlY3RCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIFZhbGlkYXRvciB7XG4gICAgZWxlbWVudDogRWxlbWVudFJlZjtcbiAgICBwcml2YXRlIF9kaXNhYmxlZD87XG4gICAgcHJpdmF0ZSBfb3B0aW9ucztcbiAgICBwcml2YXRlIF9yZWFkb25seTtcbiAgICBwcml2YXRlIF9yZXF1aXJlZD87XG4gICAgcHJpdmF0ZSBvblZhbGlkYXRvckNoYW5nZTtcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogQXBsaWNhIGZvY28gbm8gZWxlbWVudG8gYW8gc2VyIGluaWNpYWRvLlxuICAgICAqID4gQ2FzbyBtYWlzIGRlIHVtIGVsZW1lbnRvIHNlamEgY29uZmlndXJhZG8gY29tIGVzc2EgcHJvcHJpZWRhZGUsXG4gICAgICogbyDDumx0aW1vIGVsZW1lbnRvIGRlY2xhcmFkbyBjb20gZWxhIHRlcsOhIG8gZm9jby5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICAgKi9cbiAgICBhdXRvRm9jdXM6IGJvb2xlYW47XG4gICAgLyoqIEFkaWNpb25hIHVtYSBsYWJlbCBubyBjb21wb25lbnRlLiAqL1xuICAgIGxhYmVsPzogc3RyaW5nO1xuICAgIC8qKiBOb21lIGRvIGNvbXBvbmVudGUuICovXG4gICAgbmFtZTogc3RyaW5nO1xuICAgIC8qKiBUZXh0byBkZSBhcG9pbyBwYXJhIG8gY2FtcG8uICovXG4gICAgaGVscD86IHN0cmluZztcbiAgICAvKiogTWVuc2FnZW0gcXVlIGFwYXJlY2Vyw6EgZW5xdWFudG8gbmVuaHVtYSBvcMOnw6NvIGVzdGl2ZXIgc2VsZWNpb25hZGEuICovXG4gICAgcGxhY2Vob2xkZXI/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIERlZmluZSBzZSBhIGluZGljYcOnw6NvIGRlIGNhbXBvIG9wY2lvbmFsIHNlcsOhIGV4aWJpZGEuXG4gICAgICpcbiAgICAgKiA+IE7Do28gc2Vyw6EgZXhpYmlkYSBhIGluZGljYcOnw6NvIHNlOlxuICAgICAqIC0gTyBjYW1wbyBjb250ZXIgYHAtcmVxdWlyZWRgO1xuICAgICAqIC0gTsOjbyBwb3NzdWlyIGBwLWhlbHBgIGUvb3UgYHAtbGFiZWxgLlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgICAqL1xuICAgIG9wdGlvbmFsOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIE5lc3RhIHByb3ByaWVkYWRlIGRldmUgc2VyIGRlZmluaWRvIHVtYSBjb2xlw6fDo28gZGUgb2JqZXRvcyBxdWUgaW1wbGVtZW50YW0gYSBpbnRlcmZhY2UgUG9TZWxlY3RPcHRpb24uXG4gICAgICogQ2FzbyBlc3RhIGxpc3RhIGVzdGl2ZXIgdmF6aWEsIG8gbW9kZWwgc2Vyw6EgdW5kZWZpbmVkLlxuICAgICAqL1xuICAgIHNldCBvcHRpb25zKG9wdGlvbnM6IEFycmF5PFBvU2VsZWN0T3B0aW9uPik7XG4gICAgZ2V0IG9wdGlvbnMoKTogQXJyYXk8UG9TZWxlY3RPcHRpb24+O1xuICAgIC8qKiBEZXZlIHNlciBpbmZvcm1hZGEgdW1hIGZ1bsOnw6NvIHF1ZSBzZXLDoSBkaXNwYXJhZGEgcXVhbmRvIGhvdXZlciBhbHRlcmHDp8O1ZXMgbm8gbmdNb2RlbC4gKi9cbiAgICBjaGFuZ2U/OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBuZ01vZGVsQ2hhbmdlPzogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIEluZGljYSBxdWUgbyBjYW1wbyBzZXLDoSBkZXNhYmlsaXRhZG8uXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAgICovXG4gICAgc2V0IGRpc2FibGVkKGRpc2FibGVkOiBzdHJpbmcgfCBib29sZWFuKTtcbiAgICBnZXQgZGlzYWJsZWQoKTogc3RyaW5nIHwgYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogSW5kaWNhIHF1ZSBvIGNhbXBvIHNlcsOhIHNvbWVudGUgcGFyYSBsZWl0dXJhLlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgICAqL1xuICAgIHNldCByZWFkb25seSh2YWx1ZTogYm9vbGVhbik7XG4gICAgZ2V0IHJlYWRvbmx5KCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIEluZGljYSBxdWUgbyBjYW1wbyBzZXLDoSBvYnJpZ2F0w7NyaW8uXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAgICovXG4gICAgc2V0IHJlcXVpcmVkKHJlcXVpcmVkOiBzdHJpbmcgfCBib29sZWFuKTtcbiAgICBnZXQgcmVxdWlyZWQoKTogc3RyaW5nIHwgYm9vbGVhbjtcbiAgICBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWY7XG4gICAgb25Nb2RlbENoYW5nZTogYW55O1xuICAgIG9uTW9kZWxUb3VjaGVkOiBhbnk7XG4gICAgcmVhZHlUb1ZhbGlkYXRpb246IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIGNsaWNrb3V0TGlzdGVuZXI6ICgpID0+IHZvaWQ7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudDogRWxlbWVudFJlZiwgY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmKTtcbiAgICBjYWxsTW9kZWxDaGFuZ2UodmFsdWU6IGFueSk6IGFueTtcbiAgICBvbkNoYW5nZSh2YWx1ZTogYW55KTogdm9pZDtcbiAgICB2YWxpZGF0ZShhYnN0cmFjdENvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IHtcbiAgICAgICAgW2tleTogc3RyaW5nXTogYW55O1xuICAgIH07XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uVmFsaWRhdG9yQ2hhbmdlKGZuOiBhbnkpOiB2b2lkO1xuICAgIHByaXZhdGUgdmFsaWRhdGVNb2RlbDtcbiAgICBhYnN0cmFjdCBvblVwZGF0ZU9wdGlvbnMoKTogdm9pZDtcbiAgICBhYnN0cmFjdCB1cGRhdGVNb2RlbChzZWxlY3RPcHRpb246IFBvU2VsZWN0T3B0aW9uKTogdm9pZDtcbiAgICBhYnN0cmFjdCB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xufVxuIl19