import { EventEmitter } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { PoUploadFile } from './po-upload-file';
import { Observable, Subscription } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare class PoUploadBaseService {
    private http;
    formField: string;
    requests: Array<any>;
    constructor(http: HttpClient);
    /**
     * Método responsável por enviar os arquivos ao servidor, conforme o parâmetro URL.
     *
     * @param url URL da requisição a ser efetuada.
     * @param files Arquivos a serem enviados.
     * @param tOnUpload Função a ser executada quando o arquivo for enviado ao servidor.
     * @param uploadCallback Função que será executada enquanto os arquivos estiverem sendo enviados.
     * @param successCallback Função a ser executada quando a requisição for efetuada com sucesso.
     * @param errorCallback Função a ser executada quando a requisição foi efetuada com sucesso.
     */
    upload(url: string, files: Array<PoUploadFile>, tOnUpload: EventEmitter<any>, uploadCallback: (file: PoUploadFile, percent: number) => void, successCallback: (file: PoUploadFile, event: any) => void, errorCallback: (file: PoUploadFile, event: any) => void): void;
    sendFile(url: string, file: PoUploadFile, formData: FormData, uploadCallback: (file: PoUploadFile, percent: number) => void, successCallback: (file: PoUploadFile, event: any) => void, errorCallback: (file: PoUploadFile, event: any) => void): void;
    getRequest(url: string, formData: FormData): Observable<any>;
    stopRequestByFile(file: any, callback: () => void): void;
    removeRequest(requestObj: any): void;
    addRequest(file: PoUploadFile, request: Subscription): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoUploadBaseService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<PoUploadBaseService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdXBsb2FkLWJhc2Uuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJwby11cGxvYWQtYmFzZS5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IFBvVXBsb2FkRmlsZSB9IGZyb20gJy4vcG8tdXBsb2FkLWZpbGUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQb1VwbG9hZEJhc2VTZXJ2aWNlIHtcbiAgICBwcml2YXRlIGh0dHA7XG4gICAgZm9ybUZpZWxkOiBzdHJpbmc7XG4gICAgcmVxdWVzdHM6IEFycmF5PGFueT47XG4gICAgY29uc3RydWN0b3IoaHR0cDogSHR0cENsaWVudCk7XG4gICAgLyoqXG4gICAgICogTcOpdG9kbyByZXNwb25zw6F2ZWwgcG9yIGVudmlhciBvcyBhcnF1aXZvcyBhbyBzZXJ2aWRvciwgY29uZm9ybWUgbyBwYXLDom1ldHJvIFVSTC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB1cmwgVVJMIGRhIHJlcXVpc2nDp8OjbyBhIHNlciBlZmV0dWFkYS5cbiAgICAgKiBAcGFyYW0gZmlsZXMgQXJxdWl2b3MgYSBzZXJlbSBlbnZpYWRvcy5cbiAgICAgKiBAcGFyYW0gdE9uVXBsb2FkIEZ1bsOnw6NvIGEgc2VyIGV4ZWN1dGFkYSBxdWFuZG8gbyBhcnF1aXZvIGZvciBlbnZpYWRvIGFvIHNlcnZpZG9yLlxuICAgICAqIEBwYXJhbSB1cGxvYWRDYWxsYmFjayBGdW7Dp8OjbyBxdWUgc2Vyw6EgZXhlY3V0YWRhIGVucXVhbnRvIG9zIGFycXVpdm9zIGVzdGl2ZXJlbSBzZW5kbyBlbnZpYWRvcy5cbiAgICAgKiBAcGFyYW0gc3VjY2Vzc0NhbGxiYWNrIEZ1bsOnw6NvIGEgc2VyIGV4ZWN1dGFkYSBxdWFuZG8gYSByZXF1aXNpw6fDo28gZm9yIGVmZXR1YWRhIGNvbSBzdWNlc3NvLlxuICAgICAqIEBwYXJhbSBlcnJvckNhbGxiYWNrIEZ1bsOnw6NvIGEgc2VyIGV4ZWN1dGFkYSBxdWFuZG8gYSByZXF1aXNpw6fDo28gZm9pIGVmZXR1YWRhIGNvbSBzdWNlc3NvLlxuICAgICAqL1xuICAgIHVwbG9hZCh1cmw6IHN0cmluZywgZmlsZXM6IEFycmF5PFBvVXBsb2FkRmlsZT4sIHRPblVwbG9hZDogRXZlbnRFbWl0dGVyPGFueT4sIHVwbG9hZENhbGxiYWNrOiAoZmlsZTogUG9VcGxvYWRGaWxlLCBwZXJjZW50OiBudW1iZXIpID0+IHZvaWQsIHN1Y2Nlc3NDYWxsYmFjazogKGZpbGU6IFBvVXBsb2FkRmlsZSwgZXZlbnQ6IGFueSkgPT4gdm9pZCwgZXJyb3JDYWxsYmFjazogKGZpbGU6IFBvVXBsb2FkRmlsZSwgZXZlbnQ6IGFueSkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgc2VuZEZpbGUodXJsOiBzdHJpbmcsIGZpbGU6IFBvVXBsb2FkRmlsZSwgZm9ybURhdGE6IEZvcm1EYXRhLCB1cGxvYWRDYWxsYmFjazogKGZpbGU6IFBvVXBsb2FkRmlsZSwgcGVyY2VudDogbnVtYmVyKSA9PiB2b2lkLCBzdWNjZXNzQ2FsbGJhY2s6IChmaWxlOiBQb1VwbG9hZEZpbGUsIGV2ZW50OiBhbnkpID0+IHZvaWQsIGVycm9yQ2FsbGJhY2s6IChmaWxlOiBQb1VwbG9hZEZpbGUsIGV2ZW50OiBhbnkpID0+IHZvaWQpOiB2b2lkO1xuICAgIGdldFJlcXVlc3QodXJsOiBzdHJpbmcsIGZvcm1EYXRhOiBGb3JtRGF0YSk6IE9ic2VydmFibGU8YW55PjtcbiAgICBzdG9wUmVxdWVzdEJ5RmlsZShmaWxlOiBhbnksIGNhbGxiYWNrOiAoKSA9PiB2b2lkKTogdm9pZDtcbiAgICByZW1vdmVSZXF1ZXN0KHJlcXVlc3RPYmo6IGFueSk6IHZvaWQ7XG4gICAgYWRkUmVxdWVzdChmaWxlOiBQb1VwbG9hZEZpbGUsIHJlcXVlc3Q6IFN1YnNjcmlwdGlvbik6IHZvaWQ7XG59XG4iXX0=