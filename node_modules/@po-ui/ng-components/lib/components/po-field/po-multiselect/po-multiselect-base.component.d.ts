import { EventEmitter, OnInit } from '@angular/core';
import { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';
import { PoMultiselectFilterMode } from './po-multiselect-filter-mode.enum';
import { PoMultiselectLiterals } from './po-multiselect-literals.interface';
import { PoMultiselectOption } from './po-multiselect-option.interface';
import * as ɵngcc0 from '@angular/core';
export declare const poMultiselectLiteralsDefault: {
    en: PoMultiselectLiterals;
    es: PoMultiselectLiterals;
    pt: PoMultiselectLiterals;
    ru: PoMultiselectLiterals;
};
/**
 * @description
 *
 * O po-multiselect é um componente de múltipla seleção.
 * Este componente é recomendado para dar ao usuário a opção de selecionar vários itens em uma lista.
 *
 * Quando a lista possuir poucos itens, deve-se dar preferência para o uso do po-checkbox-group, por ser mais simples
 * e mais rápido para a seleção do usuário.
 *
 * Este componente também não deve ser utilizado em casos onde a seleção seja única. Nesses casos, deve-se utilizar o
 * po-select, po-combo ou po-radio-group.
 */
export declare abstract class PoMultiselectBaseComponent implements ControlValueAccessor, OnInit, Validator {
    private _disabled?;
    private _filterMode?;
    private _hideSearch?;
    private _literals;
    private _options;
    private _required?;
    private _sort?;
    private lastLengthModel;
    private onModelChange;
    private onModelTouched;
    private validatorChange;
    selectedOptions: Array<PoMultiselectOption>;
    visibleOptionsDropdown: Array<PoMultiselectOption>;
    visibleDisclaimers: any[];
    /**
     * @optional
     *
     * @description
     *
     * Aplica foco no elemento ao ser iniciado.
     *
     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
     *
     * @default `false`
     */
    autoFocus: boolean;
    /** Label no componente. */
    label?: string;
    /** Texto de apoio para o campo. */
    help?: string;
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-multiselect`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoMultiselectLiterals = {
     *    noData: 'Nenhum dado encontrado',
     *    placeholderSearch: 'Buscar'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoMultiselectLiterals = {
     *    noData: 'Sem dados'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:
     *
     * ```
     * <po-multiselect
     *   [p-literals]="customLiterals">
     * </po-po-multiselect>
     * ```
     *
     *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
     */
    set literals(value: PoMultiselectLiterals);
    get literals(): PoMultiselectLiterals;
    /**
     * @optional
     *
     * @description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * @default `false`
     */
    optional: boolean;
    /** Mensagem apresentada enquanto o campo estiver vazio. */
    placeholder?: string;
    /**
     * @description
     *
     * Placeholder do campo de pesquisa.
     *
     * > Caso o mesmo não seja informado, o valor padrão será traduzido com base no idioma do navegador (pt, es e en).
     *
     * @default `Buscar`
     */
    placeholderSearch?: string;
    /** Nome do componente. */
    name: string;
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (p-disabled).
     *
     * @default `false`
     */
    set required(required: boolean);
    get required(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será desabilitado.
     *
     * @default `false`
     */
    set disabled(disabled: boolean);
    get disabled(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Esconde o campo de pesquisa existente dentro do dropdown do po-multiselect.
     *
     * @default `false`
     */
    set hideSearch(hideSearch: boolean);
    get hideSearch(): boolean;
    /**
     * @description
     *
     * Nesta propriedade deve ser definida uma lista de objetos que implementam a interface PoMultiselectOption.
     * Esta lista deve conter os valores e os labels que serão apresentados na tela.
     *
     * > Para atualizar a lista de opções do `po-multiselect` dinamicamente deve-se utilizar dados imutáveis.
     * Exemplo de adição de um novo item com spread:
     * ```
     * this.options = [...this.options, { label: 'Example', value: 'example' }];
     * ```
     */
    set options(options: Array<PoMultiselectOption>);
    get options(): Array<PoMultiselectOption>;
    /**
     * @optional
     *
     * @description
     *
     * Indica que a lista definida na propriedade p-options será ordenada pelo label antes de ser apresentada no
     * dropdown.
     *
     * @default `false`
     */
    set sort(sort: boolean);
    get sort(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Define o modo de pesquisa utilizado no campo de busca, quando habilitado.
     * Valores definidos no enum: PoMultiselectFilterMode
     *
     * @default `startsWith`
     */
    set filterMode(filterMode: PoMultiselectFilterMode);
    get filterMode(): PoMultiselectFilterMode;
    /** Pode ser informada uma função que será disparada quando houver alterações no ngModel. */
    change?: EventEmitter<any>;
    protected clickOutListener: () => void;
    protected resizeListener: () => void;
    ngOnInit(): void;
    validAndSortOptions(): void;
    setUndefinedLabels(options: any): void;
    updateList(options: Array<PoMultiselectOption>): void;
    callOnChange(selectedOptions: Array<PoMultiselectOption>): void;
    eventChange(selectedOptions: any): void;
    getValuesFromOptions(selectedOptions: Array<PoMultiselectOption>): (string | number)[];
    getLabelByValue(value: any): string;
    changeItems(selectedValues: any): void;
    searchByLabel(search: string, options: Array<PoMultiselectOption>, filterMode: PoMultiselectFilterMode): void;
    compareMethod(search: string, option: PoMultiselectOption, filterMode: PoMultiselectFilterMode): boolean;
    startsWith(search: string, option: PoMultiselectOption): boolean;
    contains(search: string, option: PoMultiselectOption): boolean;
    endsWith(search: string, option: PoMultiselectOption): boolean;
    validate(c: AbstractControl): {
        [key: string]: any;
    };
    updateSelectedOptions(values: any): void;
    writeValue(values: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    registerOnValidatorChange(fn: () => void): void;
    private validateModel;
    abstract updateVisibleItems(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoMultiselectBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoMultiselectBaseComponent, never, never, { "autoFocus": "p-auto-focus"; "placeholder": "p-placeholder"; "placeholderSearch": "p-placeholder-search"; "literals": "p-literals"; "required": "p-required"; "disabled": "p-disabled"; "hideSearch": "p-hide-search"; "options": "p-options"; "sort": "p-sort"; "filterMode": "p-filter-mode"; "label": "p-label"; "help": "p-help"; "optional": "p-optional"; "name": "name"; }, { "change": "p-change"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbXVsdGlzZWxlY3QtYmFzZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicG8tbXVsdGlzZWxlY3QtYmFzZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgQ29udHJvbFZhbHVlQWNjZXNzb3IsIFZhbGlkYXRvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFBvTXVsdGlzZWxlY3RGaWx0ZXJNb2RlIH0gZnJvbSAnLi9wby1tdWx0aXNlbGVjdC1maWx0ZXItbW9kZS5lbnVtJztcbmltcG9ydCB7IFBvTXVsdGlzZWxlY3RMaXRlcmFscyB9IGZyb20gJy4vcG8tbXVsdGlzZWxlY3QtbGl0ZXJhbHMuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvTXVsdGlzZWxlY3RPcHRpb24gfSBmcm9tICcuL3BvLW11bHRpc2VsZWN0LW9wdGlvbi5pbnRlcmZhY2UnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgcG9NdWx0aXNlbGVjdExpdGVyYWxzRGVmYXVsdDoge1xuICAgIGVuOiBQb011bHRpc2VsZWN0TGl0ZXJhbHM7XG4gICAgZXM6IFBvTXVsdGlzZWxlY3RMaXRlcmFscztcbiAgICBwdDogUG9NdWx0aXNlbGVjdExpdGVyYWxzO1xuICAgIHJ1OiBQb011bHRpc2VsZWN0TGl0ZXJhbHM7XG59O1xuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBPIHBvLW11bHRpc2VsZWN0IMOpIHVtIGNvbXBvbmVudGUgZGUgbcO6bHRpcGxhIHNlbGXDp8Ojby5cbiAqIEVzdGUgY29tcG9uZW50ZSDDqSByZWNvbWVuZGFkbyBwYXJhIGRhciBhbyB1c3XDoXJpbyBhIG9ww6fDo28gZGUgc2VsZWNpb25hciB2w6FyaW9zIGl0ZW5zIGVtIHVtYSBsaXN0YS5cbiAqXG4gKiBRdWFuZG8gYSBsaXN0YSBwb3NzdWlyIHBvdWNvcyBpdGVucywgZGV2ZS1zZSBkYXIgcHJlZmVyw6puY2lhIHBhcmEgbyB1c28gZG8gcG8tY2hlY2tib3gtZ3JvdXAsIHBvciBzZXIgbWFpcyBzaW1wbGVzXG4gKiBlIG1haXMgcsOhcGlkbyBwYXJhIGEgc2VsZcOnw6NvIGRvIHVzdcOhcmlvLlxuICpcbiAqIEVzdGUgY29tcG9uZW50ZSB0YW1iw6ltIG7Do28gZGV2ZSBzZXIgdXRpbGl6YWRvIGVtIGNhc29zIG9uZGUgYSBzZWxlw6fDo28gc2VqYSDDum5pY2EuIE5lc3NlcyBjYXNvcywgZGV2ZS1zZSB1dGlsaXphciBvXG4gKiBwby1zZWxlY3QsIHBvLWNvbWJvIG91IHBvLXJhZGlvLWdyb3VwLlxuICovXG5leHBvcnQgZGVjbGFyZSBhYnN0cmFjdCBjbGFzcyBQb011bHRpc2VsZWN0QmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBPbkluaXQsIFZhbGlkYXRvciB7XG4gICAgcHJpdmF0ZSBfZGlzYWJsZWQ/O1xuICAgIHByaXZhdGUgX2ZpbHRlck1vZGU/O1xuICAgIHByaXZhdGUgX2hpZGVTZWFyY2g/O1xuICAgIHByaXZhdGUgX2xpdGVyYWxzO1xuICAgIHByaXZhdGUgX29wdGlvbnM7XG4gICAgcHJpdmF0ZSBfcmVxdWlyZWQ/O1xuICAgIHByaXZhdGUgX3NvcnQ/O1xuICAgIHByaXZhdGUgbGFzdExlbmd0aE1vZGVsO1xuICAgIHByaXZhdGUgb25Nb2RlbENoYW5nZTtcbiAgICBwcml2YXRlIG9uTW9kZWxUb3VjaGVkO1xuICAgIHByaXZhdGUgdmFsaWRhdG9yQ2hhbmdlO1xuICAgIHNlbGVjdGVkT3B0aW9uczogQXJyYXk8UG9NdWx0aXNlbGVjdE9wdGlvbj47XG4gICAgdmlzaWJsZU9wdGlvbnNEcm9wZG93bjogQXJyYXk8UG9NdWx0aXNlbGVjdE9wdGlvbj47XG4gICAgdmlzaWJsZURpc2NsYWltZXJzOiBhbnlbXTtcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogQXBsaWNhIGZvY28gbm8gZWxlbWVudG8gYW8gc2VyIGluaWNpYWRvLlxuICAgICAqXG4gICAgICogPiBDYXNvIG1haXMgZGUgdW0gZWxlbWVudG8gc2VqYSBjb25maWd1cmFkbyBjb20gZXNzYSBwcm9wcmllZGFkZSwgYXBlbmFzIG8gw7psdGltbyBlbGVtZW50byBkZWNsYXJhZG8gY29tIGVsYSB0ZXLDoSBvIGZvY28uXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAgICovXG4gICAgYXV0b0ZvY3VzOiBib29sZWFuO1xuICAgIC8qKiBMYWJlbCBubyBjb21wb25lbnRlLiAqL1xuICAgIGxhYmVsPzogc3RyaW5nO1xuICAgIC8qKiBUZXh0byBkZSBhcG9pbyBwYXJhIG8gY2FtcG8uICovXG4gICAgaGVscD86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogT2JqZXRvIGNvbSBhcyBsaXRlcmFpcyB1c2FkYXMgbm8gYHBvLW11bHRpc2VsZWN0YC5cbiAgICAgKlxuICAgICAqIEV4aXN0ZW0gZHVhcyBtYW5laXJhcyBkZSBjdXN0b21pemFyIG8gY29tcG9uZW50ZSwgcGFzc2FuZG8gdW0gb2JqZXRvIGNvbSB0b2RhcyBhcyBsaXRlcmFpcyBkaXNwb27DrXZlaXM6XG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiAgY29uc3QgY3VzdG9tTGl0ZXJhbHM6IFBvTXVsdGlzZWxlY3RMaXRlcmFscyA9IHtcbiAgICAgKiAgICBub0RhdGE6ICdOZW5odW0gZGFkbyBlbmNvbnRyYWRvJyxcbiAgICAgKiAgICBwbGFjZWhvbGRlclNlYXJjaDogJ0J1c2NhcidcbiAgICAgKiAgfTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIE91IHBhc3NhbmRvIGFwZW5hcyBhcyBsaXRlcmFpcyBxdWUgZGVzZWphIGN1c3RvbWl6YXI6XG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiAgY29uc3QgY3VzdG9tTGl0ZXJhbHM6IFBvTXVsdGlzZWxlY3RMaXRlcmFscyA9IHtcbiAgICAgKiAgICBub0RhdGE6ICdTZW0gZGFkb3MnXG4gICAgICogIH07XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBFIHBhcmEgY2FycmVnYXIgYXMgbGl0ZXJhaXMgY3VzdG9taXphZGFzLCBiYXN0YSBhcGVuYXMgcGFzc2FyIG8gb2JqZXRvIHBhcmEgbyBjb21wb25lbnRlOlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogPHBvLW11bHRpc2VsZWN0XG4gICAgICogICBbcC1saXRlcmFsc109XCJjdXN0b21MaXRlcmFsc1wiPlxuICAgICAqIDwvcG8tcG8tbXVsdGlzZWxlY3Q+XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiAgPiBPIG9iamV0byBwYWRyw6NvIGRlIGxpdGVyYWlzIHNlcsOhIHRyYWR1emlkbyBkZSBhY29yZG8gY29tIG8gaWRpb21hIGRvICpicm93c2VyKiAocHQsIGVuLCBlcykuXG4gICAgICovXG4gICAgc2V0IGxpdGVyYWxzKHZhbHVlOiBQb011bHRpc2VsZWN0TGl0ZXJhbHMpO1xuICAgIGdldCBsaXRlcmFscygpOiBQb011bHRpc2VsZWN0TGl0ZXJhbHM7XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIERlZmluZSBzZSBhIGluZGljYcOnw6NvIGRlIGNhbXBvIG9wY2lvbmFsIHNlcsOhIGV4aWJpZGEuXG4gICAgICpcbiAgICAgKiA+IE7Do28gc2Vyw6EgZXhpYmlkYSBhIGluZGljYcOnw6NvIHNlOlxuICAgICAqIC0gTyBjYW1wbyBjb250ZXIgYHAtcmVxdWlyZWRgO1xuICAgICAqIC0gTsOjbyBwb3NzdWlyIGBwLWhlbHBgIGUvb3UgYHAtbGFiZWxgLlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgICAqL1xuICAgIG9wdGlvbmFsOiBib29sZWFuO1xuICAgIC8qKiBNZW5zYWdlbSBhcHJlc2VudGFkYSBlbnF1YW50byBvIGNhbXBvIGVzdGl2ZXIgdmF6aW8uICovXG4gICAgcGxhY2Vob2xkZXI/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBQbGFjZWhvbGRlciBkbyBjYW1wbyBkZSBwZXNxdWlzYS5cbiAgICAgKlxuICAgICAqID4gQ2FzbyBvIG1lc21vIG7Do28gc2VqYSBpbmZvcm1hZG8sIG8gdmFsb3IgcGFkcsOjbyBzZXLDoSB0cmFkdXppZG8gY29tIGJhc2Ugbm8gaWRpb21hIGRvIG5hdmVnYWRvciAocHQsIGVzIGUgZW4pLlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgYEJ1c2NhcmBcbiAgICAgKi9cbiAgICBwbGFjZWhvbGRlclNlYXJjaD86IHN0cmluZztcbiAgICAvKiogTm9tZSBkbyBjb21wb25lbnRlLiAqL1xuICAgIG5hbWU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogSW5kaWNhIHF1ZSBvIGNhbXBvIHNlcsOhIG9icmlnYXTDs3Jpby4gRXN0YSBwcm9wcmllZGFkZSDDqSBkZXNjb25zaWRlcmFkYSBxdWFuZG8gbyBjYW1wbyBlc3TDoSBkZXNhYmlsaXRhZG8gKHAtZGlzYWJsZWQpLlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgICAqL1xuICAgIHNldCByZXF1aXJlZChyZXF1aXJlZDogYm9vbGVhbik7XG4gICAgZ2V0IHJlcXVpcmVkKCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIEluZGljYSBxdWUgbyBjYW1wbyBzZXLDoSBkZXNhYmlsaXRhZG8uXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAgICovXG4gICAgc2V0IGRpc2FibGVkKGRpc2FibGVkOiBib29sZWFuKTtcbiAgICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogRXNjb25kZSBvIGNhbXBvIGRlIHBlc3F1aXNhIGV4aXN0ZW50ZSBkZW50cm8gZG8gZHJvcGRvd24gZG8gcG8tbXVsdGlzZWxlY3QuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAgICovXG4gICAgc2V0IGhpZGVTZWFyY2goaGlkZVNlYXJjaDogYm9vbGVhbik7XG4gICAgZ2V0IGhpZGVTZWFyY2goKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIE5lc3RhIHByb3ByaWVkYWRlIGRldmUgc2VyIGRlZmluaWRhIHVtYSBsaXN0YSBkZSBvYmpldG9zIHF1ZSBpbXBsZW1lbnRhbSBhIGludGVyZmFjZSBQb011bHRpc2VsZWN0T3B0aW9uLlxuICAgICAqIEVzdGEgbGlzdGEgZGV2ZSBjb250ZXIgb3MgdmFsb3JlcyBlIG9zIGxhYmVscyBxdWUgc2Vyw6NvIGFwcmVzZW50YWRvcyBuYSB0ZWxhLlxuICAgICAqXG4gICAgICogPiBQYXJhIGF0dWFsaXphciBhIGxpc3RhIGRlIG9ww6fDtWVzIGRvIGBwby1tdWx0aXNlbGVjdGAgZGluYW1pY2FtZW50ZSBkZXZlLXNlIHV0aWxpemFyIGRhZG9zIGltdXTDoXZlaXMuXG4gICAgICogRXhlbXBsbyBkZSBhZGnDp8OjbyBkZSB1bSBub3ZvIGl0ZW0gY29tIHNwcmVhZDpcbiAgICAgKiBgYGBcbiAgICAgKiB0aGlzLm9wdGlvbnMgPSBbLi4udGhpcy5vcHRpb25zLCB7IGxhYmVsOiAnRXhhbXBsZScsIHZhbHVlOiAnZXhhbXBsZScgfV07XG4gICAgICogYGBgXG4gICAgICovXG4gICAgc2V0IG9wdGlvbnMob3B0aW9uczogQXJyYXk8UG9NdWx0aXNlbGVjdE9wdGlvbj4pO1xuICAgIGdldCBvcHRpb25zKCk6IEFycmF5PFBvTXVsdGlzZWxlY3RPcHRpb24+O1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBJbmRpY2EgcXVlIGEgbGlzdGEgZGVmaW5pZGEgbmEgcHJvcHJpZWRhZGUgcC1vcHRpb25zIHNlcsOhIG9yZGVuYWRhIHBlbG8gbGFiZWwgYW50ZXMgZGUgc2VyIGFwcmVzZW50YWRhIG5vXG4gICAgICogZHJvcGRvd24uXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAgICovXG4gICAgc2V0IHNvcnQoc29ydDogYm9vbGVhbik7XG4gICAgZ2V0IHNvcnQoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogRGVmaW5lIG8gbW9kbyBkZSBwZXNxdWlzYSB1dGlsaXphZG8gbm8gY2FtcG8gZGUgYnVzY2EsIHF1YW5kbyBoYWJpbGl0YWRvLlxuICAgICAqIFZhbG9yZXMgZGVmaW5pZG9zIG5vIGVudW06IFBvTXVsdGlzZWxlY3RGaWx0ZXJNb2RlXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBgc3RhcnRzV2l0aGBcbiAgICAgKi9cbiAgICBzZXQgZmlsdGVyTW9kZShmaWx0ZXJNb2RlOiBQb011bHRpc2VsZWN0RmlsdGVyTW9kZSk7XG4gICAgZ2V0IGZpbHRlck1vZGUoKTogUG9NdWx0aXNlbGVjdEZpbHRlck1vZGU7XG4gICAgLyoqIFBvZGUgc2VyIGluZm9ybWFkYSB1bWEgZnVuw6fDo28gcXVlIHNlcsOhIGRpc3BhcmFkYSBxdWFuZG8gaG91dmVyIGFsdGVyYcOnw7VlcyBubyBuZ01vZGVsLiAqL1xuICAgIGNoYW5nZT86IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHByb3RlY3RlZCBjbGlja091dExpc3RlbmVyOiAoKSA9PiB2b2lkO1xuICAgIHByb3RlY3RlZCByZXNpemVMaXN0ZW5lcjogKCkgPT4gdm9pZDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIHZhbGlkQW5kU29ydE9wdGlvbnMoKTogdm9pZDtcbiAgICBzZXRVbmRlZmluZWRMYWJlbHMob3B0aW9uczogYW55KTogdm9pZDtcbiAgICB1cGRhdGVMaXN0KG9wdGlvbnM6IEFycmF5PFBvTXVsdGlzZWxlY3RPcHRpb24+KTogdm9pZDtcbiAgICBjYWxsT25DaGFuZ2Uoc2VsZWN0ZWRPcHRpb25zOiBBcnJheTxQb011bHRpc2VsZWN0T3B0aW9uPik6IHZvaWQ7XG4gICAgZXZlbnRDaGFuZ2Uoc2VsZWN0ZWRPcHRpb25zOiBhbnkpOiB2b2lkO1xuICAgIGdldFZhbHVlc0Zyb21PcHRpb25zKHNlbGVjdGVkT3B0aW9uczogQXJyYXk8UG9NdWx0aXNlbGVjdE9wdGlvbj4pOiAoc3RyaW5nIHwgbnVtYmVyKVtdO1xuICAgIGdldExhYmVsQnlWYWx1ZSh2YWx1ZTogYW55KTogc3RyaW5nO1xuICAgIGNoYW5nZUl0ZW1zKHNlbGVjdGVkVmFsdWVzOiBhbnkpOiB2b2lkO1xuICAgIHNlYXJjaEJ5TGFiZWwoc2VhcmNoOiBzdHJpbmcsIG9wdGlvbnM6IEFycmF5PFBvTXVsdGlzZWxlY3RPcHRpb24+LCBmaWx0ZXJNb2RlOiBQb011bHRpc2VsZWN0RmlsdGVyTW9kZSk6IHZvaWQ7XG4gICAgY29tcGFyZU1ldGhvZChzZWFyY2g6IHN0cmluZywgb3B0aW9uOiBQb011bHRpc2VsZWN0T3B0aW9uLCBmaWx0ZXJNb2RlOiBQb011bHRpc2VsZWN0RmlsdGVyTW9kZSk6IGJvb2xlYW47XG4gICAgc3RhcnRzV2l0aChzZWFyY2g6IHN0cmluZywgb3B0aW9uOiBQb011bHRpc2VsZWN0T3B0aW9uKTogYm9vbGVhbjtcbiAgICBjb250YWlucyhzZWFyY2g6IHN0cmluZywgb3B0aW9uOiBQb011bHRpc2VsZWN0T3B0aW9uKTogYm9vbGVhbjtcbiAgICBlbmRzV2l0aChzZWFyY2g6IHN0cmluZywgb3B0aW9uOiBQb011bHRpc2VsZWN0T3B0aW9uKTogYm9vbGVhbjtcbiAgICB2YWxpZGF0ZShjOiBBYnN0cmFjdENvbnRyb2wpOiB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IGFueTtcbiAgICB9O1xuICAgIHVwZGF0ZVNlbGVjdGVkT3B0aW9ucyh2YWx1ZXM6IGFueSk6IHZvaWQ7XG4gICAgd3JpdGVWYWx1ZSh2YWx1ZXM6IGFueSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uVmFsaWRhdG9yQ2hhbmdlKGZuOiAoKSA9PiB2b2lkKTogdm9pZDtcbiAgICBwcml2YXRlIHZhbGlkYXRlTW9kZWw7XG4gICAgYWJzdHJhY3QgdXBkYXRlVmlzaWJsZUl0ZW1zKCk6IHZvaWQ7XG59XG4iXX0=