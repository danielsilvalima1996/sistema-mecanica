import { ElementRef, EventEmitter } from '@angular/core';
import { PoCalendarLangService } from './po-calendar.lang.service';
import { PoCalendarService } from './po-calendar.service';
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente de calendário de uso interno
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoCalendarComponent {
    private poCalendarService;
    private poCalendarLangService;
    private _dateEnd;
    private _dateStart;
    private _locale;
    private _selectedDate?;
    currentYear: number;
    dayVisible: boolean;
    displayDays: Array<number>;
    displayDecade: Array<number>;
    displayFinalDecade: number;
    displayMonth: any;
    displayMonthNumber: number;
    displayMonths: Array<any>;
    displayStartDecade: number;
    displayWeedDays: Array<any>;
    displayYear: number;
    monthVisible: boolean;
    overlayInvisible: boolean;
    visible: boolean;
    yearVisible: boolean;
    private currentMonthNumber;
    private isMobile;
    private lastDisplay;
    private today;
    elDays: ElementRef;
    elMonths: ElementRef;
    elYears: ElementRef;
    /**
     * @optional
     *
     * @description
     *
     * Data máxima possível de ser selecionada no calendário.
     */
    set dateEnd(val: Date);
    get dateEnd(): Date;
    /**
     * @optional
     *
     * @description
     *
     * Idioma do calendário.
     *
     * Valores válidos:
     *  - `pt`
     *  - `en`
     *  - `es`
     */
    set locale(locale: string);
    get locale(): string;
    /**
     * @optional
     *
     * @description
     *
     * Data selecionada no calendário.
     */
    set selectedDate(selectedDate: Date);
    get selectedDate(): Date;
    /**
     * @optional
     *
     * @description
     *
     * Data mínima possível de ser selecionada no calendário.
     */
    set dateStart(val: Date);
    get dateStart(): Date;
    selectedDateChange: EventEmitter<Date>;
    submit: EventEmitter<Date>;
    constructor(poCalendarService: PoCalendarService, poCalendarLangService: PoCalendarLangService);
    close(): void;
    getArrayDecade(year: any): void;
    getBackgroundColor(displayValue: number, propertyValue: number): "po-calendar-box-background-selected" | "po-calendar-box-background";
    getDayBackgroundColor(date: Date): "" | "po-calendar-box-background-selected" | "po-calendar-box-background" | "po-calendar-box-background-today" | "po-calendar-box-background-disabled";
    getDayForegroundColor(date: Date): "po-calendar-box-foreground-selected" | "po-calendar-box-foreground" | "po-calendar-box-foreground-today" | "po-calendar-box-foreground-disabled";
    getForegroundColor(displayValue: number, propertyValue: number): "po-calendar-box-foreground-selected" | "po-calendar-box-foreground";
    getWordMonth(): any;
    getWordYear(): any;
    init(): void;
    initializeLanguage(): void;
    onNextMonth(): void;
    onPrevMonth(): void;
    onSelectDate(date: Date): void;
    onSelectMonth(year: number, month: number): void;
    onSelectYear(year: number, month: number): void;
    selectDay(): void;
    selectMonth(): void;
    selectYear(): void;
    setMobileVisualization(): "po-calendar" | "po-calendar po-calendar-mobile";
    updateYear(value: number): void;
    private addAllYearsInDecade;
    private equalsDate;
    private updateDate;
    private updateDecade;
    private updateDisplay;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoCalendarComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PoCalendarComponent, "po-calendar", never, { "dateEnd": "p-date-end"; "locale": "p-locale"; "selectedDate": "p-selected-date"; "dateStart": "p-date-start"; }, { "selectedDateChange": "p-selected-dateChange"; "submit": "p-submit"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2FsZW5kYXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBvLWNhbGVuZGFyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQb0NhbGVuZGFyTGFuZ1NlcnZpY2UgfSBmcm9tICcuL3BvLWNhbGVuZGFyLmxhbmcuc2VydmljZSc7XG5pbXBvcnQgeyBQb0NhbGVuZGFyU2VydmljZSB9IGZyb20gJy4vcG8tY2FsZW5kYXIuc2VydmljZSc7XG4vKipcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIENvbXBvbmVudGUgZGUgY2FsZW5kw6FyaW8gZGUgdXNvIGludGVybm9cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUG9DYWxlbmRhckNvbXBvbmVudCB7XG4gICAgcHJpdmF0ZSBwb0NhbGVuZGFyU2VydmljZTtcbiAgICBwcml2YXRlIHBvQ2FsZW5kYXJMYW5nU2VydmljZTtcbiAgICBwcml2YXRlIF9kYXRlRW5kO1xuICAgIHByaXZhdGUgX2RhdGVTdGFydDtcbiAgICBwcml2YXRlIF9sb2NhbGU7XG4gICAgcHJpdmF0ZSBfc2VsZWN0ZWREYXRlPztcbiAgICBjdXJyZW50WWVhcjogbnVtYmVyO1xuICAgIGRheVZpc2libGU6IGJvb2xlYW47XG4gICAgZGlzcGxheURheXM6IEFycmF5PG51bWJlcj47XG4gICAgZGlzcGxheURlY2FkZTogQXJyYXk8bnVtYmVyPjtcbiAgICBkaXNwbGF5RmluYWxEZWNhZGU6IG51bWJlcjtcbiAgICBkaXNwbGF5TW9udGg6IGFueTtcbiAgICBkaXNwbGF5TW9udGhOdW1iZXI6IG51bWJlcjtcbiAgICBkaXNwbGF5TW9udGhzOiBBcnJheTxhbnk+O1xuICAgIGRpc3BsYXlTdGFydERlY2FkZTogbnVtYmVyO1xuICAgIGRpc3BsYXlXZWVkRGF5czogQXJyYXk8YW55PjtcbiAgICBkaXNwbGF5WWVhcjogbnVtYmVyO1xuICAgIG1vbnRoVmlzaWJsZTogYm9vbGVhbjtcbiAgICBvdmVybGF5SW52aXNpYmxlOiBib29sZWFuO1xuICAgIHZpc2libGU6IGJvb2xlYW47XG4gICAgeWVhclZpc2libGU6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBjdXJyZW50TW9udGhOdW1iZXI7XG4gICAgcHJpdmF0ZSBpc01vYmlsZTtcbiAgICBwcml2YXRlIGxhc3REaXNwbGF5O1xuICAgIHByaXZhdGUgdG9kYXk7XG4gICAgZWxEYXlzOiBFbGVtZW50UmVmO1xuICAgIGVsTW9udGhzOiBFbGVtZW50UmVmO1xuICAgIGVsWWVhcnM6IEVsZW1lbnRSZWY7XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIERhdGEgbcOheGltYSBwb3Nzw612ZWwgZGUgc2VyIHNlbGVjaW9uYWRhIG5vIGNhbGVuZMOhcmlvLlxuICAgICAqL1xuICAgIHNldCBkYXRlRW5kKHZhbDogRGF0ZSk7XG4gICAgZ2V0IGRhdGVFbmQoKTogRGF0ZTtcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogSWRpb21hIGRvIGNhbGVuZMOhcmlvLlxuICAgICAqXG4gICAgICogVmFsb3JlcyB2w6FsaWRvczpcbiAgICAgKiAgLSBgcHRgXG4gICAgICogIC0gYGVuYFxuICAgICAqICAtIGBlc2BcbiAgICAgKi9cbiAgICBzZXQgbG9jYWxlKGxvY2FsZTogc3RyaW5nKTtcbiAgICBnZXQgbG9jYWxlKCk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogRGF0YSBzZWxlY2lvbmFkYSBubyBjYWxlbmTDoXJpby5cbiAgICAgKi9cbiAgICBzZXQgc2VsZWN0ZWREYXRlKHNlbGVjdGVkRGF0ZTogRGF0ZSk7XG4gICAgZ2V0IHNlbGVjdGVkRGF0ZSgpOiBEYXRlO1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBEYXRhIG3DrW5pbWEgcG9zc8OtdmVsIGRlIHNlciBzZWxlY2lvbmFkYSBubyBjYWxlbmTDoXJpby5cbiAgICAgKi9cbiAgICBzZXQgZGF0ZVN0YXJ0KHZhbDogRGF0ZSk7XG4gICAgZ2V0IGRhdGVTdGFydCgpOiBEYXRlO1xuICAgIHNlbGVjdGVkRGF0ZUNoYW5nZTogRXZlbnRFbWl0dGVyPERhdGU+O1xuICAgIHN1Ym1pdDogRXZlbnRFbWl0dGVyPERhdGU+O1xuICAgIGNvbnN0cnVjdG9yKHBvQ2FsZW5kYXJTZXJ2aWNlOiBQb0NhbGVuZGFyU2VydmljZSwgcG9DYWxlbmRhckxhbmdTZXJ2aWNlOiBQb0NhbGVuZGFyTGFuZ1NlcnZpY2UpO1xuICAgIGNsb3NlKCk6IHZvaWQ7XG4gICAgZ2V0QXJyYXlEZWNhZGUoeWVhcjogYW55KTogdm9pZDtcbiAgICBnZXRCYWNrZ3JvdW5kQ29sb3IoZGlzcGxheVZhbHVlOiBudW1iZXIsIHByb3BlcnR5VmFsdWU6IG51bWJlcik6IFwicG8tY2FsZW5kYXItYm94LWJhY2tncm91bmQtc2VsZWN0ZWRcIiB8IFwicG8tY2FsZW5kYXItYm94LWJhY2tncm91bmRcIjtcbiAgICBnZXREYXlCYWNrZ3JvdW5kQ29sb3IoZGF0ZTogRGF0ZSk6IFwiXCIgfCBcInBvLWNhbGVuZGFyLWJveC1iYWNrZ3JvdW5kLXNlbGVjdGVkXCIgfCBcInBvLWNhbGVuZGFyLWJveC1iYWNrZ3JvdW5kXCIgfCBcInBvLWNhbGVuZGFyLWJveC1iYWNrZ3JvdW5kLXRvZGF5XCIgfCBcInBvLWNhbGVuZGFyLWJveC1iYWNrZ3JvdW5kLWRpc2FibGVkXCI7XG4gICAgZ2V0RGF5Rm9yZWdyb3VuZENvbG9yKGRhdGU6IERhdGUpOiBcInBvLWNhbGVuZGFyLWJveC1mb3JlZ3JvdW5kLXNlbGVjdGVkXCIgfCBcInBvLWNhbGVuZGFyLWJveC1mb3JlZ3JvdW5kXCIgfCBcInBvLWNhbGVuZGFyLWJveC1mb3JlZ3JvdW5kLXRvZGF5XCIgfCBcInBvLWNhbGVuZGFyLWJveC1mb3JlZ3JvdW5kLWRpc2FibGVkXCI7XG4gICAgZ2V0Rm9yZWdyb3VuZENvbG9yKGRpc3BsYXlWYWx1ZTogbnVtYmVyLCBwcm9wZXJ0eVZhbHVlOiBudW1iZXIpOiBcInBvLWNhbGVuZGFyLWJveC1mb3JlZ3JvdW5kLXNlbGVjdGVkXCIgfCBcInBvLWNhbGVuZGFyLWJveC1mb3JlZ3JvdW5kXCI7XG4gICAgZ2V0V29yZE1vbnRoKCk6IGFueTtcbiAgICBnZXRXb3JkWWVhcigpOiBhbnk7XG4gICAgaW5pdCgpOiB2b2lkO1xuICAgIGluaXRpYWxpemVMYW5ndWFnZSgpOiB2b2lkO1xuICAgIG9uTmV4dE1vbnRoKCk6IHZvaWQ7XG4gICAgb25QcmV2TW9udGgoKTogdm9pZDtcbiAgICBvblNlbGVjdERhdGUoZGF0ZTogRGF0ZSk6IHZvaWQ7XG4gICAgb25TZWxlY3RNb250aCh5ZWFyOiBudW1iZXIsIG1vbnRoOiBudW1iZXIpOiB2b2lkO1xuICAgIG9uU2VsZWN0WWVhcih5ZWFyOiBudW1iZXIsIG1vbnRoOiBudW1iZXIpOiB2b2lkO1xuICAgIHNlbGVjdERheSgpOiB2b2lkO1xuICAgIHNlbGVjdE1vbnRoKCk6IHZvaWQ7XG4gICAgc2VsZWN0WWVhcigpOiB2b2lkO1xuICAgIHNldE1vYmlsZVZpc3VhbGl6YXRpb24oKTogXCJwby1jYWxlbmRhclwiIHwgXCJwby1jYWxlbmRhciBwby1jYWxlbmRhci1tb2JpbGVcIjtcbiAgICB1cGRhdGVZZWFyKHZhbHVlOiBudW1iZXIpOiB2b2lkO1xuICAgIHByaXZhdGUgYWRkQWxsWWVhcnNJbkRlY2FkZTtcbiAgICBwcml2YXRlIGVxdWFsc0RhdGU7XG4gICAgcHJpdmF0ZSB1cGRhdGVEYXRlO1xuICAgIHByaXZhdGUgdXBkYXRlRGVjYWRlO1xuICAgIHByaXZhdGUgdXBkYXRlRGlzcGxheTtcbn1cbiJdfQ==