import { EventEmitter, OnInit } from '@angular/core';
import { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';
import { PoMask } from '../po-input/po-mask';
import { PoDatepickerIsoFormat } from './enums/po-datepicker-iso-format.enum';
/**
 * @description
 *
 * O `po-datepicker` é um componente específico para manipulação de datas permitindo a digitação e / ou seleção.
 *
 * O formato de exibição da data, ou seja, o formato que é apresentado ao usuário é o dd/mm/yyyy,
 * mas podem ser definidos outros padrões (veja mais na propriedade `p-format`).
 *
 * O idioma padrão do calendário será exibido de acordo com o navegador, caso tenha necessidade de alterar
 * use a propriedade `p-locale`.
 *
 * O datepicker aceita três formatos de data: o E8601DZw (yyyy-mm-ddThh:mm:ss+|-hh:mm), o E8601DAw (yyyy-mm-dd) e o
 * Date padrão do Javascript.
 *
 * > Por padrão, o formato de saída do *model* se ajustará conforme o formato de entrada. Se por acaso precisar controlar o valor de saída,
 * a propriedade `p-iso-format` provê esse controle independentemente do formato de entrada. Veja abaixo os formatos disponíveis:
 *
 * - Formato de entrada e saída (E8601DZw) - `'2017-11-28T00:00:00-02:00'`;
 *
 * - Formato de entrada e saída (E8601DAw) - `'2017-11-28'`;
 *
 * - Formato de entrada (Date) - `new Date(2017, 10, 28)` e saída (E8601DAw) - `'2017-11-28'`;
 *
 * **Importante:**
 *
 * - Para utilizar datas com ano inferior a 100, verificar o comportamento do [`new Date`](https://www.w3schools.com/js/js_dates.asp)
 * e utilizar o método [`setFullYear`](https://www.w3schools.com/jsref/jsref_setfullyear.asp).
 * - Caso a data esteja inválida, o `model` receberá **'Data inválida'**.
 * - Caso o `input` esteja passando um `[(ngModel)]`, mas não tenha um `name`, então irá ocorrer um erro
 * do próprio Angular (`[ngModelOptions]="{standalone: true}"`).
 *
 * Exemplo:
 *
 * ```
 * <po-datepicker
 *   [(ngModel)]="pessoa.nome"
 *   [ngModelOptions]="{standalone: true}"
 * </po-datepicker>
 * ```
 *
 * > Não esqueça de importar o `FormsModule` em seu módulo, tal como para utilizar o `input default`.
 */
import * as ɵngcc0 from '@angular/core';
export declare abstract class PoDatepickerBaseComponent implements ControlValueAccessor, OnInit, Validator {
    private _format?;
    private _isoFormat;
    private _maxDate;
    private _minDate;
    private _noAutocomplete?;
    private _placeholder?;
    protected date: Date;
    protected firstStart: boolean;
    protected hour: string;
    protected isExtendedISO: boolean;
    protected objMask: any;
    protected onChangeModel: any;
    protected onTouchedModel: any;
    protected validatorChange: any;
    /**
     * @optional
     *
     * @description
     *
     * Aplica foco no elemento ao ser iniciado.
     *
     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
     *
     * @default `false`
     */
    autoFocus: boolean;
    name: string;
    /**
     * @optional
     *
     * @description
     *
     * Define a propriedade nativa `autocomplete` do campo como `off`.
     *
     * @default `false`
     */
    set noAutocomplete(value: boolean);
    get noAutocomplete(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Mensagem que aparecerá enquanto o campo não estiver preenchido.
     */
    set placeholder(placeholder: string);
    get placeholder(): string;
    /**
     * @optional
     *
     * @description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * @default `false`
     */
    optional: boolean;
    /** Desabilita o campo. */
    disabled?: boolean;
    set setDisabled(disabled: string);
    /** Torna o elemento somente leitura. */
    readonly?: boolean;
    set setReadonly(readonly: string);
    /** Faz com que o campo seja obrigatório. */
    required?: boolean;
    set setRequired(required: string);
    /** Habilita ação para limpar o campo. */
    clean?: boolean;
    set setClean(clean: string);
    /**
     * Mensagem apresentada quando a data for inválida ou fora do período.
     *
     * > Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja obrigatório.
     */
    errorPattern?: string;
    /**
     * @optional
     *
     * @description
     *
     * Define uma data mínima para o `po-datepicker`.
     */
    set minDate(value: string | Date);
    get minDate(): string | Date;
    /**
     * @optional
     *
     * @description
     *
     * Define uma data máxima para o `po-datepicker`.
     */
    set maxDate(value: string | Date);
    get maxDate(): string | Date;
    /**
     * @optional
     *
     * @description
     *
     * Formato de exibição da data.
     *
     * Valores válidos:
     *  - `dd/mm/yyyy`
     *  - `mm/dd/yyyy`
     *  - `yyyy/mm/dd`
     *
     * @default `dd/mm/yyyy`
     */
    set format(value: string);
    get format(): string;
    /**
     * @optional
     *
     * @description
     *
     * Padrão de formatação para saída do *model*, independentemente do formato de entrada.
     *
     * > Veja os valores válidos no *enum* `PoDatepickerIsoFormat`.
     */
    set isoFormat(value: PoDatepickerIsoFormat);
    get isoFormat(): PoDatepickerIsoFormat;
    /**
     * @optional
     *
     * @description
     *
     * Idioma do Datepicker.
     *
     * Valores válidos:
     *  - `pt`
     *  - `en`
     *  - `es`
     */
    _locale?: string;
    set locale(value: string);
    get locale(): string;
    /** Evento disparado ao sair do campo. */
    onblur?: EventEmitter<any>;
    /** Evento disparado ao alterar valor do campo. */
    onchange?: EventEmitter<any>;
    constructor();
    abstract writeValue(value: any): void;
    abstract refreshValue(value: Date): void;
    ngOnInit(): void;
    getDateFromString(dateString: string): Date;
    formatToDate(value: Date): string;
    controlModel(date: Date): void;
    callOnChange(value: any, retry?: boolean): void;
    registerOnChange(func: any): void;
    registerOnTouched(func: any): void;
    registerOnValidatorChange(fn: () => void): void;
    protected validateModel(model: any): void;
    protected buildMask(): PoMask;
    validate(c: AbstractControl): {
        [key: string]: any;
    };
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoDatepickerBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoDatepickerBaseComponent, never, never, { "autoFocus": "p-auto-focus"; "errorPattern": "p-error-pattern"; "noAutocomplete": "p-no-autocomplete"; "placeholder": "p-placeholder"; "setDisabled": "p-disabled"; "setReadonly": "p-readonly"; "setRequired": "p-required"; "setClean": "p-clean"; "minDate": "p-min-date"; "maxDate": "p-max-date"; "format": "p-format"; "isoFormat": "p-iso-format"; "locale": "p-locale"; "name": "name"; "optional": "p-optional"; }, { "onblur": "p-blur"; "onchange": "p-change"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,