import { EventEmitter } from '@angular/core';
import { PoComponentInjectorService } from '../../../../services/po-component-injector/po-component-injector.service';
import { PoLookupColumn } from '../../../../components/po-field/po-lookup/interfaces/po-lookup-column.interface';
import { PoLookupFilter } from '../../../../components/po-field/po-lookup/interfaces/po-lookup-filter.interface';
import { PoLookupLiterals } from '../interfaces/po-lookup-literals.interface';
/**
 * @docsPrivate
 *
 * Serviço responsável por controlar a abertura do componente Po Lookup Modal.
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoLookupModalService {
    private poComponentInjector;
    private componentRef;
    selectValueEvent: EventEmitter<any>;
    constructor(poComponentInjector: PoComponentInjectorService);
    /**
     * Método responsável por abrir a modal de busca das informações.
     *
     * @param service {PoLookupFilter} Serviço responsável por realizar a busca no serviço dos dados.
     * @param columns {Array<PoLookupColumn>} Definição das colunas na modal de busca.
     * @param filterParams {any} Valor que será repassado aos métodos do serviço para auxiliar no filtro dos dados.
     * @param title {string} Definição do título da modal.
     * @param literals {PoLookupLiterals} Literais utilizadas no componente.
     */
    openModal(params: {
        service: PoLookupFilter;
        columns: Array<PoLookupColumn>;
        filterParams: any;
        title: string;
        literals: PoLookupLiterals;
    }): void;
    selectValue(value: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoLookupModalService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<PoLookupModalService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbG9va3VwLW1vZGFsLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsicG8tbG9va3VwLW1vZGFsLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBvQ29tcG9uZW50SW5qZWN0b3JTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2VydmljZXMvcG8tY29tcG9uZW50LWluamVjdG9yL3BvLWNvbXBvbmVudC1pbmplY3Rvci5zZXJ2aWNlJztcbmltcG9ydCB7IFBvTG9va3VwQ29sdW1uIH0gZnJvbSAnLi4vLi4vLi4vLi4vY29tcG9uZW50cy9wby1maWVsZC9wby1sb29rdXAvaW50ZXJmYWNlcy9wby1sb29rdXAtY29sdW1uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb0xvb2t1cEZpbHRlciB9IGZyb20gJy4uLy4uLy4uLy4uL2NvbXBvbmVudHMvcG8tZmllbGQvcG8tbG9va3VwL2ludGVyZmFjZXMvcG8tbG9va3VwLWZpbHRlci5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9Mb29rdXBMaXRlcmFscyB9IGZyb20gJy4uL2ludGVyZmFjZXMvcG8tbG9va3VwLWxpdGVyYWxzLmludGVyZmFjZSc7XG4vKipcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIFNlcnZpw6dvIHJlc3BvbnPDoXZlbCBwb3IgY29udHJvbGFyIGEgYWJlcnR1cmEgZG8gY29tcG9uZW50ZSBQbyBMb29rdXAgTW9kYWwuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBvTG9va3VwTW9kYWxTZXJ2aWNlIHtcbiAgICBwcml2YXRlIHBvQ29tcG9uZW50SW5qZWN0b3I7XG4gICAgcHJpdmF0ZSBjb21wb25lbnRSZWY7XG4gICAgc2VsZWN0VmFsdWVFdmVudDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgY29uc3RydWN0b3IocG9Db21wb25lbnRJbmplY3RvcjogUG9Db21wb25lbnRJbmplY3RvclNlcnZpY2UpO1xuICAgIC8qKlxuICAgICAqIE3DqXRvZG8gcmVzcG9uc8OhdmVsIHBvciBhYnJpciBhIG1vZGFsIGRlIGJ1c2NhIGRhcyBpbmZvcm1hw6fDtWVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNlcnZpY2Uge1BvTG9va3VwRmlsdGVyfSBTZXJ2acOnbyByZXNwb25zw6F2ZWwgcG9yIHJlYWxpemFyIGEgYnVzY2Egbm8gc2VydmnDp28gZG9zIGRhZG9zLlxuICAgICAqIEBwYXJhbSBjb2x1bW5zIHtBcnJheTxQb0xvb2t1cENvbHVtbj59IERlZmluacOnw6NvIGRhcyBjb2x1bmFzIG5hIG1vZGFsIGRlIGJ1c2NhLlxuICAgICAqIEBwYXJhbSBmaWx0ZXJQYXJhbXMge2FueX0gVmFsb3IgcXVlIHNlcsOhIHJlcGFzc2FkbyBhb3MgbcOpdG9kb3MgZG8gc2VydmnDp28gcGFyYSBhdXhpbGlhciBubyBmaWx0cm8gZG9zIGRhZG9zLlxuICAgICAqIEBwYXJhbSB0aXRsZSB7c3RyaW5nfSBEZWZpbmnDp8OjbyBkbyB0w610dWxvIGRhIG1vZGFsLlxuICAgICAqIEBwYXJhbSBsaXRlcmFscyB7UG9Mb29rdXBMaXRlcmFsc30gTGl0ZXJhaXMgdXRpbGl6YWRhcyBubyBjb21wb25lbnRlLlxuICAgICAqL1xuICAgIG9wZW5Nb2RhbChwYXJhbXM6IHtcbiAgICAgICAgc2VydmljZTogUG9Mb29rdXBGaWx0ZXI7XG4gICAgICAgIGNvbHVtbnM6IEFycmF5PFBvTG9va3VwQ29sdW1uPjtcbiAgICAgICAgZmlsdGVyUGFyYW1zOiBhbnk7XG4gICAgICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgICAgIGxpdGVyYWxzOiBQb0xvb2t1cExpdGVyYWxzO1xuICAgIH0pOiB2b2lkO1xuICAgIHNlbGVjdFZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xufVxuIl19