import { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';
import { EventEmitter, OnInit } from '@angular/core';
import { PoComboFilter } from './interfaces/po-combo-filter.interface';
import { PoComboFilterMode } from './po-combo-filter-mode.enum';
import { PoComboFilterService } from './po-combo-filter.service';
import { PoComboGroup } from './interfaces/po-combo-group.interface';
import { PoComboLiterals } from './interfaces/po-combo-literals.interface';
import { PoComboOption } from './interfaces/po-combo-option.interface';
import { PoComboOptionGroup } from './interfaces/po-combo-option-group.interface';
import * as ɵngcc0 from '@angular/core';
export declare const poComboLiteralsDefault: {
    en: PoComboLiterals;
    es: PoComboLiterals;
    pt: PoComboLiterals;
    ru: PoComboLiterals;
};
/**
 * @description
 *
 * O `po-combo` exibe uma lista de opções com fácil seleção e filtragem.
 *
 * Além da exibição padrão, nele é possível listar as opões em agrupamentos.
 *
 * É possível selecionar e navegar entre as opções da lista tanto através do *mouse* quanto do teclado. No teclado navegue com
 * as setas e pressione *Enter* na opção que desejar.
 *
 * Com ele também é possível definir uma lista à partir da requisição de um serviço definido em `p-filter-service`.
 *
 * Em `p-filter-mode`, o filtro poderá ser configurado para buscar opões que correspondam ao início, fim ou que contenha o valor digitado.
 *
 * O `po-combo` guarda o último valor caso o usuário desista de uma busca, deixando o campo ou pressionando *Esc*. Caso seja digitado no
 * campo de busca a descrição completa de um item, então a seleção será automaticamente efetuada ao deixar o campo ou pressionando *Enter*.
 */
export declare abstract class PoComboBaseComponent implements ControlValueAccessor, OnInit, Validator {
    private _changeOnEnter?;
    private _debounceTime?;
    private _disabled?;
    private _disabledInitFilter?;
    private _fieldLabel?;
    private _fieldValue?;
    private _filterMinlength?;
    private _filterMode?;
    private _filterParams?;
    private _literals?;
    private _options;
    private _required?;
    private _sort?;
    protected cacheStaticOptions: Array<PoComboOption | PoComboGroup>;
    protected comboOptionsList: Array<PoComboOption | PoComboGroup>;
    cacheOptions: Array<PoComboOption | PoComboGroup>;
    defaultService: PoComboFilterService;
    firstInWriteValue: boolean;
    isFirstFilter: boolean;
    isFiltering: boolean;
    keyupSubscribe: any;
    onModelChange: any;
    onModelTouched: any;
    previousSearchValue: string;
    selectedOption: PoComboOption | PoComboGroup;
    selectedValue: any;
    selectedView: any;
    service: PoComboFilterService;
    visibleOptions: Array<PoComboOption | PoComboGroup>;
    private validatorChange;
    /**
     * @optional
     *
     * @description
     *
     * Aplica foco no elemento ao ser iniciado.
     *
     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
     *
     * @default `false`
     */
    autoFocus: boolean;
    /** Label no componente. */
    label?: string;
    /** Texto de apoio para o campo. */
    help?: string;
    /** Mensagem apresentada enquanto o campo estiver vazio. */
    placeholder?: string;
    /** Nome do componente. */
    name: string;
    /**
     * @optional
     *
     * @description
     * Nesta propriedade deve ser informada a URL do serviço em que será realizado o filtro para carregamento da lista de
     * itens no componente.
     * Caso haja a necessidade de customização, então pode ser informado um serviço implementando a interface PoComboFilter.
     *
     * Caso utilizado uma URL, o serviço deve ser retornado no padrão API TOTVS e utiliza as propriedades
     * `p-field-label` e `p-field-value` para a construção da lista de itens.
     *
     * Quando utilizada uma URL de serviço, então será concatenada nesta URL o valor que deseja-se filtrar da seguinte forma:
     * ```
     * url + ?filter=Peter
     * ```
     *
     * Se for definida a propriedade `p-filter-params`, a mesma também será concatenada. Por exemplo, para o
     * parâmetro `{ age: 23 }` a URL ficaria:
     *
     * ```
     * url + ?page=1&pageSize=20&age=23&filter=Peter
     * ```
     */
    filterService: PoComboFilter | string;
    /**
     * @optional
     *
     * @description
     * Esta propriedade define em quanto tempo (em milissegundos), aguarda para acionar o evento de filtro após cada pressionamento de tecla.
     * Será utilizada apenas quando houver serviço (`p-filter-service`).
     *
     * @default `400`
     */
    set debounceTime(value: number);
    get debounceTime(): number;
    /**
     * @optional
     *
     * @description
     * Desabilita o filtro inicial no serviço, que é executado no primeiro clique no campo.
     *
     * @default `false`
     *
     */
    set disabledInitFilter(value: boolean);
    get disabledInitFilter(): boolean;
    /**
     * @optional
     *
     * @description
     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
     * (`p-options`), esta propriedade será responsável pelo valor de cada item da lista.
     *
     * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
     * PoComboOption.
     *
     * @default `value`
     */
    set fieldValue(value: string);
    get fieldValue(): string;
    /**
     * @optional
     *
     * @description
     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente
     * (`p-options`), esta propriedade será responsável pelo texto de apresentação de cada item da lista.
     *
     * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface
     * PoComboOption.
     *
     * @default `label`
     */
    set fieldLabel(value: string);
    get fieldLabel(): string;
    /**
     * @optional
     *
     * @description
     * Valor mínimo de caracteres para realizar o filtro no serviço.
     *
     * @default `0`
     */
    set filterMinlength(value: number);
    get filterMinlength(): number;
    /**
     * @optional
     *
     * @description
     * Indica que o campo será obrigatório.
     *
     * @default `false`
     */
    set required(required: boolean);
    get required(): boolean;
    /**
     * @optional
     *
     * @description
     * Indica que o evento `p-change` só será disparado ao clicar ou pressionar a tecla "Enter" sobre uma opção selecionada.
     *
     * @default `false`
     */
    set changeOnEnter(changeOnEnter: boolean);
    get changeOnEnter(): boolean;
    /**
     * @optional
     *
     * @description
     * Indica que o campo será desabilitado.
     *
     * @default `false`
     */
    set disabled(disabled: boolean);
    get disabled(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Define o ícone que será exibido no início do campo.
     *
     * > Veja a disponibilidade de ícones em [biblioteca de ícones](guides/icons).
     */
    icon?: string;
    /** Indica que a lista definida na propriedade p-options será ordenada pela descrição. */
    set sort(sort: boolean);
    get sort(): boolean;
    /**
     * Nesta propriedade define a lista de opções do `po-combo`.
     *
     * > A lista pode ser definida em dois formatos, simples ou com agrupamentos.
     * - Utilize `PoComboOption` para lista de opções simples.
     * - Utilize `PoComboOptionGroup` para lista de opções com agrupamento.
     *
     * **Importante:**
     * - A lista deve seguir as definições descritas nas respectivas interfaces, caso contrário não exibirá a(as) opção(ões) fora dos padrões.
     * - O componente interpretará o formato da lista de acordo com a interface utilizada e só exibirá as opções correspondentes à ela.
     * - Um agrupamento só será exibido se houver pelo menos uma opção válida.
     */
    set options(options: Array<PoComboOption | PoComboOptionGroup>);
    get options(): Array<PoComboOption | PoComboOptionGroup>;
    /**
     * @optional
     *
     * @description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * @default `false`
     */
    optional: boolean;
    /**
     * @optional
     *
     * @description
     *
     * Define o modo de pesquisa utilizado no filtro da lista de seleção: `startsWith`, `contains` ou `endsWith`.
     *
     * > Quando utilizar a propriedade `p-filter-service` esta propriedade será ignorada.
     *
     * @default `startsWith`
     */
    set filterMode(filterMode: PoComboFilterMode);
    get filterMode(): PoComboFilterMode;
    /**
     * @optional
     *
     * @description
     *
     * Valor que será repassado como parâmetro para a URL ou aos métodos do serviço que implementam a interface *PoComboFilter*.
     *
     * > Caso a lista contenha agrupamentos, os mesmos só serão exibidos se houver no mínimo uma opção que corresponda à pesquisa.
     */
    set filterParams(filterParams: any);
    get filterParams(): any;
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-combo`.
     *
     * Para utilizar basta passar a literal que deseja customizar:
     *
     * ```
     *  const customLiterals: PoComboLiterals = {
     *    noData: 'Nenhum valor'
     *  };
     * ```
     *
     * E para carregar a literal customizada, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-combo
     *   [p-literals]="customLiterals">
     * </po-combo>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
     */
    set literals(value: PoComboLiterals);
    get literals(): PoComboLiterals;
    /** Deve ser informada uma função que será disparada quando houver alterações no ngModel. */
    change?: EventEmitter<any>;
    ngModelChange?: EventEmitter<any>;
    abstract setInputValue(value: any): void;
    abstract applyFilter(value: string): void;
    abstract getObjectByValue(value: string): void;
    abstract getInputValue(): string;
    abstract initInputObservable(): void;
    get isOptionGroupList(): boolean;
    ngOnInit(): void;
    onInitService(): void;
    setService(service: PoComboFilter | string): void;
    compareMethod(search: string, option: PoComboOption | PoComboGroup, filterMode: PoComboFilterMode): boolean;
    startsWith(search: string, option: PoComboOption | PoComboGroup): boolean;
    contains(search: string, option: PoComboOption | PoComboGroup): boolean;
    endsWith(search: string, option: PoComboOption | PoComboGroup): boolean;
    getOptionFromValue(value: any, options: any): any;
    getOptionFromLabel(label: any, options: any): any;
    updateSelectedValue(option: PoComboOption | PoComboGroup, isUpdateModel?: boolean, isWriteValue?: boolean): void;
    callModelChange(value: any): any;
    isEqual(value: any, inputValue: any): boolean;
    searchForLabel(search: string, options: Array<PoComboOption | PoComboGroup>, filterMode: PoComboFilterMode): void;
    updateComboList(options?: Array<PoComboOption | PoComboGroup>): void;
    getNextOption(value: any, options: Array<PoComboOption | PoComboGroup>, reverse?: boolean): any;
    getIndexSelectedView(): number;
    compareObjects(obj1: any, obj2: any): boolean;
    verifyValidOption(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    registerOnValidatorChange(fn: () => void): void;
    validate(abstractControl: AbstractControl): {
        [key: string]: any;
    };
    protected configAfterSetFilterService(service: PoComboFilter | string): void;
    protected unsubscribeKeyupObservable(): void;
    protected validateModel(model: any): void;
    private comboListDefinitions;
    private compareOptions;
    private hasDuplicatedOption;
    private listingComboOptions;
    private sortOptions;
    private validateValue;
    private verifyComboOptions;
    private verifyComboOptionsGroup;
    private verifyIfHasLabel;
    private updateInternalVariables;
    private updateModel;
    private updateSelectedValueWithOldOption;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoComboBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoComboBaseComponent, never, never, { "autoFocus": "p-auto-focus"; "placeholder": "p-placeholder"; "debounceTime": "p-debounce-time"; "disabledInitFilter": "p-disabled-init-filter"; "fieldValue": "p-field-value"; "fieldLabel": "p-field-label"; "filterMinlength": "p-filter-minlength"; "required": "p-required"; "changeOnEnter": "p-change-on-enter"; "disabled": "p-disabled"; "sort": "p-sort"; "options": "p-options"; "filterMode": "p-filter-mode"; "filterParams": "p-filter-params"; "literals": "p-literals"; "label": "p-label"; "help": "p-help"; "name": "name"; "filterService": "p-filter-service"; "icon": "p-icon"; "optional": "p-optional"; }, { "change": "p-change"; "ngModelChange": "ngModelChange"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY29tYm8tYmFzZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicG8tY29tYm8tYmFzZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wsIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBWYWxpZGF0b3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUG9Db21ib0ZpbHRlciB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1jb21iby1maWx0ZXIuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvQ29tYm9GaWx0ZXJNb2RlIH0gZnJvbSAnLi9wby1jb21iby1maWx0ZXItbW9kZS5lbnVtJztcbmltcG9ydCB7IFBvQ29tYm9GaWx0ZXJTZXJ2aWNlIH0gZnJvbSAnLi9wby1jb21iby1maWx0ZXIuc2VydmljZSc7XG5pbXBvcnQgeyBQb0NvbWJvR3JvdXAgfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tY29tYm8tZ3JvdXAuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvQ29tYm9MaXRlcmFscyB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1jb21iby1saXRlcmFscy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9Db21ib09wdGlvbiB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1jb21iby1vcHRpb24uaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvQ29tYm9PcHRpb25Hcm91cCB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1jb21iby1vcHRpb24tZ3JvdXAuaW50ZXJmYWNlJztcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IHBvQ29tYm9MaXRlcmFsc0RlZmF1bHQ6IHtcbiAgICBlbjogUG9Db21ib0xpdGVyYWxzO1xuICAgIGVzOiBQb0NvbWJvTGl0ZXJhbHM7XG4gICAgcHQ6IFBvQ29tYm9MaXRlcmFscztcbiAgICBydTogUG9Db21ib0xpdGVyYWxzO1xufTtcbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogTyBgcG8tY29tYm9gIGV4aWJlIHVtYSBsaXN0YSBkZSBvcMOnw7VlcyBjb20gZsOhY2lsIHNlbGXDp8OjbyBlIGZpbHRyYWdlbS5cbiAqXG4gKiBBbMOpbSBkYSBleGliacOnw6NvIHBhZHLDo28sIG5lbGUgw6kgcG9zc8OtdmVsIGxpc3RhciBhcyBvcMO1ZXMgZW0gYWdydXBhbWVudG9zLlxuICpcbiAqIMOJIHBvc3PDrXZlbCBzZWxlY2lvbmFyIGUgbmF2ZWdhciBlbnRyZSBhcyBvcMOnw7VlcyBkYSBsaXN0YSB0YW50byBhdHJhdsOpcyBkbyAqbW91c2UqIHF1YW50byBkbyB0ZWNsYWRvLiBObyB0ZWNsYWRvIG5hdmVndWUgY29tXG4gKiBhcyBzZXRhcyBlIHByZXNzaW9uZSAqRW50ZXIqIG5hIG9ww6fDo28gcXVlIGRlc2VqYXIuXG4gKlxuICogQ29tIGVsZSB0YW1iw6ltIMOpIHBvc3PDrXZlbCBkZWZpbmlyIHVtYSBsaXN0YSDDoCBwYXJ0aXIgZGEgcmVxdWlzacOnw6NvIGRlIHVtIHNlcnZpw6dvIGRlZmluaWRvIGVtIGBwLWZpbHRlci1zZXJ2aWNlYC5cbiAqXG4gKiBFbSBgcC1maWx0ZXItbW9kZWAsIG8gZmlsdHJvIHBvZGVyw6Egc2VyIGNvbmZpZ3VyYWRvIHBhcmEgYnVzY2FyIG9ww7VlcyBxdWUgY29ycmVzcG9uZGFtIGFvIGluw61jaW8sIGZpbSBvdSBxdWUgY29udGVuaGEgbyB2YWxvciBkaWdpdGFkby5cbiAqXG4gKiBPIGBwby1jb21ib2AgZ3VhcmRhIG8gw7psdGltbyB2YWxvciBjYXNvIG8gdXN1w6FyaW8gZGVzaXN0YSBkZSB1bWEgYnVzY2EsIGRlaXhhbmRvIG8gY2FtcG8gb3UgcHJlc3Npb25hbmRvICpFc2MqLiBDYXNvIHNlamEgZGlnaXRhZG8gbm9cbiAqIGNhbXBvIGRlIGJ1c2NhIGEgZGVzY3Jpw6fDo28gY29tcGxldGEgZGUgdW0gaXRlbSwgZW50w6NvIGEgc2VsZcOnw6NvIHNlcsOhIGF1dG9tYXRpY2FtZW50ZSBlZmV0dWFkYSBhbyBkZWl4YXIgbyBjYW1wbyBvdSBwcmVzc2lvbmFuZG8gKkVudGVyKi5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgYWJzdHJhY3QgY2xhc3MgUG9Db21ib0Jhc2VDb21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciwgT25Jbml0LCBWYWxpZGF0b3Ige1xuICAgIHByaXZhdGUgX2NoYW5nZU9uRW50ZXI/O1xuICAgIHByaXZhdGUgX2RlYm91bmNlVGltZT87XG4gICAgcHJpdmF0ZSBfZGlzYWJsZWQ/O1xuICAgIHByaXZhdGUgX2Rpc2FibGVkSW5pdEZpbHRlcj87XG4gICAgcHJpdmF0ZSBfZmllbGRMYWJlbD87XG4gICAgcHJpdmF0ZSBfZmllbGRWYWx1ZT87XG4gICAgcHJpdmF0ZSBfZmlsdGVyTWlubGVuZ3RoPztcbiAgICBwcml2YXRlIF9maWx0ZXJNb2RlPztcbiAgICBwcml2YXRlIF9maWx0ZXJQYXJhbXM/O1xuICAgIHByaXZhdGUgX2xpdGVyYWxzPztcbiAgICBwcml2YXRlIF9vcHRpb25zO1xuICAgIHByaXZhdGUgX3JlcXVpcmVkPztcbiAgICBwcml2YXRlIF9zb3J0PztcbiAgICBwcm90ZWN0ZWQgY2FjaGVTdGF0aWNPcHRpb25zOiBBcnJheTxQb0NvbWJvT3B0aW9uIHwgUG9Db21ib0dyb3VwPjtcbiAgICBwcm90ZWN0ZWQgY29tYm9PcHRpb25zTGlzdDogQXJyYXk8UG9Db21ib09wdGlvbiB8IFBvQ29tYm9Hcm91cD47XG4gICAgY2FjaGVPcHRpb25zOiBBcnJheTxQb0NvbWJvT3B0aW9uIHwgUG9Db21ib0dyb3VwPjtcbiAgICBkZWZhdWx0U2VydmljZTogUG9Db21ib0ZpbHRlclNlcnZpY2U7XG4gICAgZmlyc3RJbldyaXRlVmFsdWU6IGJvb2xlYW47XG4gICAgaXNGaXJzdEZpbHRlcjogYm9vbGVhbjtcbiAgICBpc0ZpbHRlcmluZzogYm9vbGVhbjtcbiAgICBrZXl1cFN1YnNjcmliZTogYW55O1xuICAgIG9uTW9kZWxDaGFuZ2U6IGFueTtcbiAgICBvbk1vZGVsVG91Y2hlZDogYW55O1xuICAgIHByZXZpb3VzU2VhcmNoVmFsdWU6IHN0cmluZztcbiAgICBzZWxlY3RlZE9wdGlvbjogUG9Db21ib09wdGlvbiB8IFBvQ29tYm9Hcm91cDtcbiAgICBzZWxlY3RlZFZhbHVlOiBhbnk7XG4gICAgc2VsZWN0ZWRWaWV3OiBhbnk7XG4gICAgc2VydmljZTogUG9Db21ib0ZpbHRlclNlcnZpY2U7XG4gICAgdmlzaWJsZU9wdGlvbnM6IEFycmF5PFBvQ29tYm9PcHRpb24gfCBQb0NvbWJvR3JvdXA+O1xuICAgIHByaXZhdGUgdmFsaWRhdG9yQ2hhbmdlO1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBBcGxpY2EgZm9jbyBubyBlbGVtZW50byBhbyBzZXIgaW5pY2lhZG8uXG4gICAgICpcbiAgICAgKiA+IENhc28gbWFpcyBkZSB1bSBlbGVtZW50byBzZWphIGNvbmZpZ3VyYWRvIGNvbSBlc3NhIHByb3ByaWVkYWRlLCBhcGVuYXMgbyDDumx0aW1vIGVsZW1lbnRvIGRlY2xhcmFkbyBjb20gZWxhIHRlcsOhIG8gZm9jby5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICAgKi9cbiAgICBhdXRvRm9jdXM6IGJvb2xlYW47XG4gICAgLyoqIExhYmVsIG5vIGNvbXBvbmVudGUuICovXG4gICAgbGFiZWw/OiBzdHJpbmc7XG4gICAgLyoqIFRleHRvIGRlIGFwb2lvIHBhcmEgbyBjYW1wby4gKi9cbiAgICBoZWxwPzogc3RyaW5nO1xuICAgIC8qKiBNZW5zYWdlbSBhcHJlc2VudGFkYSBlbnF1YW50byBvIGNhbXBvIGVzdGl2ZXIgdmF6aW8uICovXG4gICAgcGxhY2Vob2xkZXI/OiBzdHJpbmc7XG4gICAgLyoqIE5vbWUgZG8gY29tcG9uZW50ZS4gKi9cbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBOZXN0YSBwcm9wcmllZGFkZSBkZXZlIHNlciBpbmZvcm1hZGEgYSBVUkwgZG8gc2VydmnDp28gZW0gcXVlIHNlcsOhIHJlYWxpemFkbyBvIGZpbHRybyBwYXJhIGNhcnJlZ2FtZW50byBkYSBsaXN0YSBkZVxuICAgICAqIGl0ZW5zIG5vIGNvbXBvbmVudGUuXG4gICAgICogQ2FzbyBoYWphIGEgbmVjZXNzaWRhZGUgZGUgY3VzdG9taXphw6fDo28sIGVudMOjbyBwb2RlIHNlciBpbmZvcm1hZG8gdW0gc2VydmnDp28gaW1wbGVtZW50YW5kbyBhIGludGVyZmFjZSBQb0NvbWJvRmlsdGVyLlxuICAgICAqXG4gICAgICogQ2FzbyB1dGlsaXphZG8gdW1hIFVSTCwgbyBzZXJ2acOnbyBkZXZlIHNlciByZXRvcm5hZG8gbm8gcGFkcsOjbyBBUEkgVE9UVlMgZSB1dGlsaXphIGFzIHByb3ByaWVkYWRlc1xuICAgICAqIGBwLWZpZWxkLWxhYmVsYCBlIGBwLWZpZWxkLXZhbHVlYCBwYXJhIGEgY29uc3RydcOnw6NvIGRhIGxpc3RhIGRlIGl0ZW5zLlxuICAgICAqXG4gICAgICogUXVhbmRvIHV0aWxpemFkYSB1bWEgVVJMIGRlIHNlcnZpw6dvLCBlbnTDo28gc2Vyw6EgY29uY2F0ZW5hZGEgbmVzdGEgVVJMIG8gdmFsb3IgcXVlIGRlc2VqYS1zZSBmaWx0cmFyIGRhIHNlZ3VpbnRlIGZvcm1hOlxuICAgICAqIGBgYFxuICAgICAqIHVybCArID9maWx0ZXI9UGV0ZXJcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFNlIGZvciBkZWZpbmlkYSBhIHByb3ByaWVkYWRlIGBwLWZpbHRlci1wYXJhbXNgLCBhIG1lc21hIHRhbWLDqW0gc2Vyw6EgY29uY2F0ZW5hZGEuIFBvciBleGVtcGxvLCBwYXJhIG9cbiAgICAgKiBwYXLDom1ldHJvIGB7IGFnZTogMjMgfWAgYSBVUkwgZmljYXJpYTpcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIHVybCArID9wYWdlPTEmcGFnZVNpemU9MjAmYWdlPTIzJmZpbHRlcj1QZXRlclxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGZpbHRlclNlcnZpY2U6IFBvQ29tYm9GaWx0ZXIgfCBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBFc3RhIHByb3ByaWVkYWRlIGRlZmluZSBlbSBxdWFudG8gdGVtcG8gKGVtIG1pbGlzc2VndW5kb3MpLCBhZ3VhcmRhIHBhcmEgYWNpb25hciBvIGV2ZW50byBkZSBmaWx0cm8gYXDDs3MgY2FkYSBwcmVzc2lvbmFtZW50byBkZSB0ZWNsYS5cbiAgICAgKiBTZXLDoSB1dGlsaXphZGEgYXBlbmFzIHF1YW5kbyBob3V2ZXIgc2VydmnDp28gKGBwLWZpbHRlci1zZXJ2aWNlYCkuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBgNDAwYFxuICAgICAqL1xuICAgIHNldCBkZWJvdW5jZVRpbWUodmFsdWU6IG51bWJlcik7XG4gICAgZ2V0IGRlYm91bmNlVGltZSgpOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBEZXNhYmlsaXRhIG8gZmlsdHJvIGluaWNpYWwgbm8gc2VydmnDp28sIHF1ZSDDqSBleGVjdXRhZG8gbm8gcHJpbWVpcm8gY2xpcXVlIG5vIGNhbXBvLlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgICAqXG4gICAgICovXG4gICAgc2V0IGRpc2FibGVkSW5pdEZpbHRlcih2YWx1ZTogYm9vbGVhbik7XG4gICAgZ2V0IGRpc2FibGVkSW5pdEZpbHRlcigpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogRGV2ZSBzZXIgaW5mb3JtYWRvIG8gbm9tZSBkYSBwcm9wcmllZGFkZSBkbyBvYmpldG8gcXVlIHNlcsOhIHV0aWxpemFkbyBwYXJhIGEgY29udmVyc8OjbyBkb3MgaXRlbnMgYXByZXNlbnRhZG9zIG5hIGxpc3RhIGRvIGNvbXBvbmVudGVcbiAgICAgKiAoYHAtb3B0aW9uc2ApLCBlc3RhIHByb3ByaWVkYWRlIHNlcsOhIHJlc3BvbnPDoXZlbCBwZWxvIHZhbG9yIGRlIGNhZGEgaXRlbSBkYSBsaXN0YS5cbiAgICAgKlxuICAgICAqIE5lY2Vzc8OhcmlvIHF1YW5kbyBpbmZvcm1hciBvIHNlcnZpw6dvIGNvbW8gVVJMIGUgbyBtZXNtbyBuw6NvIGVzdGl2ZXIgcmV0b3JuYW5kbyB1bWEgbGlzdGEgZGUgb2JqZXRvcyBubyBwYWRyw6NvIGRhIGludGVyZmFjZVxuICAgICAqIFBvQ29tYm9PcHRpb24uXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBgdmFsdWVgXG4gICAgICovXG4gICAgc2V0IGZpZWxkVmFsdWUodmFsdWU6IHN0cmluZyk7XG4gICAgZ2V0IGZpZWxkVmFsdWUoKTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogRGV2ZSBzZXIgaW5mb3JtYWRvIG8gbm9tZSBkYSBwcm9wcmllZGFkZSBkbyBvYmpldG8gcXVlIHNlcsOhIHV0aWxpemFkbyBwYXJhIGEgY29udmVyc8OjbyBkb3MgaXRlbnMgYXByZXNlbnRhZG9zIG5hIGxpc3RhIGRvIGNvbXBvbmVudGVcbiAgICAgKiAoYHAtb3B0aW9uc2ApLCBlc3RhIHByb3ByaWVkYWRlIHNlcsOhIHJlc3BvbnPDoXZlbCBwZWxvIHRleHRvIGRlIGFwcmVzZW50YcOnw6NvIGRlIGNhZGEgaXRlbSBkYSBsaXN0YS5cbiAgICAgKlxuICAgICAqIE5lY2Vzc8OhcmlvIHF1YW5kbyBpbmZvcm1hciBvIHNlcnZpw6dvIGNvbW8gVVJMIGUgbyBtZXNtbyBuw6NvIGVzdGl2ZXIgcmV0b3JuYW5kbyB1bWEgbGlzdGEgZGUgb2JqZXRvcyBubyBwYWRyw6NvIGRhIGludGVyZmFjZVxuICAgICAqIFBvQ29tYm9PcHRpb24uXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBgbGFiZWxgXG4gICAgICovXG4gICAgc2V0IGZpZWxkTGFiZWwodmFsdWU6IHN0cmluZyk7XG4gICAgZ2V0IGZpZWxkTGFiZWwoKTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogVmFsb3IgbcOtbmltbyBkZSBjYXJhY3RlcmVzIHBhcmEgcmVhbGl6YXIgbyBmaWx0cm8gbm8gc2VydmnDp28uXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBgMGBcbiAgICAgKi9cbiAgICBzZXQgZmlsdGVyTWlubGVuZ3RoKHZhbHVlOiBudW1iZXIpO1xuICAgIGdldCBmaWx0ZXJNaW5sZW5ndGgoKTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogSW5kaWNhIHF1ZSBvIGNhbXBvIHNlcsOhIG9icmlnYXTDs3Jpby5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICAgKi9cbiAgICBzZXQgcmVxdWlyZWQocmVxdWlyZWQ6IGJvb2xlYW4pO1xuICAgIGdldCByZXF1aXJlZCgpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogSW5kaWNhIHF1ZSBvIGV2ZW50byBgcC1jaGFuZ2VgIHPDsyBzZXLDoSBkaXNwYXJhZG8gYW8gY2xpY2FyIG91IHByZXNzaW9uYXIgYSB0ZWNsYSBcIkVudGVyXCIgc29icmUgdW1hIG9ww6fDo28gc2VsZWNpb25hZGEuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAgICovXG4gICAgc2V0IGNoYW5nZU9uRW50ZXIoY2hhbmdlT25FbnRlcjogYm9vbGVhbik7XG4gICAgZ2V0IGNoYW5nZU9uRW50ZXIoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIEluZGljYSBxdWUgbyBjYW1wbyBzZXLDoSBkZXNhYmlsaXRhZG8uXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAgICovXG4gICAgc2V0IGRpc2FibGVkKGRpc2FibGVkOiBib29sZWFuKTtcbiAgICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogRGVmaW5lIG8gw61jb25lIHF1ZSBzZXLDoSBleGliaWRvIG5vIGluw61jaW8gZG8gY2FtcG8uXG4gICAgICpcbiAgICAgKiA+IFZlamEgYSBkaXNwb25pYmlsaWRhZGUgZGUgw61jb25lcyBlbSBbYmlibGlvdGVjYSBkZSDDrWNvbmVzXShndWlkZXMvaWNvbnMpLlxuICAgICAqL1xuICAgIGljb24/OiBzdHJpbmc7XG4gICAgLyoqIEluZGljYSBxdWUgYSBsaXN0YSBkZWZpbmlkYSBuYSBwcm9wcmllZGFkZSBwLW9wdGlvbnMgc2Vyw6Egb3JkZW5hZGEgcGVsYSBkZXNjcmnDp8Ojby4gKi9cbiAgICBzZXQgc29ydChzb3J0OiBib29sZWFuKTtcbiAgICBnZXQgc29ydCgpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIE5lc3RhIHByb3ByaWVkYWRlIGRlZmluZSBhIGxpc3RhIGRlIG9ww6fDtWVzIGRvIGBwby1jb21ib2AuXG4gICAgICpcbiAgICAgKiA+IEEgbGlzdGEgcG9kZSBzZXIgZGVmaW5pZGEgZW0gZG9pcyBmb3JtYXRvcywgc2ltcGxlcyBvdSBjb20gYWdydXBhbWVudG9zLlxuICAgICAqIC0gVXRpbGl6ZSBgUG9Db21ib09wdGlvbmAgcGFyYSBsaXN0YSBkZSBvcMOnw7VlcyBzaW1wbGVzLlxuICAgICAqIC0gVXRpbGl6ZSBgUG9Db21ib09wdGlvbkdyb3VwYCBwYXJhIGxpc3RhIGRlIG9ww6fDtWVzIGNvbSBhZ3J1cGFtZW50by5cbiAgICAgKlxuICAgICAqICoqSW1wb3J0YW50ZToqKlxuICAgICAqIC0gQSBsaXN0YSBkZXZlIHNlZ3VpciBhcyBkZWZpbmnDp8O1ZXMgZGVzY3JpdGFzIG5hcyByZXNwZWN0aXZhcyBpbnRlcmZhY2VzLCBjYXNvIGNvbnRyw6FyaW8gbsOjbyBleGliaXLDoSBhKGFzKSBvcMOnw6NvKMO1ZXMpIGZvcmEgZG9zIHBhZHLDtWVzLlxuICAgICAqIC0gTyBjb21wb25lbnRlIGludGVycHJldGFyw6EgbyBmb3JtYXRvIGRhIGxpc3RhIGRlIGFjb3JkbyBjb20gYSBpbnRlcmZhY2UgdXRpbGl6YWRhIGUgc8OzIGV4aWJpcsOhIGFzIG9ww6fDtWVzIGNvcnJlc3BvbmRlbnRlcyDDoCBlbGEuXG4gICAgICogLSBVbSBhZ3J1cGFtZW50byBzw7Mgc2Vyw6EgZXhpYmlkbyBzZSBob3V2ZXIgcGVsbyBtZW5vcyB1bWEgb3DDp8OjbyB2w6FsaWRhLlxuICAgICAqL1xuICAgIHNldCBvcHRpb25zKG9wdGlvbnM6IEFycmF5PFBvQ29tYm9PcHRpb24gfCBQb0NvbWJvT3B0aW9uR3JvdXA+KTtcbiAgICBnZXQgb3B0aW9ucygpOiBBcnJheTxQb0NvbWJvT3B0aW9uIHwgUG9Db21ib09wdGlvbkdyb3VwPjtcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogRGVmaW5lIHNlIGEgaW5kaWNhw6fDo28gZGUgY2FtcG8gb3BjaW9uYWwgc2Vyw6EgZXhpYmlkYS5cbiAgICAgKlxuICAgICAqID4gTsOjbyBzZXLDoSBleGliaWRhIGEgaW5kaWNhw6fDo28gc2U6XG4gICAgICogLSBPIGNhbXBvIGNvbnRlciBgcC1yZXF1aXJlZGA7XG4gICAgICogLSBOw6NvIHBvc3N1aXIgYHAtaGVscGAgZS9vdSBgcC1sYWJlbGAuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAgICovXG4gICAgb3B0aW9uYWw6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIERlZmluZSBvIG1vZG8gZGUgcGVzcXVpc2EgdXRpbGl6YWRvIG5vIGZpbHRybyBkYSBsaXN0YSBkZSBzZWxlw6fDo286IGBzdGFydHNXaXRoYCwgYGNvbnRhaW5zYCBvdSBgZW5kc1dpdGhgLlxuICAgICAqXG4gICAgICogPiBRdWFuZG8gdXRpbGl6YXIgYSBwcm9wcmllZGFkZSBgcC1maWx0ZXItc2VydmljZWAgZXN0YSBwcm9wcmllZGFkZSBzZXLDoSBpZ25vcmFkYS5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IGBzdGFydHNXaXRoYFxuICAgICAqL1xuICAgIHNldCBmaWx0ZXJNb2RlKGZpbHRlck1vZGU6IFBvQ29tYm9GaWx0ZXJNb2RlKTtcbiAgICBnZXQgZmlsdGVyTW9kZSgpOiBQb0NvbWJvRmlsdGVyTW9kZTtcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogVmFsb3IgcXVlIHNlcsOhIHJlcGFzc2FkbyBjb21vIHBhcsOibWV0cm8gcGFyYSBhIFVSTCBvdSBhb3MgbcOpdG9kb3MgZG8gc2VydmnDp28gcXVlIGltcGxlbWVudGFtIGEgaW50ZXJmYWNlICpQb0NvbWJvRmlsdGVyKi5cbiAgICAgKlxuICAgICAqID4gQ2FzbyBhIGxpc3RhIGNvbnRlbmhhIGFncnVwYW1lbnRvcywgb3MgbWVzbW9zIHPDsyBzZXLDo28gZXhpYmlkb3Mgc2UgaG91dmVyIG5vIG3DrW5pbW8gdW1hIG9ww6fDo28gcXVlIGNvcnJlc3BvbmRhIMOgIHBlc3F1aXNhLlxuICAgICAqL1xuICAgIHNldCBmaWx0ZXJQYXJhbXMoZmlsdGVyUGFyYW1zOiBhbnkpO1xuICAgIGdldCBmaWx0ZXJQYXJhbXMoKTogYW55O1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBPYmpldG8gY29tIGFzIGxpdGVyYWlzIHVzYWRhcyBubyBgcG8tY29tYm9gLlxuICAgICAqXG4gICAgICogUGFyYSB1dGlsaXphciBiYXN0YSBwYXNzYXIgYSBsaXRlcmFsIHF1ZSBkZXNlamEgY3VzdG9taXphcjpcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqICBjb25zdCBjdXN0b21MaXRlcmFsczogUG9Db21ib0xpdGVyYWxzID0ge1xuICAgICAqICAgIG5vRGF0YTogJ05lbmh1bSB2YWxvcidcbiAgICAgKiAgfTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEUgcGFyYSBjYXJyZWdhciBhIGxpdGVyYWwgY3VzdG9taXphZGEsIGJhc3RhIGFwZW5hcyBwYXNzYXIgbyBvYmpldG8gcGFyYSBvIGNvbXBvbmVudGUuXG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiA8cG8tY29tYm9cbiAgICAgKiAgIFtwLWxpdGVyYWxzXT1cImN1c3RvbUxpdGVyYWxzXCI+XG4gICAgICogPC9wby1jb21ibz5cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqID4gTyBvYmpldG8gcGFkcsOjbyBkZSBsaXRlcmFpcyBzZXLDoSB0cmFkdXppZG8gZGUgYWNvcmRvIGNvbSBvIGlkaW9tYSBkbyAqYnJvd3NlciogKHB0LCBlbiwgZXMpLlxuICAgICAqL1xuICAgIHNldCBsaXRlcmFscyh2YWx1ZTogUG9Db21ib0xpdGVyYWxzKTtcbiAgICBnZXQgbGl0ZXJhbHMoKTogUG9Db21ib0xpdGVyYWxzO1xuICAgIC8qKiBEZXZlIHNlciBpbmZvcm1hZGEgdW1hIGZ1bsOnw6NvIHF1ZSBzZXLDoSBkaXNwYXJhZGEgcXVhbmRvIGhvdXZlciBhbHRlcmHDp8O1ZXMgbm8gbmdNb2RlbC4gKi9cbiAgICBjaGFuZ2U/OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBuZ01vZGVsQ2hhbmdlPzogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgYWJzdHJhY3Qgc2V0SW5wdXRWYWx1ZSh2YWx1ZTogYW55KTogdm9pZDtcbiAgICBhYnN0cmFjdCBhcHBseUZpbHRlcih2YWx1ZTogc3RyaW5nKTogdm9pZDtcbiAgICBhYnN0cmFjdCBnZXRPYmplY3RCeVZhbHVlKHZhbHVlOiBzdHJpbmcpOiB2b2lkO1xuICAgIGFic3RyYWN0IGdldElucHV0VmFsdWUoKTogc3RyaW5nO1xuICAgIGFic3RyYWN0IGluaXRJbnB1dE9ic2VydmFibGUoKTogdm9pZDtcbiAgICBnZXQgaXNPcHRpb25Hcm91cExpc3QoKTogYm9vbGVhbjtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG9uSW5pdFNlcnZpY2UoKTogdm9pZDtcbiAgICBzZXRTZXJ2aWNlKHNlcnZpY2U6IFBvQ29tYm9GaWx0ZXIgfCBzdHJpbmcpOiB2b2lkO1xuICAgIGNvbXBhcmVNZXRob2Qoc2VhcmNoOiBzdHJpbmcsIG9wdGlvbjogUG9Db21ib09wdGlvbiB8IFBvQ29tYm9Hcm91cCwgZmlsdGVyTW9kZTogUG9Db21ib0ZpbHRlck1vZGUpOiBib29sZWFuO1xuICAgIHN0YXJ0c1dpdGgoc2VhcmNoOiBzdHJpbmcsIG9wdGlvbjogUG9Db21ib09wdGlvbiB8IFBvQ29tYm9Hcm91cCk6IGJvb2xlYW47XG4gICAgY29udGFpbnMoc2VhcmNoOiBzdHJpbmcsIG9wdGlvbjogUG9Db21ib09wdGlvbiB8IFBvQ29tYm9Hcm91cCk6IGJvb2xlYW47XG4gICAgZW5kc1dpdGgoc2VhcmNoOiBzdHJpbmcsIG9wdGlvbjogUG9Db21ib09wdGlvbiB8IFBvQ29tYm9Hcm91cCk6IGJvb2xlYW47XG4gICAgZ2V0T3B0aW9uRnJvbVZhbHVlKHZhbHVlOiBhbnksIG9wdGlvbnM6IGFueSk6IGFueTtcbiAgICBnZXRPcHRpb25Gcm9tTGFiZWwobGFiZWw6IGFueSwgb3B0aW9uczogYW55KTogYW55O1xuICAgIHVwZGF0ZVNlbGVjdGVkVmFsdWUob3B0aW9uOiBQb0NvbWJvT3B0aW9uIHwgUG9Db21ib0dyb3VwLCBpc1VwZGF0ZU1vZGVsPzogYm9vbGVhbiwgaXNXcml0ZVZhbHVlPzogYm9vbGVhbik6IHZvaWQ7XG4gICAgY2FsbE1vZGVsQ2hhbmdlKHZhbHVlOiBhbnkpOiBhbnk7XG4gICAgaXNFcXVhbCh2YWx1ZTogYW55LCBpbnB1dFZhbHVlOiBhbnkpOiBib29sZWFuO1xuICAgIHNlYXJjaEZvckxhYmVsKHNlYXJjaDogc3RyaW5nLCBvcHRpb25zOiBBcnJheTxQb0NvbWJvT3B0aW9uIHwgUG9Db21ib0dyb3VwPiwgZmlsdGVyTW9kZTogUG9Db21ib0ZpbHRlck1vZGUpOiB2b2lkO1xuICAgIHVwZGF0ZUNvbWJvTGlzdChvcHRpb25zPzogQXJyYXk8UG9Db21ib09wdGlvbiB8IFBvQ29tYm9Hcm91cD4pOiB2b2lkO1xuICAgIGdldE5leHRPcHRpb24odmFsdWU6IGFueSwgb3B0aW9uczogQXJyYXk8UG9Db21ib09wdGlvbiB8IFBvQ29tYm9Hcm91cD4sIHJldmVyc2U/OiBib29sZWFuKTogYW55O1xuICAgIGdldEluZGV4U2VsZWN0ZWRWaWV3KCk6IG51bWJlcjtcbiAgICBjb21wYXJlT2JqZWN0cyhvYmoxOiBhbnksIG9iajI6IGFueSk6IGJvb2xlYW47XG4gICAgdmVyaWZ5VmFsaWRPcHRpb24oKTogdm9pZDtcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblZhbGlkYXRvckNoYW5nZShmbjogKCkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgdmFsaWRhdGUoYWJzdHJhY3RDb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IGFueTtcbiAgICB9O1xuICAgIHByb3RlY3RlZCBjb25maWdBZnRlclNldEZpbHRlclNlcnZpY2Uoc2VydmljZTogUG9Db21ib0ZpbHRlciB8IHN0cmluZyk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHVuc3Vic2NyaWJlS2V5dXBPYnNlcnZhYmxlKCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHZhbGlkYXRlTW9kZWwobW9kZWw6IGFueSk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBjb21ib0xpc3REZWZpbml0aW9ucztcbiAgICBwcml2YXRlIGNvbXBhcmVPcHRpb25zO1xuICAgIHByaXZhdGUgaGFzRHVwbGljYXRlZE9wdGlvbjtcbiAgICBwcml2YXRlIGxpc3RpbmdDb21ib09wdGlvbnM7XG4gICAgcHJpdmF0ZSBzb3J0T3B0aW9ucztcbiAgICBwcml2YXRlIHZhbGlkYXRlVmFsdWU7XG4gICAgcHJpdmF0ZSB2ZXJpZnlDb21ib09wdGlvbnM7XG4gICAgcHJpdmF0ZSB2ZXJpZnlDb21ib09wdGlvbnNHcm91cDtcbiAgICBwcml2YXRlIHZlcmlmeUlmSGFzTGFiZWw7XG4gICAgcHJpdmF0ZSB1cGRhdGVJbnRlcm5hbFZhcmlhYmxlcztcbiAgICBwcml2YXRlIHVwZGF0ZU1vZGVsO1xuICAgIHByaXZhdGUgdXBkYXRlU2VsZWN0ZWRWYWx1ZVdpdGhPbGRPcHRpb247XG59XG4iXX0=