import { AfterViewChecked, AfterViewInit, ChangeDetectorRef, ElementRef, QueryList } from '@angular/core';
import { PoCheckboxGroupBaseComponent } from './po-checkbox-group-base.component';
import { PoCheckboxGroupOption } from './interfaces/po-checkbox-group-option.interface';
/**
 * @docsExtends PoCheckboxGroupBaseComponent
 *
 * @example
 *
 * <example name="po-checkbox-group-basic" title="PO Checkbox Group Basic">
 *  <file name="sample-po-checkbox-group-basic/sample-po-checkbox-group-basic.component.html"> </file>
 *  <file name="sample-po-checkbox-group-basic/sample-po-checkbox-group-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-checkbox-group-labs" title="PO Checkbox Group Labs">
 *  <file name="sample-po-checkbox-group-labs/sample-po-checkbox-group-labs.component.html"> </file>
 *  <file name="sample-po-checkbox-group-labs/sample-po-checkbox-group-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-checkbox-group-password-policy" title="PO Checkbox Group – Security policy">
 *  <file name="sample-po-checkbox-group-password-policy/sample-po-checkbox-group-password-policy.component.html"> </file>
 *  <file name="sample-po-checkbox-group-password-policy/sample-po-checkbox-group-password-policy.component.ts"> </file>
 * </example>
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoCheckboxGroupComponent extends PoCheckboxGroupBaseComponent implements AfterViewChecked, AfterViewInit {
    private changeDetector;
    checkboxLabels: QueryList<ElementRef>;
    constructor(changeDetector: ChangeDetectorRef);
    ngAfterViewChecked(): void;
    ngAfterViewInit(): void;
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoCheckboxGroupComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoCheckboxGroupComponent, { static: true }) checkbox: PoCheckboxGroupComponent;
     *
     * focusCheckbox() {
     *   this.checkbox.focus();
     * }
     * ```
     */
    focus(): void;
    onKeyDown(event: KeyboardEvent, option: PoCheckboxGroupOption): void;
    trackByFn(index: any): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoCheckboxGroupComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PoCheckboxGroupComponent, "po-checkbox-group", never, {}, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hlY2tib3gtZ3JvdXAuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBvLWNoZWNrYm94LWdyb3VwLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdDaGVja2VkLCBBZnRlclZpZXdJbml0LCBDaGFuZ2VEZXRlY3RvclJlZiwgRWxlbWVudFJlZiwgUXVlcnlMaXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQb0NoZWNrYm94R3JvdXBCYXNlQ29tcG9uZW50IH0gZnJvbSAnLi9wby1jaGVja2JveC1ncm91cC1iYXNlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQb0NoZWNrYm94R3JvdXBPcHRpb24gfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tY2hlY2tib3gtZ3JvdXAtb3B0aW9uLmludGVyZmFjZSc7XG4vKipcbiAqIEBkb2NzRXh0ZW5kcyBQb0NoZWNrYm94R3JvdXBCYXNlQ29tcG9uZW50XG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tY2hlY2tib3gtZ3JvdXAtYmFzaWNcIiB0aXRsZT1cIlBPIENoZWNrYm94IEdyb3VwIEJhc2ljXCI+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1jaGVja2JveC1ncm91cC1iYXNpYy9zYW1wbGUtcG8tY2hlY2tib3gtZ3JvdXAtYmFzaWMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tY2hlY2tib3gtZ3JvdXAtYmFzaWMvc2FtcGxlLXBvLWNoZWNrYm94LWdyb3VwLWJhc2ljLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInBvLWNoZWNrYm94LWdyb3VwLWxhYnNcIiB0aXRsZT1cIlBPIENoZWNrYm94IEdyb3VwIExhYnNcIj5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWNoZWNrYm94LWdyb3VwLWxhYnMvc2FtcGxlLXBvLWNoZWNrYm94LWdyb3VwLWxhYnMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tY2hlY2tib3gtZ3JvdXAtbGFicy9zYW1wbGUtcG8tY2hlY2tib3gtZ3JvdXAtbGFicy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJwby1jaGVja2JveC1ncm91cC1wYXNzd29yZC1wb2xpY3lcIiB0aXRsZT1cIlBPIENoZWNrYm94IEdyb3VwIOKAkyBTZWN1cml0eSBwb2xpY3lcIj5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWNoZWNrYm94LWdyb3VwLXBhc3N3b3JkLXBvbGljeS9zYW1wbGUtcG8tY2hlY2tib3gtZ3JvdXAtcGFzc3dvcmQtcG9saWN5LmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWNoZWNrYm94LWdyb3VwLXBhc3N3b3JkLXBvbGljeS9zYW1wbGUtcG8tY2hlY2tib3gtZ3JvdXAtcGFzc3dvcmQtcG9saWN5LmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBvQ2hlY2tib3hHcm91cENvbXBvbmVudCBleHRlbmRzIFBvQ2hlY2tib3hHcm91cEJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdDaGVja2VkLCBBZnRlclZpZXdJbml0IHtcbiAgICBwcml2YXRlIGNoYW5nZURldGVjdG9yO1xuICAgIGNoZWNrYm94TGFiZWxzOiBRdWVyeUxpc3Q8RWxlbWVudFJlZj47XG4gICAgY29uc3RydWN0b3IoY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmKTtcbiAgICBuZ0FmdGVyVmlld0NoZWNrZWQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBGdW7Dp8OjbyBxdWUgYXRyaWJ1aSBmb2NvIGFvIGNvbXBvbmVudGUuXG4gICAgICpcbiAgICAgKiBQYXJhIHV0aWxpesOhLWxhIMOpIG5lY2Vzc8OhcmlvIHRlciBhIGluc3TDom5jaWEgZG8gY29tcG9uZW50ZSBubyBET00sIHBvZGVuZG8gc2VyIHV0aWxpemFkbyBvIFZpZXdDaGlsZCBkYSBzZWd1aW50ZSBmb3JtYTpcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIGltcG9ydCB7IFBvQ2hlY2tib3hHcm91cENvbXBvbmVudCB9IGZyb20gJ0Bwby11aS9uZy1jb21wb25lbnRzJztcbiAgICAgKlxuICAgICAqIC4uLlxuICAgICAqXG4gICAgICogQFZpZXdDaGlsZChQb0NoZWNrYm94R3JvdXBDb21wb25lbnQsIHsgc3RhdGljOiB0cnVlIH0pIGNoZWNrYm94OiBQb0NoZWNrYm94R3JvdXBDb21wb25lbnQ7XG4gICAgICpcbiAgICAgKiBmb2N1c0NoZWNrYm94KCkge1xuICAgICAqICAgdGhpcy5jaGVja2JveC5mb2N1cygpO1xuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBmb2N1cygpOiB2b2lkO1xuICAgIG9uS2V5RG93bihldmVudDogS2V5Ym9hcmRFdmVudCwgb3B0aW9uOiBQb0NoZWNrYm94R3JvdXBPcHRpb24pOiB2b2lkO1xuICAgIHRyYWNrQnlGbihpbmRleDogYW55KTogYW55O1xufVxuIl19