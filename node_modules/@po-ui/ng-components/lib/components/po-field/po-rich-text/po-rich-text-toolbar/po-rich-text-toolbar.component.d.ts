import { AfterViewInit, ElementRef, EventEmitter } from '@angular/core';
import { PoLanguageService } from '../../../../services/po-language/po-language.service';
import { PoButtonGroupItem } from '../../../po-button-group';
import { PoRichTextToolbarButtonGroupItem } from '../interfaces/po-rich-text-toolbar-button-group-item.interface';
import * as ɵngcc0 from '@angular/core';
export declare class PoRichTextToolbarComponent implements AfterViewInit {
    private languageService;
    private _readonly;
    readonly literals: any;
    alignButtons: Array<PoRichTextToolbarButtonGroupItem>;
    formatButtons: Array<PoRichTextToolbarButtonGroupItem>;
    listButtons: Array<PoRichTextToolbarButtonGroupItem>;
    linkButtons: Array<PoRichTextToolbarButtonGroupItem>;
    mediaButtons: Array<PoButtonGroupItem>;
    colorPickerInput: ElementRef;
    toolbarElement: ElementRef;
    set readonly(value: boolean);
    get readonly(): boolean;
    command: EventEmitter<string | {
        command: string;
        value: string;
    }>;
    modal: EventEmitter<any>;
    get isInternetExplorer(): boolean;
    constructor(languageService: PoLanguageService);
    ngAfterViewInit(): void;
    changeTextColor(value: any): void;
    setButtonsStates(obj: {
        commands: Array<string>;
        hexColor: string;
    }): void;
    shortcutTrigger(): void;
    private emitAlignCommand;
    private emitCommand;
    private removeButtonFocus;
    private setColorInColorPicker;
    private toggleDisableButtons;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoRichTextToolbarComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PoRichTextToolbarComponent, "po-rich-text-toolbar", never, { "readonly": "p-readonly"; }, { "command": "p-command"; "modal": "p-modal"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcmljaC10ZXh0LXRvb2xiYXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBvLXJpY2gtdGV4dC10b29sYmFyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQb0xhbmd1YWdlU2VydmljZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NlcnZpY2VzL3BvLWxhbmd1YWdlL3BvLWxhbmd1YWdlLnNlcnZpY2UnO1xuaW1wb3J0IHsgUG9CdXR0b25Hcm91cEl0ZW0gfSBmcm9tICcuLi8uLi8uLi9wby1idXR0b24tZ3JvdXAnO1xuaW1wb3J0IHsgUG9SaWNoVGV4dFRvb2xiYXJCdXR0b25Hcm91cEl0ZW0gfSBmcm9tICcuLi9pbnRlcmZhY2VzL3BvLXJpY2gtdGV4dC10b29sYmFyLWJ1dHRvbi1ncm91cC1pdGVtLmludGVyZmFjZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQb1JpY2hUZXh0VG9vbGJhckNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICAgIHByaXZhdGUgbGFuZ3VhZ2VTZXJ2aWNlO1xuICAgIHByaXZhdGUgX3JlYWRvbmx5O1xuICAgIHJlYWRvbmx5IGxpdGVyYWxzOiBhbnk7XG4gICAgYWxpZ25CdXR0b25zOiBBcnJheTxQb1JpY2hUZXh0VG9vbGJhckJ1dHRvbkdyb3VwSXRlbT47XG4gICAgZm9ybWF0QnV0dG9uczogQXJyYXk8UG9SaWNoVGV4dFRvb2xiYXJCdXR0b25Hcm91cEl0ZW0+O1xuICAgIGxpc3RCdXR0b25zOiBBcnJheTxQb1JpY2hUZXh0VG9vbGJhckJ1dHRvbkdyb3VwSXRlbT47XG4gICAgbGlua0J1dHRvbnM6IEFycmF5PFBvUmljaFRleHRUb29sYmFyQnV0dG9uR3JvdXBJdGVtPjtcbiAgICBtZWRpYUJ1dHRvbnM6IEFycmF5PFBvQnV0dG9uR3JvdXBJdGVtPjtcbiAgICBjb2xvclBpY2tlcklucHV0OiBFbGVtZW50UmVmO1xuICAgIHRvb2xiYXJFbGVtZW50OiBFbGVtZW50UmVmO1xuICAgIHNldCByZWFkb25seSh2YWx1ZTogYm9vbGVhbik7XG4gICAgZ2V0IHJlYWRvbmx5KCk6IGJvb2xlYW47XG4gICAgY29tbWFuZDogRXZlbnRFbWl0dGVyPHN0cmluZyB8IHtcbiAgICAgICAgY29tbWFuZDogc3RyaW5nO1xuICAgICAgICB2YWx1ZTogc3RyaW5nO1xuICAgIH0+O1xuICAgIG1vZGFsOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBnZXQgaXNJbnRlcm5ldEV4cGxvcmVyKCk6IGJvb2xlYW47XG4gICAgY29uc3RydWN0b3IobGFuZ3VhZ2VTZXJ2aWNlOiBQb0xhbmd1YWdlU2VydmljZSk7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgY2hhbmdlVGV4dENvbG9yKHZhbHVlOiBhbnkpOiB2b2lkO1xuICAgIHNldEJ1dHRvbnNTdGF0ZXMob2JqOiB7XG4gICAgICAgIGNvbW1hbmRzOiBBcnJheTxzdHJpbmc+O1xuICAgICAgICBoZXhDb2xvcjogc3RyaW5nO1xuICAgIH0pOiB2b2lkO1xuICAgIHNob3J0Y3V0VHJpZ2dlcigpOiB2b2lkO1xuICAgIHByaXZhdGUgZW1pdEFsaWduQ29tbWFuZDtcbiAgICBwcml2YXRlIGVtaXRDb21tYW5kO1xuICAgIHByaXZhdGUgcmVtb3ZlQnV0dG9uRm9jdXM7XG4gICAgcHJpdmF0ZSBzZXRDb2xvckluQ29sb3JQaWNrZXI7XG4gICAgcHJpdmF0ZSB0b2dnbGVEaXNhYmxlQnV0dG9ucztcbn1cbiJdfQ==