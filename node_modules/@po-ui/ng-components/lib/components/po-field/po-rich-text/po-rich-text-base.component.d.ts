import { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';
import { EventEmitter } from '@angular/core';
/**
 * @description
 *
 * O componente `po-rich-text` é um editor de textos enriquecidos.
 *
 * Para edição de texto simples sem formatação recomenda-se o uso do componente [**po-textarea**](/documentation/po-textarea).
 *
 * > No navegador Internet Explorer não é possível alterar a cor do texto.
 */
import * as ɵngcc0 from '@angular/core';
export declare abstract class PoRichTextBaseComponent implements ControlValueAccessor, Validator {
    private _height?;
    private _placeholder;
    private _readonly;
    private _required;
    invalid: boolean;
    onChangeModel: any;
    value: string;
    private onTouched;
    private validatorChange;
    /**
     * @optional
     *
     * @description
     *
     * Aplica foco no elemento ao ser iniciado.
     *
     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
     *
     * @default `false`
     */
    autoFocus: boolean;
    /**
     * @description
     *
     * Mensagem que será apresentada quando a propriedade required estiver habilitada e o campo for limpo após algo ser digitado.
     */
    errorMessage?: string;
    /**
     * @optional
     *
     * @description
     *
     * Define a altura da área de edição de texto.
     *
     * > Altura mínima do componente é `94` e a altura máxima é `262`.
     */
    set height(height: number);
    get height(): number;
    /**
     * @optional
     *
     * @description
     *
     * Texto de apoio do campo.
     */
    help?: string;
    /**
     * @optional
     *
     * @description
     *
     * Rótulo do campo.
     */
    label?: string;
    /** Nome e identificador do campo. */
    name: string;
    /**
     * @optional
     *
     * @description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * @default `false`
     */
    optional: boolean;
    /**
     * @optional
     *
     * @description
     *
     * Mensagem que aparecerá enquanto o campo não estiver preenchido.
     *
     * @default ''
     */
    set placeholder(value: string);
    get placeholder(): string;
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será somente leitura.
     *
     * @default `false`
     */
    set readonly(value: boolean);
    get readonly(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será obrigatório.
     *
     * @default `false`
     */
    set required(value: boolean);
    get required(): boolean;
    /** Evento disparado ao deixar o campo e que recebe como parâmetro o valor alterado. */
    change?: EventEmitter<any>;
    /** Evento disparado ao modificar valor do model e que recebe como parâmetro o valor alterado. */
    changeModel?: EventEmitter<any>;
    registerOnChange(func: any): void;
    registerOnTouched(func: any): void;
    registerOnValidatorChange(fn: () => void): void;
    validate(abstractControl: AbstractControl): {
        [key: string]: any;
    };
    writeValue(value: string): void;
    protected updateModel(value: any): void;
    protected validateModel(value: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoRichTextBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoRichTextBaseComponent, never, never, { "autoFocus": "p-auto-focus"; "errorMessage": "p-error-message"; "height": "p-height"; "placeholder": "p-placeholder"; "readonly": "p-readonly"; "required": "p-required"; "help": "p-help"; "label": "p-label"; "name": "name"; "optional": "p-optional"; }, { "change": "p-change"; "changeModel": "p-change-model"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcmljaC10ZXh0LWJhc2UuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBvLXJpY2gtdGV4dC1iYXNlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgQ29udHJvbFZhbHVlQWNjZXNzb3IsIFZhbGlkYXRvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBPIGNvbXBvbmVudGUgYHBvLXJpY2gtdGV4dGAgw6kgdW0gZWRpdG9yIGRlIHRleHRvcyBlbnJpcXVlY2lkb3MuXG4gKlxuICogUGFyYSBlZGnDp8OjbyBkZSB0ZXh0byBzaW1wbGVzIHNlbSBmb3JtYXRhw6fDo28gcmVjb21lbmRhLXNlIG8gdXNvIGRvIGNvbXBvbmVudGUgWyoqcG8tdGV4dGFyZWEqKl0oL2RvY3VtZW50YXRpb24vcG8tdGV4dGFyZWEpLlxuICpcbiAqID4gTm8gbmF2ZWdhZG9yIEludGVybmV0IEV4cGxvcmVyIG7Do28gw6kgcG9zc8OtdmVsIGFsdGVyYXIgYSBjb3IgZG8gdGV4dG8uXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGFic3RyYWN0IGNsYXNzIFBvUmljaFRleHRCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIFZhbGlkYXRvciB7XG4gICAgcHJpdmF0ZSBfaGVpZ2h0PztcbiAgICBwcml2YXRlIF9wbGFjZWhvbGRlcjtcbiAgICBwcml2YXRlIF9yZWFkb25seTtcbiAgICBwcml2YXRlIF9yZXF1aXJlZDtcbiAgICBpbnZhbGlkOiBib29sZWFuO1xuICAgIG9uQ2hhbmdlTW9kZWw6IGFueTtcbiAgICB2YWx1ZTogc3RyaW5nO1xuICAgIHByaXZhdGUgb25Ub3VjaGVkO1xuICAgIHByaXZhdGUgdmFsaWRhdG9yQ2hhbmdlO1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBBcGxpY2EgZm9jbyBubyBlbGVtZW50byBhbyBzZXIgaW5pY2lhZG8uXG4gICAgICpcbiAgICAgKiA+IENhc28gbWFpcyBkZSB1bSBlbGVtZW50byBzZWphIGNvbmZpZ3VyYWRvIGNvbSBlc3NhIHByb3ByaWVkYWRlLCBhcGVuYXMgbyDDumx0aW1vIGVsZW1lbnRvIGRlY2xhcmFkbyBjb20gZWxhIHRlcsOhIG8gZm9jby5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICAgKi9cbiAgICBhdXRvRm9jdXM6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBNZW5zYWdlbSBxdWUgc2Vyw6EgYXByZXNlbnRhZGEgcXVhbmRvIGEgcHJvcHJpZWRhZGUgcmVxdWlyZWQgZXN0aXZlciBoYWJpbGl0YWRhIGUgbyBjYW1wbyBmb3IgbGltcG8gYXDDs3MgYWxnbyBzZXIgZGlnaXRhZG8uXG4gICAgICovXG4gICAgZXJyb3JNZXNzYWdlPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBEZWZpbmUgYSBhbHR1cmEgZGEgw6FyZWEgZGUgZWRpw6fDo28gZGUgdGV4dG8uXG4gICAgICpcbiAgICAgKiA+IEFsdHVyYSBtw61uaW1hIGRvIGNvbXBvbmVudGUgw6kgYDk0YCBlIGEgYWx0dXJhIG3DoXhpbWEgw6kgYDI2MmAuXG4gICAgICovXG4gICAgc2V0IGhlaWdodChoZWlnaHQ6IG51bWJlcik7XG4gICAgZ2V0IGhlaWdodCgpOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIFRleHRvIGRlIGFwb2lvIGRvIGNhbXBvLlxuICAgICAqL1xuICAgIGhlbHA/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIFLDs3R1bG8gZG8gY2FtcG8uXG4gICAgICovXG4gICAgbGFiZWw/OiBzdHJpbmc7XG4gICAgLyoqIE5vbWUgZSBpZGVudGlmaWNhZG9yIGRvIGNhbXBvLiAqL1xuICAgIG5hbWU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogRGVmaW5lIHNlIGEgaW5kaWNhw6fDo28gZGUgY2FtcG8gb3BjaW9uYWwgc2Vyw6EgZXhpYmlkYS5cbiAgICAgKlxuICAgICAqID4gTsOjbyBzZXLDoSBleGliaWRhIGEgaW5kaWNhw6fDo28gc2U6XG4gICAgICogLSBPIGNhbXBvIGNvbnRlciBgcC1yZXF1aXJlZGA7XG4gICAgICogLSBOw6NvIHBvc3N1aXIgYHAtaGVscGAgZS9vdSBgcC1sYWJlbGAuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAgICovXG4gICAgb3B0aW9uYWw6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIE1lbnNhZ2VtIHF1ZSBhcGFyZWNlcsOhIGVucXVhbnRvIG8gY2FtcG8gbsOjbyBlc3RpdmVyIHByZWVuY2hpZG8uXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCAnJ1xuICAgICAqL1xuICAgIHNldCBwbGFjZWhvbGRlcih2YWx1ZTogc3RyaW5nKTtcbiAgICBnZXQgcGxhY2Vob2xkZXIoKTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBJbmRpY2EgcXVlIG8gY2FtcG8gc2Vyw6Egc29tZW50ZSBsZWl0dXJhLlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgICAqL1xuICAgIHNldCByZWFkb25seSh2YWx1ZTogYm9vbGVhbik7XG4gICAgZ2V0IHJlYWRvbmx5KCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIEluZGljYSBxdWUgbyBjYW1wbyBzZXLDoSBvYnJpZ2F0w7NyaW8uXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAgICovXG4gICAgc2V0IHJlcXVpcmVkKHZhbHVlOiBib29sZWFuKTtcbiAgICBnZXQgcmVxdWlyZWQoKTogYm9vbGVhbjtcbiAgICAvKiogRXZlbnRvIGRpc3BhcmFkbyBhbyBkZWl4YXIgbyBjYW1wbyBlIHF1ZSByZWNlYmUgY29tbyBwYXLDom1ldHJvIG8gdmFsb3IgYWx0ZXJhZG8uICovXG4gICAgY2hhbmdlPzogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgLyoqIEV2ZW50byBkaXNwYXJhZG8gYW8gbW9kaWZpY2FyIHZhbG9yIGRvIG1vZGVsIGUgcXVlIHJlY2ViZSBjb21vIHBhcsOibWV0cm8gbyB2YWxvciBhbHRlcmFkby4gKi9cbiAgICBjaGFuZ2VNb2RlbD86IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZnVuYzogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmdW5jOiBhbnkpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25WYWxpZGF0b3JDaGFuZ2UoZm46ICgpID0+IHZvaWQpOiB2b2lkO1xuICAgIHZhbGlkYXRlKGFic3RyYWN0Q29udHJvbDogQWJzdHJhY3RDb250cm9sKToge1xuICAgICAgICBba2V5OiBzdHJpbmddOiBhbnk7XG4gICAgfTtcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBzdHJpbmcpOiB2b2lkO1xuICAgIHByb3RlY3RlZCB1cGRhdGVNb2RlbCh2YWx1ZTogYW55KTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgdmFsaWRhdGVNb2RlbCh2YWx1ZTogYW55KTogdm9pZDtcbn1cbiJdfQ==