import { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';
import { EventEmitter } from '@angular/core';
import { PoRadioGroupOption } from './po-radio-group-option.interface';
/**
 * @description
 *
 * O componente `po-radio-group` deve ser utilizado para disponibilizar múltiplas opções ao usuário, permitindo a ele que
 * selecione apenas uma delas. Seu uso é recomendado para um número pequeno de opções, caso contrário, recomenda-se o uso
 * do [**po-combo**](/documentation/po-combo) ou [**po-select**](/documentation/po-select).
 *
 * Este não é um componente de multiseleção, se for este o caso, deve-se utilizar o
 * [**po-checkbox-group**](/documentation/po-checkbox-group).
 *
 * > Ao passar um valor para o *model* que não esteja na lista de opções, o mesmo será definido como `undefined`.
 */
import * as ɵngcc0 from '@angular/core';
export declare abstract class PoRadioGroupBaseComponent implements ControlValueAccessor, Validator {
    private _columns;
    private _disabled?;
    private _options;
    private _required?;
    mdColumns: number;
    value: any;
    private onChangePropagate;
    private validatorChange;
    /**
     * @optional
     *
     * @description
     *
     * Aplica foco no elemento ao ser iniciado.
     *
     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
     *
     * @default `false`
     */
    autoFocus: boolean;
    /** Nome das opções. */
    name: string;
    /**
     * @optional
     *
     * @description
     *
     * Define a quantidade de colunas para exibição das opções.
     *
     * **Considerações:**
     *  - É possível exibir as opções entre `1` e `4` colunas.
     *  - O número máximo de colunas é invariável nas seguintes resoluções:
     *    + `sm`: `1`
     *    + `md`: `2`
     *
     * @default `2`
     */
    set columns(value: number);
    get columns(): number;
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será desabilitado.
     *
     * @default `false`
     */
    set disabled(disabled: boolean);
    get disabled(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será obrigatório.
     *
     * @default `false`
     */
    set required(required: boolean);
    get required(): boolean;
    /**
     * Lista de opções que serão exibidas.
     * Nesta propriedade deve ser definido um array de objetos que implementam a interface PoRadioGroupOption.
     */
    set options(value: Array<PoRadioGroupOption>);
    get options(): Array<PoRadioGroupOption>;
    /**
     * @optional
     *
     * @description
     *
     * Define se a indicação de campo opcional será exibida.
     *
     * > Não será exibida a indicação se:
     * - O campo conter `p-required`;
     * - Não possuir `p-help` e/ou `p-label`.
     *
     * @default `false`
     */
    optional: boolean;
    /** Evento ao alterar valor do campo. */
    change?: EventEmitter<any>;
    abstract getElementByValue(value: any): any;
    changeValue(changedValue: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    registerOnValidatorChange(fn: any): void;
    validate(abstractControl: AbstractControl): {
        [key: string]: any;
    };
    writeValue(modelValue: any): void;
    private checkColumnsRange;
    private getGridSystemColumns;
    private validateModel;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoRadioGroupBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoRadioGroupBaseComponent, never, never, { "autoFocus": "p-auto-focus"; "columns": "p-columns"; "disabled": "p-disabled"; "required": "p-required"; "options": "p-options"; "name": "name"; "optional": "p-optional"; }, { "change": "p-change"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcmFkaW8tZ3JvdXAtYmFzZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicG8tcmFkaW8tZ3JvdXAtYmFzZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgQ29udHJvbFZhbHVlQWNjZXNzb3IsIFZhbGlkYXRvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUG9SYWRpb0dyb3VwT3B0aW9uIH0gZnJvbSAnLi9wby1yYWRpby1ncm91cC1vcHRpb24uaW50ZXJmYWNlJztcbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogTyBjb21wb25lbnRlIGBwby1yYWRpby1ncm91cGAgZGV2ZSBzZXIgdXRpbGl6YWRvIHBhcmEgZGlzcG9uaWJpbGl6YXIgbcO6bHRpcGxhcyBvcMOnw7VlcyBhbyB1c3XDoXJpbywgcGVybWl0aW5kbyBhIGVsZSBxdWVcbiAqIHNlbGVjaW9uZSBhcGVuYXMgdW1hIGRlbGFzLiBTZXUgdXNvIMOpIHJlY29tZW5kYWRvIHBhcmEgdW0gbsO6bWVybyBwZXF1ZW5vIGRlIG9ww6fDtWVzLCBjYXNvIGNvbnRyw6FyaW8sIHJlY29tZW5kYS1zZSBvIHVzb1xuICogZG8gWyoqcG8tY29tYm8qKl0oL2RvY3VtZW50YXRpb24vcG8tY29tYm8pIG91IFsqKnBvLXNlbGVjdCoqXSgvZG9jdW1lbnRhdGlvbi9wby1zZWxlY3QpLlxuICpcbiAqIEVzdGUgbsOjbyDDqSB1bSBjb21wb25lbnRlIGRlIG11bHRpc2VsZcOnw6NvLCBzZSBmb3IgZXN0ZSBvIGNhc28sIGRldmUtc2UgdXRpbGl6YXIgb1xuICogWyoqcG8tY2hlY2tib3gtZ3JvdXAqKl0oL2RvY3VtZW50YXRpb24vcG8tY2hlY2tib3gtZ3JvdXApLlxuICpcbiAqID4gQW8gcGFzc2FyIHVtIHZhbG9yIHBhcmEgbyAqbW9kZWwqIHF1ZSBuw6NvIGVzdGVqYSBuYSBsaXN0YSBkZSBvcMOnw7VlcywgbyBtZXNtbyBzZXLDoSBkZWZpbmlkbyBjb21vIGB1bmRlZmluZWRgLlxuICovXG5leHBvcnQgZGVjbGFyZSBhYnN0cmFjdCBjbGFzcyBQb1JhZGlvR3JvdXBCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIFZhbGlkYXRvciB7XG4gICAgcHJpdmF0ZSBfY29sdW1ucztcbiAgICBwcml2YXRlIF9kaXNhYmxlZD87XG4gICAgcHJpdmF0ZSBfb3B0aW9ucztcbiAgICBwcml2YXRlIF9yZXF1aXJlZD87XG4gICAgbWRDb2x1bW5zOiBudW1iZXI7XG4gICAgdmFsdWU6IGFueTtcbiAgICBwcml2YXRlIG9uQ2hhbmdlUHJvcGFnYXRlO1xuICAgIHByaXZhdGUgdmFsaWRhdG9yQ2hhbmdlO1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBBcGxpY2EgZm9jbyBubyBlbGVtZW50byBhbyBzZXIgaW5pY2lhZG8uXG4gICAgICpcbiAgICAgKiA+IENhc28gbWFpcyBkZSB1bSBlbGVtZW50byBzZWphIGNvbmZpZ3VyYWRvIGNvbSBlc3NhIHByb3ByaWVkYWRlLCBhcGVuYXMgbyDDumx0aW1vIGVsZW1lbnRvIGRlY2xhcmFkbyBjb20gZWxhIHRlcsOhIG8gZm9jby5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICAgKi9cbiAgICBhdXRvRm9jdXM6IGJvb2xlYW47XG4gICAgLyoqIE5vbWUgZGFzIG9ww6fDtWVzLiAqL1xuICAgIG5hbWU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogRGVmaW5lIGEgcXVhbnRpZGFkZSBkZSBjb2x1bmFzIHBhcmEgZXhpYmnDp8OjbyBkYXMgb3DDp8O1ZXMuXG4gICAgICpcbiAgICAgKiAqKkNvbnNpZGVyYcOnw7VlczoqKlxuICAgICAqICAtIMOJIHBvc3PDrXZlbCBleGliaXIgYXMgb3DDp8O1ZXMgZW50cmUgYDFgIGUgYDRgIGNvbHVuYXMuXG4gICAgICogIC0gTyBuw7ptZXJvIG3DoXhpbW8gZGUgY29sdW5hcyDDqSBpbnZhcmnDoXZlbCBuYXMgc2VndWludGVzIHJlc29sdcOnw7VlczpcbiAgICAgKiAgICArIGBzbWA6IGAxYFxuICAgICAqICAgICsgYG1kYDogYDJgXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBgMmBcbiAgICAgKi9cbiAgICBzZXQgY29sdW1ucyh2YWx1ZTogbnVtYmVyKTtcbiAgICBnZXQgY29sdW1ucygpOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIEluZGljYSBxdWUgbyBjYW1wbyBzZXLDoSBkZXNhYmlsaXRhZG8uXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAgICovXG4gICAgc2V0IGRpc2FibGVkKGRpc2FibGVkOiBib29sZWFuKTtcbiAgICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogSW5kaWNhIHF1ZSBvIGNhbXBvIHNlcsOhIG9icmlnYXTDs3Jpby5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICAgKi9cbiAgICBzZXQgcmVxdWlyZWQocmVxdWlyZWQ6IGJvb2xlYW4pO1xuICAgIGdldCByZXF1aXJlZCgpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIExpc3RhIGRlIG9ww6fDtWVzIHF1ZSBzZXLDo28gZXhpYmlkYXMuXG4gICAgICogTmVzdGEgcHJvcHJpZWRhZGUgZGV2ZSBzZXIgZGVmaW5pZG8gdW0gYXJyYXkgZGUgb2JqZXRvcyBxdWUgaW1wbGVtZW50YW0gYSBpbnRlcmZhY2UgUG9SYWRpb0dyb3VwT3B0aW9uLlxuICAgICAqL1xuICAgIHNldCBvcHRpb25zKHZhbHVlOiBBcnJheTxQb1JhZGlvR3JvdXBPcHRpb24+KTtcbiAgICBnZXQgb3B0aW9ucygpOiBBcnJheTxQb1JhZGlvR3JvdXBPcHRpb24+O1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBEZWZpbmUgc2UgYSBpbmRpY2HDp8OjbyBkZSBjYW1wbyBvcGNpb25hbCBzZXLDoSBleGliaWRhLlxuICAgICAqXG4gICAgICogPiBOw6NvIHNlcsOhIGV4aWJpZGEgYSBpbmRpY2HDp8OjbyBzZTpcbiAgICAgKiAtIE8gY2FtcG8gY29udGVyIGBwLXJlcXVpcmVkYDtcbiAgICAgKiAtIE7Do28gcG9zc3VpciBgcC1oZWxwYCBlL291IGBwLWxhYmVsYC5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICAgKi9cbiAgICBvcHRpb25hbDogYm9vbGVhbjtcbiAgICAvKiogRXZlbnRvIGFvIGFsdGVyYXIgdmFsb3IgZG8gY2FtcG8uICovXG4gICAgY2hhbmdlPzogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgYWJzdHJhY3QgZ2V0RWxlbWVudEJ5VmFsdWUodmFsdWU6IGFueSk6IGFueTtcbiAgICBjaGFuZ2VWYWx1ZShjaGFuZ2VkVmFsdWU6IGFueSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uVmFsaWRhdG9yQ2hhbmdlKGZuOiBhbnkpOiB2b2lkO1xuICAgIHZhbGlkYXRlKGFic3RyYWN0Q29udHJvbDogQWJzdHJhY3RDb250cm9sKToge1xuICAgICAgICBba2V5OiBzdHJpbmddOiBhbnk7XG4gICAgfTtcbiAgICB3cml0ZVZhbHVlKG1vZGVsVmFsdWU6IGFueSk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBjaGVja0NvbHVtbnNSYW5nZTtcbiAgICBwcml2YXRlIGdldEdyaWRTeXN0ZW1Db2x1bW5zO1xuICAgIHByaXZhdGUgdmFsaWRhdGVNb2RlbDtcbn1cbiJdfQ==