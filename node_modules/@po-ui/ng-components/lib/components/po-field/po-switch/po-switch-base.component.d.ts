import { ControlValueAccessor } from '@angular/forms';
import { EventEmitter } from '@angular/core';
import { PoSwitchLabelPosition } from './po-switch-label-position.enum';
/**
 * @description
 *
 * O componente `po-switch` é um [checkbox](/documentation/po-checkbox-group) mais intuitivo, pois faz analogia a um interruptor.
 * Deve ser usado quando deseja-se transmitir a ideia de ligar / desligar uma funcionalidade específica.
 *
 * Pode-se ligar ou deligar o botão utilizando a tecla de espaço ou o clique do mouse.
 *
 * O texto exibido pode ser alterado de acordo com o valor setado aumentando as possibilidades de uso do componente,
 * portanto, recomenda-se informar textos que contextualizem seu uso para que facilite a compreensão do usuário.
 *
 * > O componente não altera o valor incial informado no *model*, portanto indica-se inicializa-lo caso ter necessidade.
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoSwitchBaseComponent implements ControlValueAccessor {
    private _disabled?;
    propagateChange: any;
    switchValue: boolean;
    /** Nome do componente. */
    name: string;
    /**
     * @optional
     *
     * @description
     *
     * Aplica o foco no elemento ao ser iniciado.
     *  > Caso mais de um elemento seja configurado com essa propriedade,
     * o último elemento declarado com ela terá o foco.
     *
     * @default `false`
     */
    autoFocus: boolean;
    /** Rótulo exibido pelo componente. */
    label?: string;
    /** Texto de apoio para o campo. */
    help?: string;
    /**
     * Texto exibido quando o valor do componente for `true`.
     *
     * @default `true`
     */
    labelOn?: string;
    set setLabelOn(label: string);
    /**
     * Texto exibido quando o valor do componente for `false`.
     *
     * @default `false`
     */
    labelOff?: string;
    set setLabelOff(label: string);
    /**
     * @optional
     *
     * @description
     *
     * Posição de exibição do rótulo.
     *
     * > Por padrão exibe à direita.
     */
    labelPosition?: PoSwitchLabelPosition;
    set setLabelPosition(position: PoSwitchLabelPosition);
    /**
     * @optional
     *
     * @description
     *
     * Indica se o campo será desabilitado.
     *
     * @default `false`
     */
    set disabled(disabled: boolean);
    get disabled(): boolean;
    /** Evento disparado ao alterar valor do campo. */
    change?: EventEmitter<any>;
    ngModelChange?: EventEmitter<any>;
    changeValue(value: any): void;
    eventClick(): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    writeValue(value: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoSwitchBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoSwitchBaseComponent, never, never, { "autoFocus": "p-auto-focus"; "setLabelOn": "p-label-on"; "setLabelOff": "p-label-off"; "setLabelPosition": "p-label-position"; "disabled": "p-disabled"; "name": "name"; "label": "p-label"; "help": "p-help"; }, { "change": "p-change"; "ngModelChange": "ngModelChange"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tc3dpdGNoLWJhc2UuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBvLXN3aXRjaC1iYXNlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUG9Td2l0Y2hMYWJlbFBvc2l0aW9uIH0gZnJvbSAnLi9wby1zd2l0Y2gtbGFiZWwtcG9zaXRpb24uZW51bSc7XG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIE8gY29tcG9uZW50ZSBgcG8tc3dpdGNoYCDDqSB1bSBbY2hlY2tib3hdKC9kb2N1bWVudGF0aW9uL3BvLWNoZWNrYm94LWdyb3VwKSBtYWlzIGludHVpdGl2bywgcG9pcyBmYXogYW5hbG9naWEgYSB1bSBpbnRlcnJ1cHRvci5cbiAqIERldmUgc2VyIHVzYWRvIHF1YW5kbyBkZXNlamEtc2UgdHJhbnNtaXRpciBhIGlkZWlhIGRlIGxpZ2FyIC8gZGVzbGlnYXIgdW1hIGZ1bmNpb25hbGlkYWRlIGVzcGVjw61maWNhLlxuICpcbiAqIFBvZGUtc2UgbGlnYXIgb3UgZGVsaWdhciBvIGJvdMOjbyB1dGlsaXphbmRvIGEgdGVjbGEgZGUgZXNwYcOnbyBvdSBvIGNsaXF1ZSBkbyBtb3VzZS5cbiAqXG4gKiBPIHRleHRvIGV4aWJpZG8gcG9kZSBzZXIgYWx0ZXJhZG8gZGUgYWNvcmRvIGNvbSBvIHZhbG9yIHNldGFkbyBhdW1lbnRhbmRvIGFzIHBvc3NpYmlsaWRhZGVzIGRlIHVzbyBkbyBjb21wb25lbnRlLFxuICogcG9ydGFudG8sIHJlY29tZW5kYS1zZSBpbmZvcm1hciB0ZXh0b3MgcXVlIGNvbnRleHR1YWxpemVtIHNldSB1c28gcGFyYSBxdWUgZmFjaWxpdGUgYSBjb21wcmVlbnPDo28gZG8gdXN1w6FyaW8uXG4gKlxuICogPiBPIGNvbXBvbmVudGUgbsOjbyBhbHRlcmEgbyB2YWxvciBpbmNpYWwgaW5mb3JtYWRvIG5vICptb2RlbCosIHBvcnRhbnRvIGluZGljYS1zZSBpbmljaWFsaXphLWxvIGNhc28gdGVyIG5lY2Vzc2lkYWRlLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQb1N3aXRjaEJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gICAgcHJpdmF0ZSBfZGlzYWJsZWQ/O1xuICAgIHByb3BhZ2F0ZUNoYW5nZTogYW55O1xuICAgIHN3aXRjaFZhbHVlOiBib29sZWFuO1xuICAgIC8qKiBOb21lIGRvIGNvbXBvbmVudGUuICovXG4gICAgbmFtZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBBcGxpY2EgbyBmb2NvIG5vIGVsZW1lbnRvIGFvIHNlciBpbmljaWFkby5cbiAgICAgKiAgPiBDYXNvIG1haXMgZGUgdW0gZWxlbWVudG8gc2VqYSBjb25maWd1cmFkbyBjb20gZXNzYSBwcm9wcmllZGFkZSxcbiAgICAgKiBvIMO6bHRpbW8gZWxlbWVudG8gZGVjbGFyYWRvIGNvbSBlbGEgdGVyw6EgbyBmb2NvLlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgICAqL1xuICAgIGF1dG9Gb2N1czogYm9vbGVhbjtcbiAgICAvKiogUsOzdHVsbyBleGliaWRvIHBlbG8gY29tcG9uZW50ZS4gKi9cbiAgICBsYWJlbD86IHN0cmluZztcbiAgICAvKiogVGV4dG8gZGUgYXBvaW8gcGFyYSBvIGNhbXBvLiAqL1xuICAgIGhlbHA/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGV4dG8gZXhpYmlkbyBxdWFuZG8gbyB2YWxvciBkbyBjb21wb25lbnRlIGZvciBgdHJ1ZWAuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBgdHJ1ZWBcbiAgICAgKi9cbiAgICBsYWJlbE9uPzogc3RyaW5nO1xuICAgIHNldCBzZXRMYWJlbE9uKGxhYmVsOiBzdHJpbmcpO1xuICAgIC8qKlxuICAgICAqIFRleHRvIGV4aWJpZG8gcXVhbmRvIG8gdmFsb3IgZG8gY29tcG9uZW50ZSBmb3IgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICAgKi9cbiAgICBsYWJlbE9mZj86IHN0cmluZztcbiAgICBzZXQgc2V0TGFiZWxPZmYobGFiZWw6IHN0cmluZyk7XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIFBvc2nDp8OjbyBkZSBleGliacOnw6NvIGRvIHLDs3R1bG8uXG4gICAgICpcbiAgICAgKiA+IFBvciBwYWRyw6NvIGV4aWJlIMOgIGRpcmVpdGEuXG4gICAgICovXG4gICAgbGFiZWxQb3NpdGlvbj86IFBvU3dpdGNoTGFiZWxQb3NpdGlvbjtcbiAgICBzZXQgc2V0TGFiZWxQb3NpdGlvbihwb3NpdGlvbjogUG9Td2l0Y2hMYWJlbFBvc2l0aW9uKTtcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogSW5kaWNhIHNlIG8gY2FtcG8gc2Vyw6EgZGVzYWJpbGl0YWRvLlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgICAqL1xuICAgIHNldCBkaXNhYmxlZChkaXNhYmxlZDogYm9vbGVhbik7XG4gICAgZ2V0IGRpc2FibGVkKCk6IGJvb2xlYW47XG4gICAgLyoqIEV2ZW50byBkaXNwYXJhZG8gYW8gYWx0ZXJhciB2YWxvciBkbyBjYW1wby4gKi9cbiAgICBjaGFuZ2U/OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBuZ01vZGVsQ2hhbmdlPzogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgY2hhbmdlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQ7XG4gICAgZXZlbnRDbGljaygpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQ7XG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZDtcbn1cbiJdfQ==