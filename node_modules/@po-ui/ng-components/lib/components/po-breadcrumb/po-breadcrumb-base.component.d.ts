import { PoBreadcrumbItem } from './po-breadcrumb-item.interface';
/**
 * @description
 *
 * Este componente gera uma estrutura de navegação que apresenta ao usuário a localização
 * da URL atual, exibindo as antecessoras conforme é realizado a navegação na aplicação.
 *
 * Quando não houver espaçamento suficiente para exibi-lás, o componente se encarrega também
 * de agrupar as URLs antecessoras, gerando assim um ícone que permite a visualização em cascata.
 *
 * Caso um endereço seja especificado na propriedade `p-favorite-service`, o componente permite ao usuário
 * favoritar a URL.
 *
 * Havendo necessidade de incluir parâmetros na requisição do serviço,
 * o componente dispõe da propriedade `p-params-service` que recebe um objeto contendo as informações.
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoBreadcrumbBaseComponent {
    itemsView: Array<PoBreadcrumbItem>;
    private _items;
    /**
     * @optional
     *
     * @description
     *
     * Permite definir uma URL no componente `po-breadcrumb` para favoritar ou desfavoritar.
     * > Para utilizar esta propriedade, o último `PoBreadcrumbItem` da lista de items da propriedade `p-items` deve ter um link informado.
     *
     * > A API deve estar preparada para retornar um objeto no formato `{ isFavorite: boolean }`.
     *
     * Ao iniciar, o `po-breadcrumb` faz um GET na URL definida na propriedade `p-favorite-service` e deve retornar a propriedade
     * `{ isFavorite: boolean }` do último `PoBreadcrumbItem` definido na lista de itens da propriedade `p-items`.
     *
     * Ao clicar em favoritar ou desfavoritar o `po-breadcrumb` faz um POST com o link e a propriedade `{ isFavorite: boolean }`
     * definidos no último item da propriedade `p-items`.
     *
     * > Caso algum parâmetro seja definido na propriedade `p-params-service`, o mesmo será enviado para a API e retornará
     * após fazer um GET ou POST.
     *
     * Exemplo de URL contendo o serviço de favoritar ou desfavoritar:
     *
     * ```
     * https://po-ui.io/sample/api/favorite
     * ```
     *
     * Ao fazer o GET o `po-breadcrumb` concatena o link com a URL de serviço. Exemplo:
     *
     * ```
     * GET http://<domain>/api/favorite?url=/example
     * ```
     *
     * ```
     * GET http://po.com.br/sample/api/favorite?url=/example
     * ```
     *
     * ```
     * POST
     * payload: { isFavorite: true, url: '/example' }
     * ```
     *
     * Caso possua parâmetros definidos na propriedade `p-params-service`:
     *
     * ```
     * POST
     * payload: { isFavorite: true, url: "/example", params: "{ id: 14, user: 'dev.po' }" }
     * ```
     *
     * Exemplos de retorno:
     *
     * ```
     * { isFavorite: true, url: "/example" }
     * ```
     *
     * ```
     * { isFavorite: false, url: "/example" }
     * ```
     *
     * ```
     * { isFavorite: false, url: "/example", params: "{ id: 14, user: 'dev.po' }" }
     * ```
     */
    favoriteService?: string;
    /**
     * @description
     *
     * Lista de itens do _breadcrumb_.
     *
     * **Exemplo:**
     * ```
     * { label: 'Po Portal', link: 'portal' }
     * ```
     */
    set items(items: Array<PoBreadcrumbItem>);
    get items(): Array<PoBreadcrumbItem>;
    /**
     * @optional
     *
     * @description
     *
     * Objeto que possibilita o envio de parâmetros adicionais à requisição.
     */
    paramsService?: object;
    protected clickoutListener: () => void;
    protected resizeListener: () => void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoBreadcrumbBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoBreadcrumbBaseComponent, never, never, { "items": "p-items"; "favoriteService": "p-favorite-service"; "paramsService": "p-params-service"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYnJlYWRjcnVtYi1iYXNlLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJwby1icmVhZGNydW1iLWJhc2UuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBvQnJlYWRjcnVtYkl0ZW0gfSBmcm9tICcuL3BvLWJyZWFkY3J1bWItaXRlbS5pbnRlcmZhY2UnO1xuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBFc3RlIGNvbXBvbmVudGUgZ2VyYSB1bWEgZXN0cnV0dXJhIGRlIG5hdmVnYcOnw6NvIHF1ZSBhcHJlc2VudGEgYW8gdXN1w6FyaW8gYSBsb2NhbGl6YcOnw6NvXG4gKiBkYSBVUkwgYXR1YWwsIGV4aWJpbmRvIGFzIGFudGVjZXNzb3JhcyBjb25mb3JtZSDDqSByZWFsaXphZG8gYSBuYXZlZ2HDp8OjbyBuYSBhcGxpY2HDp8Ojby5cbiAqXG4gKiBRdWFuZG8gbsOjbyBob3V2ZXIgZXNwYcOnYW1lbnRvIHN1ZmljaWVudGUgcGFyYSBleGliaS1sw6FzLCBvIGNvbXBvbmVudGUgc2UgZW5jYXJyZWdhIHRhbWLDqW1cbiAqIGRlIGFncnVwYXIgYXMgVVJMcyBhbnRlY2Vzc29yYXMsIGdlcmFuZG8gYXNzaW0gdW0gw61jb25lIHF1ZSBwZXJtaXRlIGEgdmlzdWFsaXphw6fDo28gZW0gY2FzY2F0YS5cbiAqXG4gKiBDYXNvIHVtIGVuZGVyZcOnbyBzZWphIGVzcGVjaWZpY2FkbyBuYSBwcm9wcmllZGFkZSBgcC1mYXZvcml0ZS1zZXJ2aWNlYCwgbyBjb21wb25lbnRlIHBlcm1pdGUgYW8gdXN1w6FyaW9cbiAqIGZhdm9yaXRhciBhIFVSTC5cbiAqXG4gKiBIYXZlbmRvIG5lY2Vzc2lkYWRlIGRlIGluY2x1aXIgcGFyw6JtZXRyb3MgbmEgcmVxdWlzacOnw6NvIGRvIHNlcnZpw6dvLFxuICogbyBjb21wb25lbnRlIGRpc3DDtWUgZGEgcHJvcHJpZWRhZGUgYHAtcGFyYW1zLXNlcnZpY2VgIHF1ZSByZWNlYmUgdW0gb2JqZXRvIGNvbnRlbmRvIGFzIGluZm9ybWHDp8O1ZXMuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBvQnJlYWRjcnVtYkJhc2VDb21wb25lbnQge1xuICAgIGl0ZW1zVmlldzogQXJyYXk8UG9CcmVhZGNydW1iSXRlbT47XG4gICAgcHJpdmF0ZSBfaXRlbXM7XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIFBlcm1pdGUgZGVmaW5pciB1bWEgVVJMIG5vIGNvbXBvbmVudGUgYHBvLWJyZWFkY3J1bWJgIHBhcmEgZmF2b3JpdGFyIG91IGRlc2Zhdm9yaXRhci5cbiAgICAgKiA+IFBhcmEgdXRpbGl6YXIgZXN0YSBwcm9wcmllZGFkZSwgbyDDumx0aW1vIGBQb0JyZWFkY3J1bWJJdGVtYCBkYSBsaXN0YSBkZSBpdGVtcyBkYSBwcm9wcmllZGFkZSBgcC1pdGVtc2AgZGV2ZSB0ZXIgdW0gbGluayBpbmZvcm1hZG8uXG4gICAgICpcbiAgICAgKiA+IEEgQVBJIGRldmUgZXN0YXIgcHJlcGFyYWRhIHBhcmEgcmV0b3JuYXIgdW0gb2JqZXRvIG5vIGZvcm1hdG8gYHsgaXNGYXZvcml0ZTogYm9vbGVhbiB9YC5cbiAgICAgKlxuICAgICAqIEFvIGluaWNpYXIsIG8gYHBvLWJyZWFkY3J1bWJgIGZheiB1bSBHRVQgbmEgVVJMIGRlZmluaWRhIG5hIHByb3ByaWVkYWRlIGBwLWZhdm9yaXRlLXNlcnZpY2VgIGUgZGV2ZSByZXRvcm5hciBhIHByb3ByaWVkYWRlXG4gICAgICogYHsgaXNGYXZvcml0ZTogYm9vbGVhbiB9YCBkbyDDumx0aW1vIGBQb0JyZWFkY3J1bWJJdGVtYCBkZWZpbmlkbyBuYSBsaXN0YSBkZSBpdGVucyBkYSBwcm9wcmllZGFkZSBgcC1pdGVtc2AuXG4gICAgICpcbiAgICAgKiBBbyBjbGljYXIgZW0gZmF2b3JpdGFyIG91IGRlc2Zhdm9yaXRhciBvIGBwby1icmVhZGNydW1iYCBmYXogdW0gUE9TVCBjb20gbyBsaW5rIGUgYSBwcm9wcmllZGFkZSBgeyBpc0Zhdm9yaXRlOiBib29sZWFuIH1gXG4gICAgICogZGVmaW5pZG9zIG5vIMO6bHRpbW8gaXRlbSBkYSBwcm9wcmllZGFkZSBgcC1pdGVtc2AuXG4gICAgICpcbiAgICAgKiA+IENhc28gYWxndW0gcGFyw6JtZXRybyBzZWphIGRlZmluaWRvIG5hIHByb3ByaWVkYWRlIGBwLXBhcmFtcy1zZXJ2aWNlYCwgbyBtZXNtbyBzZXLDoSBlbnZpYWRvIHBhcmEgYSBBUEkgZSByZXRvcm5hcsOhXG4gICAgICogYXDDs3MgZmF6ZXIgdW0gR0VUIG91IFBPU1QuXG4gICAgICpcbiAgICAgKiBFeGVtcGxvIGRlIFVSTCBjb250ZW5kbyBvIHNlcnZpw6dvIGRlIGZhdm9yaXRhciBvdSBkZXNmYXZvcml0YXI6XG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiBodHRwczovL3BvLXVpLmlvL3NhbXBsZS9hcGkvZmF2b3JpdGVcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEFvIGZhemVyIG8gR0VUIG8gYHBvLWJyZWFkY3J1bWJgIGNvbmNhdGVuYSBvIGxpbmsgY29tIGEgVVJMIGRlIHNlcnZpw6dvLiBFeGVtcGxvOlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogR0VUIGh0dHA6Ly88ZG9tYWluPi9hcGkvZmF2b3JpdGU/dXJsPS9leGFtcGxlXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiBHRVQgaHR0cDovL3BvLmNvbS5ici9zYW1wbGUvYXBpL2Zhdm9yaXRlP3VybD0vZXhhbXBsZVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogUE9TVFxuICAgICAqIHBheWxvYWQ6IHsgaXNGYXZvcml0ZTogdHJ1ZSwgdXJsOiAnL2V4YW1wbGUnIH1cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIENhc28gcG9zc3VhIHBhcsOibWV0cm9zIGRlZmluaWRvcyBuYSBwcm9wcmllZGFkZSBgcC1wYXJhbXMtc2VydmljZWA6XG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiBQT1NUXG4gICAgICogcGF5bG9hZDogeyBpc0Zhdm9yaXRlOiB0cnVlLCB1cmw6IFwiL2V4YW1wbGVcIiwgcGFyYW1zOiBcInsgaWQ6IDE0LCB1c2VyOiAnZGV2LnBvJyB9XCIgfVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogRXhlbXBsb3MgZGUgcmV0b3JubzpcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIHsgaXNGYXZvcml0ZTogdHJ1ZSwgdXJsOiBcIi9leGFtcGxlXCIgfVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogeyBpc0Zhdm9yaXRlOiBmYWxzZSwgdXJsOiBcIi9leGFtcGxlXCIgfVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogeyBpc0Zhdm9yaXRlOiBmYWxzZSwgdXJsOiBcIi9leGFtcGxlXCIsIHBhcmFtczogXCJ7IGlkOiAxNCwgdXNlcjogJ2Rldi5wbycgfVwiIH1cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBmYXZvcml0ZVNlcnZpY2U/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBMaXN0YSBkZSBpdGVucyBkbyBfYnJlYWRjcnVtYl8uXG4gICAgICpcbiAgICAgKiAqKkV4ZW1wbG86KipcbiAgICAgKiBgYGBcbiAgICAgKiB7IGxhYmVsOiAnUG8gUG9ydGFsJywgbGluazogJ3BvcnRhbCcgfVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHNldCBpdGVtcyhpdGVtczogQXJyYXk8UG9CcmVhZGNydW1iSXRlbT4pO1xuICAgIGdldCBpdGVtcygpOiBBcnJheTxQb0JyZWFkY3J1bWJJdGVtPjtcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogT2JqZXRvIHF1ZSBwb3NzaWJpbGl0YSBvIGVudmlvIGRlIHBhcsOibWV0cm9zIGFkaWNpb25haXMgw6AgcmVxdWlzacOnw6NvLlxuICAgICAqL1xuICAgIHBhcmFtc1NlcnZpY2U/OiBvYmplY3Q7XG4gICAgcHJvdGVjdGVkIGNsaWNrb3V0TGlzdGVuZXI6ICgpID0+IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHJlc2l6ZUxpc3RlbmVyOiAoKSA9PiB2b2lkO1xufVxuIl19