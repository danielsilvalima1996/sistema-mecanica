import { AfterViewInit, DoCheck, ElementRef, IterableDiffers, OnDestroy, Renderer2 } from '@angular/core';
import { PoBreadcrumbBaseComponent } from './po-breadcrumb-base.component';
import { PoBreadcrumbItem } from './po-breadcrumb-item.interface';
/**
 * @docsExtends PoBreadcrumbBaseComponent
 *
 * @example
 *
 * <example name="po-breadcrumb-basic" title="PO Breadcrumb Basic">
 *  <file name="sample-po-breadcrumb-basic/sample-po-breadcrumb-basic.component.html"> </file>
 *  <file name="sample-po-breadcrumb-basic/sample-po-breadcrumb-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-breadcrumb-labs" title="PO Breadcrumb Labs">
 *  <file name="sample-po-breadcrumb-labs/sample-po-breadcrumb-labs.component.html"> </file>
 *  <file name="sample-po-breadcrumb-labs/sample-po-breadcrumb-labs.component.ts"> </file>
 * </example>
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoBreadcrumbComponent extends PoBreadcrumbBaseComponent implements AfterViewInit, DoCheck, OnDestroy {
    private element;
    renderer: Renderer2;
    showDropdown: boolean;
    showDropdownToggle: boolean;
    dropdownItems: Array<PoBreadcrumbItem>;
    private _breadcrumbItemsLenght;
    private calculatedElement;
    private differ;
    private hiddenWithoutResize;
    private initialized;
    private timeoutResize;
    breadcrumbElement: ElementRef;
    dropdownIcon: ElementRef;
    constructor(differs: IterableDiffers, element: ElementRef, renderer: Renderer2);
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    ngOnDestroy(): void;
    toggleDropdown(): void;
    private wasClickedonDropdown;
    private checkClickOutElement;
    private checkChangeOnItems;
    private calcBreadcrumb;
    private getBreadcrumbFavoriteWidth;
    private getBreadcrumbWidth;
    private calcBreadcrumbItemsWidth;
    private enableBreadcrumbResponsive;
    private disableBreadcrumbResponsive;
    private debounceResize;
    private initBreadcrumbSize;
    private initializeClickoutListener;
    private initializeResizeListener;
    private removeClickoutListener;
    private removeResizeListener;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoBreadcrumbComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PoBreadcrumbComponent, "po-breadcrumb", never, {}, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYnJlYWRjcnVtYi5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicG8tYnJlYWRjcnVtYi5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgRG9DaGVjaywgRWxlbWVudFJlZiwgSXRlcmFibGVEaWZmZXJzLCBPbkRlc3Ryb3ksIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUG9CcmVhZGNydW1iQmFzZUNvbXBvbmVudCB9IGZyb20gJy4vcG8tYnJlYWRjcnVtYi1iYXNlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQb0JyZWFkY3J1bWJJdGVtIH0gZnJvbSAnLi9wby1icmVhZGNydW1iLWl0ZW0uaW50ZXJmYWNlJztcbi8qKlxuICogQGRvY3NFeHRlbmRzIFBvQnJlYWRjcnVtYkJhc2VDb21wb25lbnRcbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJwby1icmVhZGNydW1iLWJhc2ljXCIgdGl0bGU9XCJQTyBCcmVhZGNydW1iIEJhc2ljXCI+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1icmVhZGNydW1iLWJhc2ljL3NhbXBsZS1wby1icmVhZGNydW1iLWJhc2ljLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWJyZWFkY3J1bWItYmFzaWMvc2FtcGxlLXBvLWJyZWFkY3J1bWItYmFzaWMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tYnJlYWRjcnVtYi1sYWJzXCIgdGl0bGU9XCJQTyBCcmVhZGNydW1iIExhYnNcIj5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWJyZWFkY3J1bWItbGFicy9zYW1wbGUtcG8tYnJlYWRjcnVtYi1sYWJzLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWJyZWFkY3J1bWItbGFicy9zYW1wbGUtcG8tYnJlYWRjcnVtYi1sYWJzLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBvQnJlYWRjcnVtYkNvbXBvbmVudCBleHRlbmRzIFBvQnJlYWRjcnVtYkJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBEb0NoZWNrLCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgZWxlbWVudDtcbiAgICByZW5kZXJlcjogUmVuZGVyZXIyO1xuICAgIHNob3dEcm9wZG93bjogYm9vbGVhbjtcbiAgICBzaG93RHJvcGRvd25Ub2dnbGU6IGJvb2xlYW47XG4gICAgZHJvcGRvd25JdGVtczogQXJyYXk8UG9CcmVhZGNydW1iSXRlbT47XG4gICAgcHJpdmF0ZSBfYnJlYWRjcnVtYkl0ZW1zTGVuZ2h0O1xuICAgIHByaXZhdGUgY2FsY3VsYXRlZEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBkaWZmZXI7XG4gICAgcHJpdmF0ZSBoaWRkZW5XaXRob3V0UmVzaXplO1xuICAgIHByaXZhdGUgaW5pdGlhbGl6ZWQ7XG4gICAgcHJpdmF0ZSB0aW1lb3V0UmVzaXplO1xuICAgIGJyZWFkY3J1bWJFbGVtZW50OiBFbGVtZW50UmVmO1xuICAgIGRyb3Bkb3duSWNvbjogRWxlbWVudFJlZjtcbiAgICBjb25zdHJ1Y3RvcihkaWZmZXJzOiBJdGVyYWJsZURpZmZlcnMsIGVsZW1lbnQ6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcjIpO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nRG9DaGVjaygpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgdG9nZ2xlRHJvcGRvd24oKTogdm9pZDtcbiAgICBwcml2YXRlIHdhc0NsaWNrZWRvbkRyb3Bkb3duO1xuICAgIHByaXZhdGUgY2hlY2tDbGlja091dEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBjaGVja0NoYW5nZU9uSXRlbXM7XG4gICAgcHJpdmF0ZSBjYWxjQnJlYWRjcnVtYjtcbiAgICBwcml2YXRlIGdldEJyZWFkY3J1bWJGYXZvcml0ZVdpZHRoO1xuICAgIHByaXZhdGUgZ2V0QnJlYWRjcnVtYldpZHRoO1xuICAgIHByaXZhdGUgY2FsY0JyZWFkY3J1bWJJdGVtc1dpZHRoO1xuICAgIHByaXZhdGUgZW5hYmxlQnJlYWRjcnVtYlJlc3BvbnNpdmU7XG4gICAgcHJpdmF0ZSBkaXNhYmxlQnJlYWRjcnVtYlJlc3BvbnNpdmU7XG4gICAgcHJpdmF0ZSBkZWJvdW5jZVJlc2l6ZTtcbiAgICBwcml2YXRlIGluaXRCcmVhZGNydW1iU2l6ZTtcbiAgICBwcml2YXRlIGluaXRpYWxpemVDbGlja291dExpc3RlbmVyO1xuICAgIHByaXZhdGUgaW5pdGlhbGl6ZVJlc2l6ZUxpc3RlbmVyO1xuICAgIHByaXZhdGUgcmVtb3ZlQ2xpY2tvdXRMaXN0ZW5lcjtcbiAgICBwcml2YXRlIHJlbW92ZVJlc2l6ZUxpc3RlbmVyO1xufVxuIl19