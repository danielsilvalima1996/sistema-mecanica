import { EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import { PoDateService } from '../../services/po-date/po-date.service';
import { PoTableAction } from './interfaces/po-table-action.interface';
import { PoTableColumn } from './interfaces/po-table-column.interface';
import { PoTableColumnSort } from './interfaces/po-table-column-sort.interface';
import { PoTableLiterals } from './interfaces/po-table-literals.interface';
import * as ɵngcc0 from '@angular/core';
export declare const poTableContainer: string[];
export declare const poTableContainerDefault = "border";
export declare const poTableLiteralsDefault: {
    en: PoTableLiterals;
    es: PoTableLiterals;
    pt: PoTableLiterals;
    ru: PoTableLiterals;
};
/**
 * @description
 *
 * Este componente de tabela é utilizado para exibição de dados com diferentes tipos como por exemplo textos, data, horas e números com
 * formato personalizado.
 *
 * Também é possivel criar tabelas com ordenação de dados, linhas com detalhes, coluna para seleção de linhas, coluna com ações e também
 * carregamento por demanda através do botão **Carregar mais resultados**.
 *
 * > As linhas de detalhes podem também ser customizadas através do [`p-table-row-template`](/documentation/po-table-row-template).
 *
 * O componente permite gerenciar a exibição das colunas dinamicamente. Esta funcionalidade pode ser acessada através do ícone de engrenagem
 * no canto superior direito do cabeçalho da tabela.
 *
 * Caso a largura de todas as colunas forem definidas e o total ultrapassar o tamanho tabela, será exibido um *scroll* na horizontal para a
 * completa visualização dos dados.
 */
export declare abstract class PoTableBaseComponent implements OnChanges {
    private poDate;
    private _actions?;
    private _columns;
    private _container?;
    private _height?;
    private _hideDetail?;
    private _hideTextOverflow?;
    private _items;
    private _literals;
    private _loading?;
    private _selectable?;
    private _columnManager?;
    allColumnsWidthPixels: boolean;
    columnMasterDetail: PoTableColumn;
    hasMainColumns: boolean;
    mainColumns: Array<PoTableColumn>;
    selectAll: boolean;
    sortedColumn: {
        property: PoTableColumn;
        ascending: boolean;
    };
    subtitleColumns: Array<PoTableColumn>;
    /**
     * @description
     *
     * Lista de itens da tabela.
     * > Se falso, será inicializado como um *array* vazio.
     */
    set items(items: Array<any>);
    get items(): Array<any>;
    /**
     * @optional
     *
     * @description
     *
     * Lista das colunas da tabela, deve receber um *array* de objetos que implementam a interface `PoTableColumn`.
     * Por padrão receberá como valor a primeira coluna da lista de itens da tabela.
     * > Caso não encontre valor, a mensagem 'Nenhuma definição de colunas' será exibida.
     *
     */
    set columns(columns: Array<PoTableColumn>);
    get columns(): Array<PoTableColumn>;
    /**
     * @optional
     *
     * @description
     *
     * Adiciona um contorno arredondado ao `po-table`, as opções são:
     * - `border`: com bordas/linhas.
     * - `shadow`: com sombras.
     *
     * @default `border`
     */
    set container(value: string);
    get container(): string;
    /**
     * @optional
     *
     * @description
     *
     * Se verdadeiro, habilita a quebra de texto ao transborda-lo dentro de qualquer coluna.
     * > Quando ocorrer a quebra de texto, ao passar o mouse no conteúdo da célula,
     * o mesmo será exibido através do [`po-tooltip`](/documentation/po-tooltip).
     */
    set hideTextOverflow(hideTextOverflow: boolean);
    get hideTextOverflow(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Define a altura da tabela em *pixels* e fixa o cabeçalho.
     */
    set height(height: number);
    get height(): number;
    /**
     * @optional
     *
     * @description
     *
     * Habilita a visualização da lista de detalhes de cada linha da coluna.
     *
     * @default `false`
     */
    set hideDetail(hideDetail: boolean);
    get hideDetail(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-table`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoTableLiterals = {
     *    loadMoreData: 'Buscar mais dados',
     *    loadingData: 'Processando',
     *    noColumns: 'Sem colunas',
     *    noData: 'Sem dados',
     *    seeCompleteSubtitle: 'Mostrar legenda completa',
     *    completeSubtitle: 'Todas legendas'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoTableLiterals = {
     *    noData: 'Sem dados'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-table
     *   [p-literals]="customLiterals">
     * </po-table>
     * ```
     *
     *  > O objeto padrão de literais será traduzido de acordo com o idioma do *browser* (pt, en, es).
     */
    set literals(value: PoTableLiterals);
    get literals(): PoTableLiterals;
    /**
     * @optional
     *
     * @description
     *
     * Bloqueia interação do usuário com os dados da _table_, apresentando um _loading_ ao centro da mesma.
     *
     * @default `false`
     */
    set loading(loading: boolean);
    get loading(): boolean;
    /**
     * @optional
     *
     * @deprecated 3.x.x
     *
     * @description
     *
     * ***Deprecated 3.x.x***
     *
     * > Esta propriedade está depreciada, utilize a propriedade `p-selectable`.
     *
     * Habilita na primeira coluna a opção de selecionar linhas,
     * todos os itens da lista possuem a propriedade dinâmica `$selected` para identificar se a linha está selecionada.
     * > Exemplo: `item.$selected` ou `item['$selected']`.
     * > Os itens filhos possuem comportamento independente do item pai.
     *
     * @default `false`
     */
    set checkbox(checkbox: boolean);
    get checkbox(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Define uma lista de ações.
     *
     * Quando houver apenas uma ação definida ela será exibida diretamente na coluna, caso contrário, o componente
     * se encarrega de agrupá-las exibindo o ícone [**po-icon-more**](/guides/icons) que listará as ações ao ser clicado.
     *
     * **A coluna de ações não será exibida quando:**
     *  - a lista conter valores inválidos ou indefinidos.
     *  - tenha uma única ação e a mesma não for visível.
     */
    set actions(actions: Array<PoTableAction>);
    get actions(): Array<PoTableAction>;
    /**
     * @optional
     *
     * @description
     *
     * Permite a seleção de linhas na tabela e, caso a propriedade `p-single-select` esteja definida será possível
     * selecionar apenas uma única linha.
     *
     * **Importante:**
     *  - As linhas de detalhe definidas em `PoTableDetail` possuem comportamento independente da linha mestre;
     *  - Cada linha possui por padrão a propriedade dinâmica `$selected`, na qual é possível validar se a linha
     * está selecionada, por exemplo: `item.$selected` ou `item['$selected']`.
     *
     * @default `false`
     */
    set selectable(value: boolean);
    get selectable(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Permite que o gerenciador de colunas, responsável pela definição de quais colunas serão exibidas, seja escondido.
     *
     * @default `false`
     */
    hideColumnsManager?: boolean;
    /**
     * @optional
     *
     * @description
     *
     * Habilita em todas as colunas a opção de ordenação de dados. Caso a coluna seja do tipo 'data' ou 'dateTime' a
     * mesma deve respeitar os tipos de entrada definidos para que sejam ordenadas.
     *
     * @default `false`
     */
    sort?: boolean;
    set setSort(sort: string);
    /**
     * @description
     *
     * Se verdadeiro, torna habilitado o botão "Carregar mais resultados".
     *
     * @default `false`
     */
    showMoreDisabled?: boolean;
    set setShowMoreDisabled(showMoreDisabled: string);
    /**
     * @description
     *
     * Habilita ou desabilita o estilo listrado da tabela (`striped`).
     * > Recomendado para tabelas com maior número de dados, facilitando a sua visualização na tabela.
     *
     * @default `false`
     */
    striped?: boolean;
    set setStriped(striped: string);
    /**
     * @description
     *
     * Esconde o *checkbox* para seleção de todas as linhas.
     *
     * > Sempre receberá *true* caso a seleção de apenas uma linha esteja ativa.
     *
     * @default `false`
     */
    hideSelectAll?: boolean;
    set setHideSelectAll(hideSelectAll: string);
    /**
     * @description
     *
     * Define que somente uma linha da tabela pode ser selecionada.
     *
     * > Esta definição não se aplica aos itens filhos, os mesmos possuem comportamento independente do item pai.
     */
    singleSelect?: boolean;
    set setSingleSelect(value: string);
    /**
     * @optional
     *
     * @description
     *
     * Define uma quantidade máxima de colunas que serão exibidas na tabela.
     *
     * Quando chegar no valor informado, as colunas que não estiverem selecionadas ficarão
     * desabilitadas e caso houver mais colunas visíveis do que o permitido, as excedentes
     * serão ignoradas por ordem de posição.
     */
    maxColumns?: number;
    /** Evento executado quando todas as linhas são selecionadas por meio do *checkbox* que seleciona todas as linhas. */
    allSelected?: EventEmitter<any>;
    /** Evento executado quando a seleção das linhas é desmarcada por meio do *checkbox* que seleciona todas as linhas. */
    allUnselected?: EventEmitter<any>;
    /**
     * Evento executado ao colapsar uma linha do `po-table`.
     *
     * > Como parâmetro o componente envia o item colapsado.
     */
    collapsed?: EventEmitter<any>;
    /**
     * Evento executado ao expandir uma linha do `po-table`.
     *
     * > Como parâmetro o componente envia o item expandido.
     */
    expanded?: EventEmitter<any>;
    /** Evento executado ao selecionar uma linha do `po-table`. */
    selected?: EventEmitter<any>;
    /**
     * Recebe uma ação de clique para o botão "Carregar mais resultados", caso nenhuma ação for definida o mesmo
     * não é visível.
     *
     * Recebe um objeto `{ column, type }` onde:
     *
     * - column (`PoTableColumn`): objeto da coluna que está ordenada.
     * - type (`PoTableColumnSortType`): tipo da ordenação.
     */
    showMore?: EventEmitter<PoTableColumnSort>;
    /**
     * Evento executado ao ordenar colunas da tabela.
     *
     * Recebe um objeto `{ column, type }` onde:
     *
     * - column (`PoTableColumn`): objeto da coluna que foi clicada/ordenada.
     * - type (`PoTableColumnSortType`): tipo da ordenação.
     */
    sortBy?: EventEmitter<PoTableColumnSort>;
    /** Evento executado ao desmarcar a seleção de uma linha do `po-table`. */
    unselected?: EventEmitter<any>;
    get hasColumns(): boolean;
    get hasItems(): boolean;
    get nameColumnDetail(): string;
    get validColumns(): PoTableColumn[];
    private get sortType();
    constructor(poDate: PoDateService);
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Método que colapsa uma linha com detalhe quando executada.
     *
     * @param { number } rowIndex Índice da linha que será colapsada.
     * > Ao reordenar os dados da tabela, o valor contido neste índice será alterado conforme a ordenação.
     */
    collapse(rowIndex: number): void;
    /**
     * Método que expande uma linha com detalhe quando executada.
     *
     * @param { number } rowIndex Índice da linha que será expandida.
     * > Ao reordenar os dados da tabela, o valor contido neste índice será alterado conforme a ordenação.
     */
    expand(rowIndex: number): void;
    /**
     * Retorna as linhas do `po-table` que estão selecionadas.
     */
    getSelectedRows(): any[];
    /**
     * Retorna as linhas do `po-table` que não estão selecionadas.
     */
    getUnselectedRows(): any[];
    selectAllRows(): void;
    selectRow(row: any): void;
    selectDetailRow(row: any): void;
    getClassColor(row: any, column: any): string;
    toggleDetail(row: any): void;
    toggleRowAction(row: any): void;
    sortColumn(column: PoTableColumn): void;
    onShowMore(): void;
    protected abstract calculateHeightTableContainer(height: any): any;
    protected abstract calculateWidthHeaders(): any;
    protected getDefaultColumns(item: any): {
        label: string;
        property: string;
    }[];
    private configAfterSelectRow;
    private emitExpandEvents;
    private emitSelectAllEvents;
    private emitSelectEvents;
    private getColumnColor;
    private getColumnMasterDetail;
    private getMainColumns;
    private getSubtitleColumns;
    private isEverySelected;
    private onChangeColumns;
    private setColumnLink;
    private setColumnMasterDetail;
    private setMainColumns;
    private setShowDetail;
    private setSubtitleColumns;
    private sortArray;
    private unselectOtherRows;
    private verifyWidthColumnsPixels;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoTableBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoTableBaseComponent, never, never, { "hideColumnsManager": "p-hide-columns-manager"; "items": "p-items"; "columns": "p-columns"; "container": "p-container"; "hideTextOverflow": "p-hide-text-overflow"; "height": "p-height"; "hideDetail": "p-hide-detail"; "literals": "p-literals"; "loading": "p-loading"; "checkbox": "p-checkbox"; "selectable": "p-selectable"; "actions": "p-actions"; "setSort": "p-sort"; "setShowMoreDisabled": "p-show-more-disabled"; "setStriped": "p-striped"; "setHideSelectAll": "p-hide-select-all"; "setSingleSelect": "p-single-select"; "maxColumns": "p-max-columns"; }, { "allSelected": "p-all-selected"; "allUnselected": "p-all-unselected"; "collapsed": "p-collapsed"; "expanded": "p-expanded"; "selected": "p-selected"; "showMore": "p-show-more"; "sortBy": "p-sort-by"; "unselected": "p-unselected"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGFibGUtYmFzZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicG8tdGFibGUtYmFzZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUG9EYXRlU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3BvLWRhdGUvcG8tZGF0ZS5zZXJ2aWNlJztcbmltcG9ydCB7IFBvVGFibGVBY3Rpb24gfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tdGFibGUtYWN0aW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb1RhYmxlQ29sdW1uIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BvLXRhYmxlLWNvbHVtbi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9UYWJsZUNvbHVtblNvcnQgfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tdGFibGUtY29sdW1uLXNvcnQuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvVGFibGVMaXRlcmFscyB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby10YWJsZS1saXRlcmFscy5pbnRlcmZhY2UnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgcG9UYWJsZUNvbnRhaW5lcjogc3RyaW5nW107XG5leHBvcnQgZGVjbGFyZSBjb25zdCBwb1RhYmxlQ29udGFpbmVyRGVmYXVsdCA9IFwiYm9yZGVyXCI7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBwb1RhYmxlTGl0ZXJhbHNEZWZhdWx0OiB7XG4gICAgZW46IFBvVGFibGVMaXRlcmFscztcbiAgICBlczogUG9UYWJsZUxpdGVyYWxzO1xuICAgIHB0OiBQb1RhYmxlTGl0ZXJhbHM7XG4gICAgcnU6IFBvVGFibGVMaXRlcmFscztcbn07XG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEVzdGUgY29tcG9uZW50ZSBkZSB0YWJlbGEgw6kgdXRpbGl6YWRvIHBhcmEgZXhpYmnDp8OjbyBkZSBkYWRvcyBjb20gZGlmZXJlbnRlcyB0aXBvcyBjb21vIHBvciBleGVtcGxvIHRleHRvcywgZGF0YSwgaG9yYXMgZSBuw7ptZXJvcyBjb21cbiAqIGZvcm1hdG8gcGVyc29uYWxpemFkby5cbiAqXG4gKiBUYW1iw6ltIMOpIHBvc3NpdmVsIGNyaWFyIHRhYmVsYXMgY29tIG9yZGVuYcOnw6NvIGRlIGRhZG9zLCBsaW5oYXMgY29tIGRldGFsaGVzLCBjb2x1bmEgcGFyYSBzZWxlw6fDo28gZGUgbGluaGFzLCBjb2x1bmEgY29tIGHDp8O1ZXMgZSB0YW1iw6ltXG4gKiBjYXJyZWdhbWVudG8gcG9yIGRlbWFuZGEgYXRyYXbDqXMgZG8gYm90w6NvICoqQ2FycmVnYXIgbWFpcyByZXN1bHRhZG9zKiouXG4gKlxuICogPiBBcyBsaW5oYXMgZGUgZGV0YWxoZXMgcG9kZW0gdGFtYsOpbSBzZXIgY3VzdG9taXphZGFzIGF0cmF2w6lzIGRvIFtgcC10YWJsZS1yb3ctdGVtcGxhdGVgXSgvZG9jdW1lbnRhdGlvbi9wby10YWJsZS1yb3ctdGVtcGxhdGUpLlxuICpcbiAqIE8gY29tcG9uZW50ZSBwZXJtaXRlIGdlcmVuY2lhciBhIGV4aWJpw6fDo28gZGFzIGNvbHVuYXMgZGluYW1pY2FtZW50ZS4gRXN0YSBmdW5jaW9uYWxpZGFkZSBwb2RlIHNlciBhY2Vzc2FkYSBhdHJhdsOpcyBkbyDDrWNvbmUgZGUgZW5ncmVuYWdlbVxuICogbm8gY2FudG8gc3VwZXJpb3IgZGlyZWl0byBkbyBjYWJlw6dhbGhvIGRhIHRhYmVsYS5cbiAqXG4gKiBDYXNvIGEgbGFyZ3VyYSBkZSB0b2RhcyBhcyBjb2x1bmFzIGZvcmVtIGRlZmluaWRhcyBlIG8gdG90YWwgdWx0cmFwYXNzYXIgbyB0YW1hbmhvIHRhYmVsYSwgc2Vyw6EgZXhpYmlkbyB1bSAqc2Nyb2xsKiBuYSBob3Jpem9udGFsIHBhcmEgYVxuICogY29tcGxldGEgdmlzdWFsaXphw6fDo28gZG9zIGRhZG9zLlxuICovXG5leHBvcnQgZGVjbGFyZSBhYnN0cmFjdCBjbGFzcyBQb1RhYmxlQmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gICAgcHJpdmF0ZSBwb0RhdGU7XG4gICAgcHJpdmF0ZSBfYWN0aW9ucz87XG4gICAgcHJpdmF0ZSBfY29sdW1ucztcbiAgICBwcml2YXRlIF9jb250YWluZXI/O1xuICAgIHByaXZhdGUgX2hlaWdodD87XG4gICAgcHJpdmF0ZSBfaGlkZURldGFpbD87XG4gICAgcHJpdmF0ZSBfaGlkZVRleHRPdmVyZmxvdz87XG4gICAgcHJpdmF0ZSBfaXRlbXM7XG4gICAgcHJpdmF0ZSBfbGl0ZXJhbHM7XG4gICAgcHJpdmF0ZSBfbG9hZGluZz87XG4gICAgcHJpdmF0ZSBfc2VsZWN0YWJsZT87XG4gICAgcHJpdmF0ZSBfY29sdW1uTWFuYWdlcj87XG4gICAgYWxsQ29sdW1uc1dpZHRoUGl4ZWxzOiBib29sZWFuO1xuICAgIGNvbHVtbk1hc3RlckRldGFpbDogUG9UYWJsZUNvbHVtbjtcbiAgICBoYXNNYWluQ29sdW1uczogYm9vbGVhbjtcbiAgICBtYWluQ29sdW1uczogQXJyYXk8UG9UYWJsZUNvbHVtbj47XG4gICAgc2VsZWN0QWxsOiBib29sZWFuO1xuICAgIHNvcnRlZENvbHVtbjoge1xuICAgICAgICBwcm9wZXJ0eTogUG9UYWJsZUNvbHVtbjtcbiAgICAgICAgYXNjZW5kaW5nOiBib29sZWFuO1xuICAgIH07XG4gICAgc3VidGl0bGVDb2x1bW5zOiBBcnJheTxQb1RhYmxlQ29sdW1uPjtcbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIExpc3RhIGRlIGl0ZW5zIGRhIHRhYmVsYS5cbiAgICAgKiA+IFNlIGZhbHNvLCBzZXLDoSBpbmljaWFsaXphZG8gY29tbyB1bSAqYXJyYXkqIHZhemlvLlxuICAgICAqL1xuICAgIHNldCBpdGVtcyhpdGVtczogQXJyYXk8YW55Pik7XG4gICAgZ2V0IGl0ZW1zKCk6IEFycmF5PGFueT47XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIExpc3RhIGRhcyBjb2x1bmFzIGRhIHRhYmVsYSwgZGV2ZSByZWNlYmVyIHVtICphcnJheSogZGUgb2JqZXRvcyBxdWUgaW1wbGVtZW50YW0gYSBpbnRlcmZhY2UgYFBvVGFibGVDb2x1bW5gLlxuICAgICAqIFBvciBwYWRyw6NvIHJlY2ViZXLDoSBjb21vIHZhbG9yIGEgcHJpbWVpcmEgY29sdW5hIGRhIGxpc3RhIGRlIGl0ZW5zIGRhIHRhYmVsYS5cbiAgICAgKiA+IENhc28gbsOjbyBlbmNvbnRyZSB2YWxvciwgYSBtZW5zYWdlbSAnTmVuaHVtYSBkZWZpbmnDp8OjbyBkZSBjb2x1bmFzJyBzZXLDoSBleGliaWRhLlxuICAgICAqXG4gICAgICovXG4gICAgc2V0IGNvbHVtbnMoY29sdW1uczogQXJyYXk8UG9UYWJsZUNvbHVtbj4pO1xuICAgIGdldCBjb2x1bW5zKCk6IEFycmF5PFBvVGFibGVDb2x1bW4+O1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBBZGljaW9uYSB1bSBjb250b3JubyBhcnJlZG9uZGFkbyBhbyBgcG8tdGFibGVgLCBhcyBvcMOnw7VlcyBzw6NvOlxuICAgICAqIC0gYGJvcmRlcmA6IGNvbSBib3JkYXMvbGluaGFzLlxuICAgICAqIC0gYHNoYWRvd2A6IGNvbSBzb21icmFzLlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgYGJvcmRlcmBcbiAgICAgKi9cbiAgICBzZXQgY29udGFpbmVyKHZhbHVlOiBzdHJpbmcpO1xuICAgIGdldCBjb250YWluZXIoKTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBTZSB2ZXJkYWRlaXJvLCBoYWJpbGl0YSBhIHF1ZWJyYSBkZSB0ZXh0byBhbyB0cmFuc2JvcmRhLWxvIGRlbnRybyBkZSBxdWFscXVlciBjb2x1bmEuXG4gICAgICogPiBRdWFuZG8gb2NvcnJlciBhIHF1ZWJyYSBkZSB0ZXh0bywgYW8gcGFzc2FyIG8gbW91c2Ugbm8gY29udGXDumRvIGRhIGPDqWx1bGEsXG4gICAgICogbyBtZXNtbyBzZXLDoSBleGliaWRvIGF0cmF2w6lzIGRvIFtgcG8tdG9vbHRpcGBdKC9kb2N1bWVudGF0aW9uL3BvLXRvb2x0aXApLlxuICAgICAqL1xuICAgIHNldCBoaWRlVGV4dE92ZXJmbG93KGhpZGVUZXh0T3ZlcmZsb3c6IGJvb2xlYW4pO1xuICAgIGdldCBoaWRlVGV4dE92ZXJmbG93KCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIERlZmluZSBhIGFsdHVyYSBkYSB0YWJlbGEgZW0gKnBpeGVscyogZSBmaXhhIG8gY2FiZcOnYWxoby5cbiAgICAgKi9cbiAgICBzZXQgaGVpZ2h0KGhlaWdodDogbnVtYmVyKTtcbiAgICBnZXQgaGVpZ2h0KCk6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogSGFiaWxpdGEgYSB2aXN1YWxpemHDp8OjbyBkYSBsaXN0YSBkZSBkZXRhbGhlcyBkZSBjYWRhIGxpbmhhIGRhIGNvbHVuYS5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICAgKi9cbiAgICBzZXQgaGlkZURldGFpbChoaWRlRGV0YWlsOiBib29sZWFuKTtcbiAgICBnZXQgaGlkZURldGFpbCgpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBPYmpldG8gY29tIGFzIGxpdGVyYWlzIHVzYWRhcyBubyBgcG8tdGFibGVgLlxuICAgICAqXG4gICAgICogRXhpc3RlbSBkdWFzIG1hbmVpcmFzIGRlIGN1c3RvbWl6YXIgbyBjb21wb25lbnRlLCBwYXNzYW5kbyB1bSBvYmpldG8gY29tIHRvZGFzIGFzIGxpdGVyYWlzIGRpc3BvbsOtdmVpczpcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqICBjb25zdCBjdXN0b21MaXRlcmFsczogUG9UYWJsZUxpdGVyYWxzID0ge1xuICAgICAqICAgIGxvYWRNb3JlRGF0YTogJ0J1c2NhciBtYWlzIGRhZG9zJyxcbiAgICAgKiAgICBsb2FkaW5nRGF0YTogJ1Byb2Nlc3NhbmRvJyxcbiAgICAgKiAgICBub0NvbHVtbnM6ICdTZW0gY29sdW5hcycsXG4gICAgICogICAgbm9EYXRhOiAnU2VtIGRhZG9zJyxcbiAgICAgKiAgICBzZWVDb21wbGV0ZVN1YnRpdGxlOiAnTW9zdHJhciBsZWdlbmRhIGNvbXBsZXRhJyxcbiAgICAgKiAgICBjb21wbGV0ZVN1YnRpdGxlOiAnVG9kYXMgbGVnZW5kYXMnXG4gICAgICogIH07XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBPdSBwYXNzYW5kbyBhcGVuYXMgYXMgbGl0ZXJhaXMgcXVlIGRlc2VqYSBjdXN0b21pemFyOlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogIGNvbnN0IGN1c3RvbUxpdGVyYWxzOiBQb1RhYmxlTGl0ZXJhbHMgPSB7XG4gICAgICogICAgbm9EYXRhOiAnU2VtIGRhZG9zJ1xuICAgICAqICB9O1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogRSBwYXJhIGNhcnJlZ2FyIGFzIGxpdGVyYWlzIGN1c3RvbWl6YWRhcywgYmFzdGEgYXBlbmFzIHBhc3NhciBvIG9iamV0byBwYXJhIG8gY29tcG9uZW50ZS5cbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIDxwby10YWJsZVxuICAgICAqICAgW3AtbGl0ZXJhbHNdPVwiY3VzdG9tTGl0ZXJhbHNcIj5cbiAgICAgKiA8L3BvLXRhYmxlPlxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogID4gTyBvYmpldG8gcGFkcsOjbyBkZSBsaXRlcmFpcyBzZXLDoSB0cmFkdXppZG8gZGUgYWNvcmRvIGNvbSBvIGlkaW9tYSBkbyAqYnJvd3NlciogKHB0LCBlbiwgZXMpLlxuICAgICAqL1xuICAgIHNldCBsaXRlcmFscyh2YWx1ZTogUG9UYWJsZUxpdGVyYWxzKTtcbiAgICBnZXQgbGl0ZXJhbHMoKTogUG9UYWJsZUxpdGVyYWxzO1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBCbG9xdWVpYSBpbnRlcmHDp8OjbyBkbyB1c3XDoXJpbyBjb20gb3MgZGFkb3MgZGEgX3RhYmxlXywgYXByZXNlbnRhbmRvIHVtIF9sb2FkaW5nXyBhbyBjZW50cm8gZGEgbWVzbWEuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAgICovXG4gICAgc2V0IGxvYWRpbmcobG9hZGluZzogYm9vbGVhbik7XG4gICAgZ2V0IGxvYWRpbmcoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXByZWNhdGVkIDMueC54XG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqICoqKkRlcHJlY2F0ZWQgMy54LngqKipcbiAgICAgKlxuICAgICAqID4gRXN0YSBwcm9wcmllZGFkZSBlc3TDoSBkZXByZWNpYWRhLCB1dGlsaXplIGEgcHJvcHJpZWRhZGUgYHAtc2VsZWN0YWJsZWAuXG4gICAgICpcbiAgICAgKiBIYWJpbGl0YSBuYSBwcmltZWlyYSBjb2x1bmEgYSBvcMOnw6NvIGRlIHNlbGVjaW9uYXIgbGluaGFzLFxuICAgICAqIHRvZG9zIG9zIGl0ZW5zIGRhIGxpc3RhIHBvc3N1ZW0gYSBwcm9wcmllZGFkZSBkaW7Dom1pY2EgYCRzZWxlY3RlZGAgcGFyYSBpZGVudGlmaWNhciBzZSBhIGxpbmhhIGVzdMOhIHNlbGVjaW9uYWRhLlxuICAgICAqID4gRXhlbXBsbzogYGl0ZW0uJHNlbGVjdGVkYCBvdSBgaXRlbVsnJHNlbGVjdGVkJ11gLlxuICAgICAqID4gT3MgaXRlbnMgZmlsaG9zIHBvc3N1ZW0gY29tcG9ydGFtZW50byBpbmRlcGVuZGVudGUgZG8gaXRlbSBwYWkuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAgICovXG4gICAgc2V0IGNoZWNrYm94KGNoZWNrYm94OiBib29sZWFuKTtcbiAgICBnZXQgY2hlY2tib3goKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogRGVmaW5lIHVtYSBsaXN0YSBkZSBhw6fDtWVzLlxuICAgICAqXG4gICAgICogUXVhbmRvIGhvdXZlciBhcGVuYXMgdW1hIGHDp8OjbyBkZWZpbmlkYSBlbGEgc2Vyw6EgZXhpYmlkYSBkaXJldGFtZW50ZSBuYSBjb2x1bmEsIGNhc28gY29udHLDoXJpbywgbyBjb21wb25lbnRlXG4gICAgICogc2UgZW5jYXJyZWdhIGRlIGFncnVww6EtbGFzIGV4aWJpbmRvIG8gw61jb25lIFsqKnBvLWljb24tbW9yZSoqXSgvZ3VpZGVzL2ljb25zKSBxdWUgbGlzdGFyw6EgYXMgYcOnw7VlcyBhbyBzZXIgY2xpY2Fkby5cbiAgICAgKlxuICAgICAqICoqQSBjb2x1bmEgZGUgYcOnw7VlcyBuw6NvIHNlcsOhIGV4aWJpZGEgcXVhbmRvOioqXG4gICAgICogIC0gYSBsaXN0YSBjb250ZXIgdmFsb3JlcyBpbnbDoWxpZG9zIG91IGluZGVmaW5pZG9zLlxuICAgICAqICAtIHRlbmhhIHVtYSDDum5pY2EgYcOnw6NvIGUgYSBtZXNtYSBuw6NvIGZvciB2aXPDrXZlbC5cbiAgICAgKi9cbiAgICBzZXQgYWN0aW9ucyhhY3Rpb25zOiBBcnJheTxQb1RhYmxlQWN0aW9uPik7XG4gICAgZ2V0IGFjdGlvbnMoKTogQXJyYXk8UG9UYWJsZUFjdGlvbj47XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIFBlcm1pdGUgYSBzZWxlw6fDo28gZGUgbGluaGFzIG5hIHRhYmVsYSBlLCBjYXNvIGEgcHJvcHJpZWRhZGUgYHAtc2luZ2xlLXNlbGVjdGAgZXN0ZWphIGRlZmluaWRhIHNlcsOhIHBvc3PDrXZlbFxuICAgICAqIHNlbGVjaW9uYXIgYXBlbmFzIHVtYSDDum5pY2EgbGluaGEuXG4gICAgICpcbiAgICAgKiAqKkltcG9ydGFudGU6KipcbiAgICAgKiAgLSBBcyBsaW5oYXMgZGUgZGV0YWxoZSBkZWZpbmlkYXMgZW0gYFBvVGFibGVEZXRhaWxgIHBvc3N1ZW0gY29tcG9ydGFtZW50byBpbmRlcGVuZGVudGUgZGEgbGluaGEgbWVzdHJlO1xuICAgICAqICAtIENhZGEgbGluaGEgcG9zc3VpIHBvciBwYWRyw6NvIGEgcHJvcHJpZWRhZGUgZGluw6JtaWNhIGAkc2VsZWN0ZWRgLCBuYSBxdWFsIMOpIHBvc3PDrXZlbCB2YWxpZGFyIHNlIGEgbGluaGFcbiAgICAgKiBlc3TDoSBzZWxlY2lvbmFkYSwgcG9yIGV4ZW1wbG86IGBpdGVtLiRzZWxlY3RlZGAgb3UgYGl0ZW1bJyRzZWxlY3RlZCddYC5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICAgKi9cbiAgICBzZXQgc2VsZWN0YWJsZSh2YWx1ZTogYm9vbGVhbik7XG4gICAgZ2V0IHNlbGVjdGFibGUoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogUGVybWl0ZSBxdWUgbyBnZXJlbmNpYWRvciBkZSBjb2x1bmFzLCByZXNwb25zw6F2ZWwgcGVsYSBkZWZpbmnDp8OjbyBkZSBxdWFpcyBjb2x1bmFzIHNlcsOjbyBleGliaWRhcywgc2VqYSBlc2NvbmRpZG8uXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAgICovXG4gICAgaGlkZUNvbHVtbnNNYW5hZ2VyPzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogSGFiaWxpdGEgZW0gdG9kYXMgYXMgY29sdW5hcyBhIG9ww6fDo28gZGUgb3JkZW5hw6fDo28gZGUgZGFkb3MuIENhc28gYSBjb2x1bmEgc2VqYSBkbyB0aXBvICdkYXRhJyBvdSAnZGF0ZVRpbWUnIGFcbiAgICAgKiBtZXNtYSBkZXZlIHJlc3BlaXRhciBvcyB0aXBvcyBkZSBlbnRyYWRhIGRlZmluaWRvcyBwYXJhIHF1ZSBzZWphbSBvcmRlbmFkYXMuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAgICovXG4gICAgc29ydD86IGJvb2xlYW47XG4gICAgc2V0IHNldFNvcnQoc29ydDogc3RyaW5nKTtcbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIFNlIHZlcmRhZGVpcm8sIHRvcm5hIGhhYmlsaXRhZG8gbyBib3TDo28gXCJDYXJyZWdhciBtYWlzIHJlc3VsdGFkb3NcIi5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICAgKi9cbiAgICBzaG93TW9yZURpc2FibGVkPzogYm9vbGVhbjtcbiAgICBzZXQgc2V0U2hvd01vcmVEaXNhYmxlZChzaG93TW9yZURpc2FibGVkOiBzdHJpbmcpO1xuICAgIC8qKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogSGFiaWxpdGEgb3UgZGVzYWJpbGl0YSBvIGVzdGlsbyBsaXN0cmFkbyBkYSB0YWJlbGEgKGBzdHJpcGVkYCkuXG4gICAgICogPiBSZWNvbWVuZGFkbyBwYXJhIHRhYmVsYXMgY29tIG1haW9yIG7Dum1lcm8gZGUgZGFkb3MsIGZhY2lsaXRhbmRvIGEgc3VhIHZpc3VhbGl6YcOnw6NvIG5hIHRhYmVsYS5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICAgKi9cbiAgICBzdHJpcGVkPzogYm9vbGVhbjtcbiAgICBzZXQgc2V0U3RyaXBlZChzdHJpcGVkOiBzdHJpbmcpO1xuICAgIC8qKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogRXNjb25kZSBvICpjaGVja2JveCogcGFyYSBzZWxlw6fDo28gZGUgdG9kYXMgYXMgbGluaGFzLlxuICAgICAqXG4gICAgICogPiBTZW1wcmUgcmVjZWJlcsOhICp0cnVlKiBjYXNvIGEgc2VsZcOnw6NvIGRlIGFwZW5hcyB1bWEgbGluaGEgZXN0ZWphIGF0aXZhLlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgICAqL1xuICAgIGhpZGVTZWxlY3RBbGw/OiBib29sZWFuO1xuICAgIHNldCBzZXRIaWRlU2VsZWN0QWxsKGhpZGVTZWxlY3RBbGw6IHN0cmluZyk7XG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBEZWZpbmUgcXVlIHNvbWVudGUgdW1hIGxpbmhhIGRhIHRhYmVsYSBwb2RlIHNlciBzZWxlY2lvbmFkYS5cbiAgICAgKlxuICAgICAqID4gRXN0YSBkZWZpbmnDp8OjbyBuw6NvIHNlIGFwbGljYSBhb3MgaXRlbnMgZmlsaG9zLCBvcyBtZXNtb3MgcG9zc3VlbSBjb21wb3J0YW1lbnRvIGluZGVwZW5kZW50ZSBkbyBpdGVtIHBhaS5cbiAgICAgKi9cbiAgICBzaW5nbGVTZWxlY3Q/OiBib29sZWFuO1xuICAgIHNldCBzZXRTaW5nbGVTZWxlY3QodmFsdWU6IHN0cmluZyk7XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIERlZmluZSB1bWEgcXVhbnRpZGFkZSBtw6F4aW1hIGRlIGNvbHVuYXMgcXVlIHNlcsOjbyBleGliaWRhcyBuYSB0YWJlbGEuXG4gICAgICpcbiAgICAgKiBRdWFuZG8gY2hlZ2FyIG5vIHZhbG9yIGluZm9ybWFkbywgYXMgY29sdW5hcyBxdWUgbsOjbyBlc3RpdmVyZW0gc2VsZWNpb25hZGFzIGZpY2Fyw6NvXG4gICAgICogZGVzYWJpbGl0YWRhcyBlIGNhc28gaG91dmVyIG1haXMgY29sdW5hcyB2aXPDrXZlaXMgZG8gcXVlIG8gcGVybWl0aWRvLCBhcyBleGNlZGVudGVzXG4gICAgICogc2Vyw6NvIGlnbm9yYWRhcyBwb3Igb3JkZW0gZGUgcG9zacOnw6NvLlxuICAgICAqL1xuICAgIG1heENvbHVtbnM/OiBudW1iZXI7XG4gICAgLyoqIEV2ZW50byBleGVjdXRhZG8gcXVhbmRvIHRvZGFzIGFzIGxpbmhhcyBzw6NvIHNlbGVjaW9uYWRhcyBwb3IgbWVpbyBkbyAqY2hlY2tib3gqIHF1ZSBzZWxlY2lvbmEgdG9kYXMgYXMgbGluaGFzLiAqL1xuICAgIGFsbFNlbGVjdGVkPzogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgLyoqIEV2ZW50byBleGVjdXRhZG8gcXVhbmRvIGEgc2VsZcOnw6NvIGRhcyBsaW5oYXMgw6kgZGVzbWFyY2FkYSBwb3IgbWVpbyBkbyAqY2hlY2tib3gqIHF1ZSBzZWxlY2lvbmEgdG9kYXMgYXMgbGluaGFzLiAqL1xuICAgIGFsbFVuc2VsZWN0ZWQ/OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICAvKipcbiAgICAgKiBFdmVudG8gZXhlY3V0YWRvIGFvIGNvbGFwc2FyIHVtYSBsaW5oYSBkbyBgcG8tdGFibGVgLlxuICAgICAqXG4gICAgICogPiBDb21vIHBhcsOibWV0cm8gbyBjb21wb25lbnRlIGVudmlhIG8gaXRlbSBjb2xhcHNhZG8uXG4gICAgICovXG4gICAgY29sbGFwc2VkPzogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgLyoqXG4gICAgICogRXZlbnRvIGV4ZWN1dGFkbyBhbyBleHBhbmRpciB1bWEgbGluaGEgZG8gYHBvLXRhYmxlYC5cbiAgICAgKlxuICAgICAqID4gQ29tbyBwYXLDom1ldHJvIG8gY29tcG9uZW50ZSBlbnZpYSBvIGl0ZW0gZXhwYW5kaWRvLlxuICAgICAqL1xuICAgIGV4cGFuZGVkPzogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgLyoqIEV2ZW50byBleGVjdXRhZG8gYW8gc2VsZWNpb25hciB1bWEgbGluaGEgZG8gYHBvLXRhYmxlYC4gKi9cbiAgICBzZWxlY3RlZD86IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIC8qKlxuICAgICAqIFJlY2ViZSB1bWEgYcOnw6NvIGRlIGNsaXF1ZSBwYXJhIG8gYm90w6NvIFwiQ2FycmVnYXIgbWFpcyByZXN1bHRhZG9zXCIsIGNhc28gbmVuaHVtYSBhw6fDo28gZm9yIGRlZmluaWRhIG8gbWVzbW9cbiAgICAgKiBuw6NvIMOpIHZpc8OtdmVsLlxuICAgICAqXG4gICAgICogUmVjZWJlIHVtIG9iamV0byBgeyBjb2x1bW4sIHR5cGUgfWAgb25kZTpcbiAgICAgKlxuICAgICAqIC0gY29sdW1uIChgUG9UYWJsZUNvbHVtbmApOiBvYmpldG8gZGEgY29sdW5hIHF1ZSBlc3TDoSBvcmRlbmFkYS5cbiAgICAgKiAtIHR5cGUgKGBQb1RhYmxlQ29sdW1uU29ydFR5cGVgKTogdGlwbyBkYSBvcmRlbmHDp8Ojby5cbiAgICAgKi9cbiAgICBzaG93TW9yZT86IEV2ZW50RW1pdHRlcjxQb1RhYmxlQ29sdW1uU29ydD47XG4gICAgLyoqXG4gICAgICogRXZlbnRvIGV4ZWN1dGFkbyBhbyBvcmRlbmFyIGNvbHVuYXMgZGEgdGFiZWxhLlxuICAgICAqXG4gICAgICogUmVjZWJlIHVtIG9iamV0byBgeyBjb2x1bW4sIHR5cGUgfWAgb25kZTpcbiAgICAgKlxuICAgICAqIC0gY29sdW1uIChgUG9UYWJsZUNvbHVtbmApOiBvYmpldG8gZGEgY29sdW5hIHF1ZSBmb2kgY2xpY2FkYS9vcmRlbmFkYS5cbiAgICAgKiAtIHR5cGUgKGBQb1RhYmxlQ29sdW1uU29ydFR5cGVgKTogdGlwbyBkYSBvcmRlbmHDp8Ojby5cbiAgICAgKi9cbiAgICBzb3J0Qnk/OiBFdmVudEVtaXR0ZXI8UG9UYWJsZUNvbHVtblNvcnQ+O1xuICAgIC8qKiBFdmVudG8gZXhlY3V0YWRvIGFvIGRlc21hcmNhciBhIHNlbGXDp8OjbyBkZSB1bWEgbGluaGEgZG8gYHBvLXRhYmxlYC4gKi9cbiAgICB1bnNlbGVjdGVkPzogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgZ2V0IGhhc0NvbHVtbnMoKTogYm9vbGVhbjtcbiAgICBnZXQgaGFzSXRlbXMoKTogYm9vbGVhbjtcbiAgICBnZXQgbmFtZUNvbHVtbkRldGFpbCgpOiBzdHJpbmc7XG4gICAgZ2V0IHZhbGlkQ29sdW1ucygpOiBQb1RhYmxlQ29sdW1uW107XG4gICAgcHJpdmF0ZSBnZXQgc29ydFR5cGUoKTtcbiAgICBjb25zdHJ1Y3Rvcihwb0RhdGU6IFBvRGF0ZVNlcnZpY2UpO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE3DqXRvZG8gcXVlIGNvbGFwc2EgdW1hIGxpbmhhIGNvbSBkZXRhbGhlIHF1YW5kbyBleGVjdXRhZGEuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyBudW1iZXIgfSByb3dJbmRleCDDjW5kaWNlIGRhIGxpbmhhIHF1ZSBzZXLDoSBjb2xhcHNhZGEuXG4gICAgICogPiBBbyByZW9yZGVuYXIgb3MgZGFkb3MgZGEgdGFiZWxhLCBvIHZhbG9yIGNvbnRpZG8gbmVzdGUgw61uZGljZSBzZXLDoSBhbHRlcmFkbyBjb25mb3JtZSBhIG9yZGVuYcOnw6NvLlxuICAgICAqL1xuICAgIGNvbGxhcHNlKHJvd0luZGV4OiBudW1iZXIpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE3DqXRvZG8gcXVlIGV4cGFuZGUgdW1hIGxpbmhhIGNvbSBkZXRhbGhlIHF1YW5kbyBleGVjdXRhZGEuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyBudW1iZXIgfSByb3dJbmRleCDDjW5kaWNlIGRhIGxpbmhhIHF1ZSBzZXLDoSBleHBhbmRpZGEuXG4gICAgICogPiBBbyByZW9yZGVuYXIgb3MgZGFkb3MgZGEgdGFiZWxhLCBvIHZhbG9yIGNvbnRpZG8gbmVzdGUgw61uZGljZSBzZXLDoSBhbHRlcmFkbyBjb25mb3JtZSBhIG9yZGVuYcOnw6NvLlxuICAgICAqL1xuICAgIGV4cGFuZChyb3dJbmRleDogbnVtYmVyKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBSZXRvcm5hIGFzIGxpbmhhcyBkbyBgcG8tdGFibGVgIHF1ZSBlc3TDo28gc2VsZWNpb25hZGFzLlxuICAgICAqL1xuICAgIGdldFNlbGVjdGVkUm93cygpOiBhbnlbXTtcbiAgICAvKipcbiAgICAgKiBSZXRvcm5hIGFzIGxpbmhhcyBkbyBgcG8tdGFibGVgIHF1ZSBuw6NvIGVzdMOjbyBzZWxlY2lvbmFkYXMuXG4gICAgICovXG4gICAgZ2V0VW5zZWxlY3RlZFJvd3MoKTogYW55W107XG4gICAgc2VsZWN0QWxsUm93cygpOiB2b2lkO1xuICAgIHNlbGVjdFJvdyhyb3c6IGFueSk6IHZvaWQ7XG4gICAgc2VsZWN0RGV0YWlsUm93KHJvdzogYW55KTogdm9pZDtcbiAgICBnZXRDbGFzc0NvbG9yKHJvdzogYW55LCBjb2x1bW46IGFueSk6IHN0cmluZztcbiAgICB0b2dnbGVEZXRhaWwocm93OiBhbnkpOiB2b2lkO1xuICAgIHRvZ2dsZVJvd0FjdGlvbihyb3c6IGFueSk6IHZvaWQ7XG4gICAgc29ydENvbHVtbihjb2x1bW46IFBvVGFibGVDb2x1bW4pOiB2b2lkO1xuICAgIG9uU2hvd01vcmUoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgY2FsY3VsYXRlSGVpZ2h0VGFibGVDb250YWluZXIoaGVpZ2h0OiBhbnkpOiBhbnk7XG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IGNhbGN1bGF0ZVdpZHRoSGVhZGVycygpOiBhbnk7XG4gICAgcHJvdGVjdGVkIGdldERlZmF1bHRDb2x1bW5zKGl0ZW06IGFueSk6IHtcbiAgICAgICAgbGFiZWw6IHN0cmluZztcbiAgICAgICAgcHJvcGVydHk6IHN0cmluZztcbiAgICB9W107XG4gICAgcHJpdmF0ZSBjb25maWdBZnRlclNlbGVjdFJvdztcbiAgICBwcml2YXRlIGVtaXRFeHBhbmRFdmVudHM7XG4gICAgcHJpdmF0ZSBlbWl0U2VsZWN0QWxsRXZlbnRzO1xuICAgIHByaXZhdGUgZW1pdFNlbGVjdEV2ZW50cztcbiAgICBwcml2YXRlIGdldENvbHVtbkNvbG9yO1xuICAgIHByaXZhdGUgZ2V0Q29sdW1uTWFzdGVyRGV0YWlsO1xuICAgIHByaXZhdGUgZ2V0TWFpbkNvbHVtbnM7XG4gICAgcHJpdmF0ZSBnZXRTdWJ0aXRsZUNvbHVtbnM7XG4gICAgcHJpdmF0ZSBpc0V2ZXJ5U2VsZWN0ZWQ7XG4gICAgcHJpdmF0ZSBvbkNoYW5nZUNvbHVtbnM7XG4gICAgcHJpdmF0ZSBzZXRDb2x1bW5MaW5rO1xuICAgIHByaXZhdGUgc2V0Q29sdW1uTWFzdGVyRGV0YWlsO1xuICAgIHByaXZhdGUgc2V0TWFpbkNvbHVtbnM7XG4gICAgcHJpdmF0ZSBzZXRTaG93RGV0YWlsO1xuICAgIHByaXZhdGUgc2V0U3VidGl0bGVDb2x1bW5zO1xuICAgIHByaXZhdGUgc29ydEFycmF5O1xuICAgIHByaXZhdGUgdW5zZWxlY3RPdGhlclJvd3M7XG4gICAgcHJpdmF0ZSB2ZXJpZnlXaWR0aENvbHVtbnNQaXhlbHM7XG59XG4iXX0=