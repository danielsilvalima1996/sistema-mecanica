import { ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges, Renderer2 } from '@angular/core';
import { PoCheckboxGroupOption } from '../../po-field/po-checkbox-group/interfaces/po-checkbox-group-option.interface';
import { PoPopoverComponent } from '../../po-popover/po-popover.component';
import { PoTableColumn } from '../interfaces/po-table-column.interface';
import * as ɵngcc0 from '@angular/core';
export declare const poTableColumnManagerLiteralsDefault: {
    en: {
        columnsManager: string;
        restoreDefault: string;
    };
    es: {
        columnsManager: string;
        restoreDefault: string;
    };
    pt: {
        columnsManager: string;
        restoreDefault: string;
    };
    ru: {
        columnsManager: string;
        restoreDefault: string;
    };
};
export declare class PoTableColumnManagerComponent implements OnInit, OnChanges, OnDestroy {
    private renderer;
    private _maxColumns;
    columnsOptions: Array<PoCheckboxGroupOption>;
    literals: any;
    visibleColumns: Array<string>;
    private defaultColumns;
    private resizeListener;
    columns: Array<PoTableColumn>;
    set maxColumns(value: number);
    get maxColumns(): number;
    target: ElementRef;
    visibleColumnsChange: EventEmitter<PoTableColumn[]>;
    popover: PoPopoverComponent;
    constructor(renderer: Renderer2);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    onChangeVisibleColumns(checkedColumns: Array<string>): void;
    restore(): void;
    private disableColumnsOptions;
    private getColumnTitleLabel;
    /** Retorna um Array de column.property das colunas que são visiveis. */
    private getVisibleColumns;
    /** Retorna um Array PoTableColumn a partir das colunas visiveis no gerenciador de colunas. */
    private getVisibleTableColumns;
    private initializeListeners;
    private isDisableColumn;
    private mapTableColumnsToCheckboxOptions;
    private onChangeColumns;
    private removeListeners;
    private updateColumnsOptions;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoTableColumnManagerComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PoTableColumnManagerComponent, "po-table-column-manager", never, { "columns": "p-columns"; "maxColumns": "p-max-columns"; "target": "p-target"; }, { "visibleColumnsChange": "p-visible-columns-change"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGFibGUtY29sdW1uLW1hbmFnZXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBvLXRhYmxlLWNvbHVtbi1tYW5hZ2VyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBTaW1wbGVDaGFuZ2VzLCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBvQ2hlY2tib3hHcm91cE9wdGlvbiB9IGZyb20gJy4uLy4uL3BvLWZpZWxkL3BvLWNoZWNrYm94LWdyb3VwL2ludGVyZmFjZXMvcG8tY2hlY2tib3gtZ3JvdXAtb3B0aW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb1BvcG92ZXJDb21wb25lbnQgfSBmcm9tICcuLi8uLi9wby1wb3BvdmVyL3BvLXBvcG92ZXIuY29tcG9uZW50JztcbmltcG9ydCB7IFBvVGFibGVDb2x1bW4gfSBmcm9tICcuLi9pbnRlcmZhY2VzL3BvLXRhYmxlLWNvbHVtbi5pbnRlcmZhY2UnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgcG9UYWJsZUNvbHVtbk1hbmFnZXJMaXRlcmFsc0RlZmF1bHQ6IHtcbiAgICBlbjoge1xuICAgICAgICBjb2x1bW5zTWFuYWdlcjogc3RyaW5nO1xuICAgICAgICByZXN0b3JlRGVmYXVsdDogc3RyaW5nO1xuICAgIH07XG4gICAgZXM6IHtcbiAgICAgICAgY29sdW1uc01hbmFnZXI6IHN0cmluZztcbiAgICAgICAgcmVzdG9yZURlZmF1bHQ6IHN0cmluZztcbiAgICB9O1xuICAgIHB0OiB7XG4gICAgICAgIGNvbHVtbnNNYW5hZ2VyOiBzdHJpbmc7XG4gICAgICAgIHJlc3RvcmVEZWZhdWx0OiBzdHJpbmc7XG4gICAgfTtcbiAgICBydToge1xuICAgICAgICBjb2x1bW5zTWFuYWdlcjogc3RyaW5nO1xuICAgICAgICByZXN0b3JlRGVmYXVsdDogc3RyaW5nO1xuICAgIH07XG59O1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUG9UYWJsZUNvbHVtbk1hbmFnZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHByaXZhdGUgX21heENvbHVtbnM7XG4gICAgY29sdW1uc09wdGlvbnM6IEFycmF5PFBvQ2hlY2tib3hHcm91cE9wdGlvbj47XG4gICAgbGl0ZXJhbHM6IGFueTtcbiAgICB2aXNpYmxlQ29sdW1uczogQXJyYXk8c3RyaW5nPjtcbiAgICBwcml2YXRlIGRlZmF1bHRDb2x1bW5zO1xuICAgIHByaXZhdGUgcmVzaXplTGlzdGVuZXI7XG4gICAgY29sdW1uczogQXJyYXk8UG9UYWJsZUNvbHVtbj47XG4gICAgc2V0IG1heENvbHVtbnModmFsdWU6IG51bWJlcik7XG4gICAgZ2V0IG1heENvbHVtbnMoKTogbnVtYmVyO1xuICAgIHRhcmdldDogRWxlbWVudFJlZjtcbiAgICB2aXNpYmxlQ29sdW1uc0NoYW5nZTogRXZlbnRFbWl0dGVyPFBvVGFibGVDb2x1bW5bXT47XG4gICAgcG9wb3ZlcjogUG9Qb3BvdmVyQ29tcG9uZW50O1xuICAgIGNvbnN0cnVjdG9yKHJlbmRlcmVyOiBSZW5kZXJlcjIpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBvbkNoYW5nZVZpc2libGVDb2x1bW5zKGNoZWNrZWRDb2x1bW5zOiBBcnJheTxzdHJpbmc+KTogdm9pZDtcbiAgICByZXN0b3JlKCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBkaXNhYmxlQ29sdW1uc09wdGlvbnM7XG4gICAgcHJpdmF0ZSBnZXRDb2x1bW5UaXRsZUxhYmVsO1xuICAgIC8qKiBSZXRvcm5hIHVtIEFycmF5IGRlIGNvbHVtbi5wcm9wZXJ0eSBkYXMgY29sdW5hcyBxdWUgc8OjbyB2aXNpdmVpcy4gKi9cbiAgICBwcml2YXRlIGdldFZpc2libGVDb2x1bW5zO1xuICAgIC8qKiBSZXRvcm5hIHVtIEFycmF5IFBvVGFibGVDb2x1bW4gYSBwYXJ0aXIgZGFzIGNvbHVuYXMgdmlzaXZlaXMgbm8gZ2VyZW5jaWFkb3IgZGUgY29sdW5hcy4gKi9cbiAgICBwcml2YXRlIGdldFZpc2libGVUYWJsZUNvbHVtbnM7XG4gICAgcHJpdmF0ZSBpbml0aWFsaXplTGlzdGVuZXJzO1xuICAgIHByaXZhdGUgaXNEaXNhYmxlQ29sdW1uO1xuICAgIHByaXZhdGUgbWFwVGFibGVDb2x1bW5zVG9DaGVja2JveE9wdGlvbnM7XG4gICAgcHJpdmF0ZSBvbkNoYW5nZUNvbHVtbnM7XG4gICAgcHJpdmF0ZSByZW1vdmVMaXN0ZW5lcnM7XG4gICAgcHJpdmF0ZSB1cGRhdGVDb2x1bW5zT3B0aW9ucztcbn1cbiJdfQ==