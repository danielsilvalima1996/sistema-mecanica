import { TemplateRef } from '@angular/core';
/**
 * @usedBy PoTableComponent
 *
 * @description
 *
 * Esta diretiva permite que seja apresentada informações adicionais a respeito de uma determinada linha de
 * dados, de forma que possam ser exibidas e ocultadas através do botão de acionamento.
 *
 * > Quando utilizada, sobrepõe as funcionalidade básicas do *master-detail*.
 *
 * Em seu uso, deve-se utilizar como parâmetro a referência da _linha_ e/ou _índice_, sendo por padrão linha. Caso não seja declarado,
 * o componente não exibirá conteúdo.
 *  - Linha: `row` determina o item da linha corrente.
 *  - Índice: `rowIndex` determina o índice da linha corrente.
 *
 * Esta diretiva compõe-se de dois meios para uso, de forma explícita tal como em *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <po-table
 *   [p-columns]="columns"
 *   [p-items]="items">
 *     <ng-template p-table-row-template let-rowItem let-i="rowIndex" [p-table-row-template-show]="isShow">
 *       <detail-row [row]="rowItem"></detail-row>
 *     </ng-template>
 * ...
 * ```
 *
 * ```
 * ...
 * <po-table
 *   [p-columns]="columns"
 *   [p-items]="items">
 *     <div *p-table-row-template="let rowItem, let i=rowIndex">
 *       <detail-row [row]="rowItem"></detail-row>
 *     </div>
 * ...
 *
 * ```
 *
 * A diretiva **p-table-row-template**, possibilita também que determinada linha apresente ou não seu _template_. Para isto,
 * é necessário atribuir a referência da função que faz esta verificação, à propriedade `p-table-row-template-show`,
 * a mesma deve retornar um valor do tipo *boolean*. Veja o exemplo a seguir:
 *
 * ```
 * ...
 * @Component({
 *    selector: 'app-root',
 *    templateUrl: `
 *      ...
 *      <po-table
 *        [p-columns]="columns"
 *        [p-items]="items">
 *          <ng-template p-table-row-template let-rowItem let-i="rowIndex" [p-table-row-template-show]="isUndelivered">
 *            <detail-row [row]="rowItem"> </detail-row>
 *          </div>
 *      ...
 *    `
 * })
 * export class AppComponent {
 *    public dataTable = [{
 *      code: 1200,
 *      product: 'Rice',
 *      costumer: 'Supermarket 1',
 *      quantity: 3,
 *      status: 'delivered',
 *      license_plate: 'MDJD9191',
 *      batch_product: 18041822,
 *      driver: 'José Oliveira'
 *    }, {
 *      code: 1355,
 *      product: 'Bean',
 *      costumer: 'Supermarket 2',
 *      quantity: 1,
 *      status: 'transport',
 *      license_plate: 'XXA5454',
 *      batch_product: 18041821,
 *      driver: 'Francisco Pereira'
 *    }];
 *
 *    isUndelivered(row, index: number) {
 *      return row.status !== 'delivered';
 *    }
 * }
 * ```
 * > No exemplo acima, somente será disponibilizado os detalhes de informações nas linhas cujo o valor de `status`
 * não correspondam à *delivered*.
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoTableRowTemplateDirective {
    templateRef: TemplateRef<any>;
    /**
     * @optional
     *
     * @description
     *
     * Função que deve retornar um valor booleano, informando se apresentará o template da linha.
     * Serão passados o objeto da linha e o indice da mesma por parâmetro, para que seja possível
     * tomar uma decisão a partir do objeto da linha corrente.
     *
     * Caso não ser utilizado esta propriedade, serão apresentados todos os detalhes das linhas.
     *
     * @default `true`
     */
    poTableRowTemplateShow: (row: any, index: number) => boolean;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoTableRowTemplateDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoTableRowTemplateDirective, "[p-table-row-template]", never, { "poTableRowTemplateShow": "p-table-row-template-show"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGFibGUtcm93LXRlbXBsYXRlLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJwby10YWJsZS1yb3ctdGVtcGxhdGUuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4vKipcbiAqIEB1c2VkQnkgUG9UYWJsZUNvbXBvbmVudFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEVzdGEgZGlyZXRpdmEgcGVybWl0ZSBxdWUgc2VqYSBhcHJlc2VudGFkYSBpbmZvcm1hw6fDtWVzIGFkaWNpb25haXMgYSByZXNwZWl0byBkZSB1bWEgZGV0ZXJtaW5hZGEgbGluaGEgZGVcbiAqIGRhZG9zLCBkZSBmb3JtYSBxdWUgcG9zc2FtIHNlciBleGliaWRhcyBlIG9jdWx0YWRhcyBhdHJhdsOpcyBkbyBib3TDo28gZGUgYWNpb25hbWVudG8uXG4gKlxuICogPiBRdWFuZG8gdXRpbGl6YWRhLCBzb2JyZXDDtWUgYXMgZnVuY2lvbmFsaWRhZGUgYsOhc2ljYXMgZG8gKm1hc3Rlci1kZXRhaWwqLlxuICpcbiAqIEVtIHNldSB1c28sIGRldmUtc2UgdXRpbGl6YXIgY29tbyBwYXLDom1ldHJvIGEgcmVmZXLDqm5jaWEgZGEgX2xpbmhhXyBlL291IF/DrW5kaWNlXywgc2VuZG8gcG9yIHBhZHLDo28gbGluaGEuIENhc28gbsOjbyBzZWphIGRlY2xhcmFkbyxcbiAqIG8gY29tcG9uZW50ZSBuw6NvIGV4aWJpcsOhIGNvbnRlw7pkby5cbiAqICAtIExpbmhhOiBgcm93YCBkZXRlcm1pbmEgbyBpdGVtIGRhIGxpbmhhIGNvcnJlbnRlLlxuICogIC0gw41uZGljZTogYHJvd0luZGV4YCBkZXRlcm1pbmEgbyDDrW5kaWNlIGRhIGxpbmhhIGNvcnJlbnRlLlxuICpcbiAqIEVzdGEgZGlyZXRpdmEgY29tcMO1ZS1zZSBkZSBkb2lzIG1laW9zIHBhcmEgdXNvLCBkZSBmb3JtYSBleHBsw61jaXRhIHRhbCBjb21vIGVtICpzeW50YXggc3VnYXIqLiBWZWphIGEgc2VndWlyIGFtYm9zLCByZXNwZWN0aXZhbWVudGU6XG4gKlxuICogYGBgXG4gKiAuLi5cbiAqIDxwby10YWJsZVxuICogICBbcC1jb2x1bW5zXT1cImNvbHVtbnNcIlxuICogICBbcC1pdGVtc109XCJpdGVtc1wiPlxuICogICAgIDxuZy10ZW1wbGF0ZSBwLXRhYmxlLXJvdy10ZW1wbGF0ZSBsZXQtcm93SXRlbSBsZXQtaT1cInJvd0luZGV4XCIgW3AtdGFibGUtcm93LXRlbXBsYXRlLXNob3ddPVwiaXNTaG93XCI+XG4gKiAgICAgICA8ZGV0YWlsLXJvdyBbcm93XT1cInJvd0l0ZW1cIj48L2RldGFpbC1yb3c+XG4gKiAgICAgPC9uZy10ZW1wbGF0ZT5cbiAqIC4uLlxuICogYGBgXG4gKlxuICogYGBgXG4gKiAuLi5cbiAqIDxwby10YWJsZVxuICogICBbcC1jb2x1bW5zXT1cImNvbHVtbnNcIlxuICogICBbcC1pdGVtc109XCJpdGVtc1wiPlxuICogICAgIDxkaXYgKnAtdGFibGUtcm93LXRlbXBsYXRlPVwibGV0IHJvd0l0ZW0sIGxldCBpPXJvd0luZGV4XCI+XG4gKiAgICAgICA8ZGV0YWlsLXJvdyBbcm93XT1cInJvd0l0ZW1cIj48L2RldGFpbC1yb3c+XG4gKiAgICAgPC9kaXY+XG4gKiAuLi5cbiAqXG4gKiBgYGBcbiAqXG4gKiBBIGRpcmV0aXZhICoqcC10YWJsZS1yb3ctdGVtcGxhdGUqKiwgcG9zc2liaWxpdGEgdGFtYsOpbSBxdWUgZGV0ZXJtaW5hZGEgbGluaGEgYXByZXNlbnRlIG91IG7Do28gc2V1IF90ZW1wbGF0ZV8uIFBhcmEgaXN0byxcbiAqIMOpIG5lY2Vzc8OhcmlvIGF0cmlidWlyIGEgcmVmZXLDqm5jaWEgZGEgZnVuw6fDo28gcXVlIGZheiBlc3RhIHZlcmlmaWNhw6fDo28sIMOgIHByb3ByaWVkYWRlIGBwLXRhYmxlLXJvdy10ZW1wbGF0ZS1zaG93YCxcbiAqIGEgbWVzbWEgZGV2ZSByZXRvcm5hciB1bSB2YWxvciBkbyB0aXBvICpib29sZWFuKi4gVmVqYSBvIGV4ZW1wbG8gYSBzZWd1aXI6XG4gKlxuICogYGBgXG4gKiAuLi5cbiAqIEBDb21wb25lbnQoe1xuICogICAgc2VsZWN0b3I6ICdhcHAtcm9vdCcsXG4gKiAgICB0ZW1wbGF0ZVVybDogYFxuICogICAgICAuLi5cbiAqICAgICAgPHBvLXRhYmxlXG4gKiAgICAgICAgW3AtY29sdW1uc109XCJjb2x1bW5zXCJcbiAqICAgICAgICBbcC1pdGVtc109XCJpdGVtc1wiPlxuICogICAgICAgICAgPG5nLXRlbXBsYXRlIHAtdGFibGUtcm93LXRlbXBsYXRlIGxldC1yb3dJdGVtIGxldC1pPVwicm93SW5kZXhcIiBbcC10YWJsZS1yb3ctdGVtcGxhdGUtc2hvd109XCJpc1VuZGVsaXZlcmVkXCI+XG4gKiAgICAgICAgICAgIDxkZXRhaWwtcm93IFtyb3ddPVwicm93SXRlbVwiPiA8L2RldGFpbC1yb3c+XG4gKiAgICAgICAgICA8L2Rpdj5cbiAqICAgICAgLi4uXG4gKiAgICBgXG4gKiB9KVxuICogZXhwb3J0IGNsYXNzIEFwcENvbXBvbmVudCB7XG4gKiAgICBwdWJsaWMgZGF0YVRhYmxlID0gW3tcbiAqICAgICAgY29kZTogMTIwMCxcbiAqICAgICAgcHJvZHVjdDogJ1JpY2UnLFxuICogICAgICBjb3N0dW1lcjogJ1N1cGVybWFya2V0IDEnLFxuICogICAgICBxdWFudGl0eTogMyxcbiAqICAgICAgc3RhdHVzOiAnZGVsaXZlcmVkJyxcbiAqICAgICAgbGljZW5zZV9wbGF0ZTogJ01ESkQ5MTkxJyxcbiAqICAgICAgYmF0Y2hfcHJvZHVjdDogMTgwNDE4MjIsXG4gKiAgICAgIGRyaXZlcjogJ0pvc8OpIE9saXZlaXJhJ1xuICogICAgfSwge1xuICogICAgICBjb2RlOiAxMzU1LFxuICogICAgICBwcm9kdWN0OiAnQmVhbicsXG4gKiAgICAgIGNvc3R1bWVyOiAnU3VwZXJtYXJrZXQgMicsXG4gKiAgICAgIHF1YW50aXR5OiAxLFxuICogICAgICBzdGF0dXM6ICd0cmFuc3BvcnQnLFxuICogICAgICBsaWNlbnNlX3BsYXRlOiAnWFhBNTQ1NCcsXG4gKiAgICAgIGJhdGNoX3Byb2R1Y3Q6IDE4MDQxODIxLFxuICogICAgICBkcml2ZXI6ICdGcmFuY2lzY28gUGVyZWlyYSdcbiAqICAgIH1dO1xuICpcbiAqICAgIGlzVW5kZWxpdmVyZWQocm93LCBpbmRleDogbnVtYmVyKSB7XG4gKiAgICAgIHJldHVybiByb3cuc3RhdHVzICE9PSAnZGVsaXZlcmVkJztcbiAqICAgIH1cbiAqIH1cbiAqIGBgYFxuICogPiBObyBleGVtcGxvIGFjaW1hLCBzb21lbnRlIHNlcsOhIGRpc3BvbmliaWxpemFkbyBvcyBkZXRhbGhlcyBkZSBpbmZvcm1hw6fDtWVzIG5hcyBsaW5oYXMgY3VqbyBvIHZhbG9yIGRlIGBzdGF0dXNgXG4gKiBuw6NvIGNvcnJlc3BvbmRhbSDDoCAqZGVsaXZlcmVkKi5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUG9UYWJsZVJvd1RlbXBsYXRlRGlyZWN0aXZlIHtcbiAgICB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PjtcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogRnVuw6fDo28gcXVlIGRldmUgcmV0b3JuYXIgdW0gdmFsb3IgYm9vbGVhbm8sIGluZm9ybWFuZG8gc2UgYXByZXNlbnRhcsOhIG8gdGVtcGxhdGUgZGEgbGluaGEuXG4gICAgICogU2Vyw6NvIHBhc3NhZG9zIG8gb2JqZXRvIGRhIGxpbmhhIGUgbyBpbmRpY2UgZGEgbWVzbWEgcG9yIHBhcsOibWV0cm8sIHBhcmEgcXVlIHNlamEgcG9zc8OtdmVsXG4gICAgICogdG9tYXIgdW1hIGRlY2lzw6NvIGEgcGFydGlyIGRvIG9iamV0byBkYSBsaW5oYSBjb3JyZW50ZS5cbiAgICAgKlxuICAgICAqIENhc28gbsOjbyBzZXIgdXRpbGl6YWRvIGVzdGEgcHJvcHJpZWRhZGUsIHNlcsOjbyBhcHJlc2VudGFkb3MgdG9kb3Mgb3MgZGV0YWxoZXMgZGFzIGxpbmhhcy5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IGB0cnVlYFxuICAgICAqL1xuICAgIHBvVGFibGVSb3dUZW1wbGF0ZVNob3c6IChyb3c6IGFueSwgaW5kZXg6IG51bWJlcikgPT4gYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3Rvcih0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55Pik7XG59XG4iXX0=