import { EventEmitter } from '@angular/core';
import { PoChartGaugeSerie } from './po-chart-types/po-chart-gauge/po-chart-gauge-series.interface';
import { PoChartType } from './enums/po-chart-type.enum';
import { PoDonutChartSeries } from './po-chart-types/po-chart-donut/po-chart-donut-series.interface';
import { PoPieChartSeries } from './po-chart-types/po-chart-pie/po-chart-pie-series.interface';
import * as ɵngcc0 from '@angular/core';
export declare type PoChartSeries = Array<PoDonutChartSeries | PoPieChartSeries | PoChartGaugeSerie>;
/**
 * @description
 *
 * O `po-chart` é um componente para renderização de dados através de gráficos, com isso facilitando a compreensão e tornando a
 * visualização destes dados mais agradável.
 *
 * Através de suas principais propriedades é possível definir o tipo de gráfico, uma altura e um título.
 *
 * Além disso, também é possível definir uma ação que será executada ao clicar em determinado elemento do gráfico
 * e outra que será executada ao passar o *mouse* sobre o elemento.
 *
 * #### Boas práticas
 *
 * - Para que o gráfico não fique ilegível e incompreensível, evite uma quantia excessiva de séries.
 * - Para exibir a intensidade de um único dado dê preferência ao tipo `gauge`.
 */
export declare abstract class PoChartBaseComponent {
    private _height;
    private _series;
    private _type;
    protected chartSeries: PoChartSeries;
    readonly poChartType: typeof PoChartType;
    /**
     * @optional
     *
     * @description
     *
     * Define a altura do gráfico.
     *
     * O valor padrão dos gráficos são:
     * - para o tipo *gauge*: `200px`;
     * - para os demais tipos: `400px`.
     *
     * > O valor mínimo aceito nesta propriedade é 200.
     *
     * @default `400px`
     */
    set height(value: number);
    get height(): number;
    /**
     * @description
     *
     * Define os elementos do gráfico que serão criados dinamicamente.
     *
     * > A coleção de objetos deve implementar alguma das interfaces abaixo:
     * - `PoDonutChartSeries`
     * - `PoPieChartSeries`
     * - `PoChartGaugeSerie`
     */
    set series(value: PoChartGaugeSerie | Array<PoDonutChartSeries | PoPieChartSeries>);
    get series(): PoChartGaugeSerie | Array<PoDonutChartSeries | PoPieChartSeries>;
    /** Define o título do gráfico. */
    title?: string;
    /**
     * @optional
     *
     * @description
     *
     * Define o tipo de gráfico.
     *
     * > Veja os valores válidos no *enum* `PoChartType`.
     *
     * @default `PoChartType.Pie`
     */
    set type(value: PoChartType);
    get type(): PoChartType;
    /**
     * @optional
     *
     * @description
     *
     * Evento executado quando o usuário clicar sobre um elemento do gráfico.
     *
     * > Será passado por parâmetro um objeto contendo a categoria e valor da série.
     */
    seriesClick: EventEmitter<PoChartGaugeSerie | PoDonutChartSeries | PoPieChartSeries>;
    /**
     * @optional
     *
     * @description
     *
     * Evento executado quando o usuário passar o *mouse* sobre um elemento do gráfico.
     *
     * > Será passado por parâmetro um objeto contendo a categoria e valor da série.
     */
    seriesHover: EventEmitter<PoChartGaugeSerie | PoDonutChartSeries | PoPieChartSeries>;
    onSeriesClick(event: any): void;
    onSeriesHover(event: any): void;
    private setDefaultHeight;
    private transformObjectToArrayObject;
    abstract rebuildComponent(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoChartBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoChartBaseComponent, never, never, { "height": "p-height"; "series": "p-series"; "type": "p-type"; "title": "p-title"; }, { "seriesClick": "p-series-click"; "seriesHover": "p-series-hover"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hhcnQtYmFzZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicG8tY2hhcnQtYmFzZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQb0NoYXJ0R2F1Z2VTZXJpZSB9IGZyb20gJy4vcG8tY2hhcnQtdHlwZXMvcG8tY2hhcnQtZ2F1Z2UvcG8tY2hhcnQtZ2F1Z2Utc2VyaWVzLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb0NoYXJ0VHlwZSB9IGZyb20gJy4vZW51bXMvcG8tY2hhcnQtdHlwZS5lbnVtJztcbmltcG9ydCB7IFBvRG9udXRDaGFydFNlcmllcyB9IGZyb20gJy4vcG8tY2hhcnQtdHlwZXMvcG8tY2hhcnQtZG9udXQvcG8tY2hhcnQtZG9udXQtc2VyaWVzLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb1BpZUNoYXJ0U2VyaWVzIH0gZnJvbSAnLi9wby1jaGFydC10eXBlcy9wby1jaGFydC1waWUvcG8tY2hhcnQtcGllLXNlcmllcy5pbnRlcmZhY2UnO1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBQb0NoYXJ0U2VyaWVzID0gQXJyYXk8UG9Eb251dENoYXJ0U2VyaWVzIHwgUG9QaWVDaGFydFNlcmllcyB8IFBvQ2hhcnRHYXVnZVNlcmllPjtcbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogTyBgcG8tY2hhcnRgIMOpIHVtIGNvbXBvbmVudGUgcGFyYSByZW5kZXJpemHDp8OjbyBkZSBkYWRvcyBhdHJhdsOpcyBkZSBncsOhZmljb3MsIGNvbSBpc3NvIGZhY2lsaXRhbmRvIGEgY29tcHJlZW5zw6NvIGUgdG9ybmFuZG8gYVxuICogdmlzdWFsaXphw6fDo28gZGVzdGVzIGRhZG9zIG1haXMgYWdyYWTDoXZlbC5cbiAqXG4gKiBBdHJhdsOpcyBkZSBzdWFzIHByaW5jaXBhaXMgcHJvcHJpZWRhZGVzIMOpIHBvc3PDrXZlbCBkZWZpbmlyIG8gdGlwbyBkZSBncsOhZmljbywgdW1hIGFsdHVyYSBlIHVtIHTDrXR1bG8uXG4gKlxuICogQWzDqW0gZGlzc28sIHRhbWLDqW0gw6kgcG9zc8OtdmVsIGRlZmluaXIgdW1hIGHDp8OjbyBxdWUgc2Vyw6EgZXhlY3V0YWRhIGFvIGNsaWNhciBlbSBkZXRlcm1pbmFkbyBlbGVtZW50byBkbyBncsOhZmljb1xuICogZSBvdXRyYSBxdWUgc2Vyw6EgZXhlY3V0YWRhIGFvIHBhc3NhciBvICptb3VzZSogc29icmUgbyBlbGVtZW50by5cbiAqXG4gKiAjIyMjIEJvYXMgcHLDoXRpY2FzXG4gKlxuICogLSBQYXJhIHF1ZSBvIGdyw6FmaWNvIG7Do28gZmlxdWUgaWxlZ8OtdmVsIGUgaW5jb21wcmVlbnPDrXZlbCwgZXZpdGUgdW1hIHF1YW50aWEgZXhjZXNzaXZhIGRlIHPDqXJpZXMuXG4gKiAtIFBhcmEgZXhpYmlyIGEgaW50ZW5zaWRhZGUgZGUgdW0gw7puaWNvIGRhZG8gZMOqIHByZWZlcsOqbmNpYSBhbyB0aXBvIGBnYXVnZWAuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGFic3RyYWN0IGNsYXNzIFBvQ2hhcnRCYXNlQ29tcG9uZW50IHtcbiAgICBwcml2YXRlIF9oZWlnaHQ7XG4gICAgcHJpdmF0ZSBfc2VyaWVzO1xuICAgIHByaXZhdGUgX3R5cGU7XG4gICAgcHJvdGVjdGVkIGNoYXJ0U2VyaWVzOiBQb0NoYXJ0U2VyaWVzO1xuICAgIHJlYWRvbmx5IHBvQ2hhcnRUeXBlOiB0eXBlb2YgUG9DaGFydFR5cGU7XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIERlZmluZSBhIGFsdHVyYSBkbyBncsOhZmljby5cbiAgICAgKlxuICAgICAqIE8gdmFsb3IgcGFkcsOjbyBkb3MgZ3LDoWZpY29zIHPDo286XG4gICAgICogLSBwYXJhIG8gdGlwbyAqZ2F1Z2UqOiBgMjAwcHhgO1xuICAgICAqIC0gcGFyYSBvcyBkZW1haXMgdGlwb3M6IGA0MDBweGAuXG4gICAgICpcbiAgICAgKiA+IE8gdmFsb3IgbcOtbmltbyBhY2VpdG8gbmVzdGEgcHJvcHJpZWRhZGUgw6kgMjAwLlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgYDQwMHB4YFxuICAgICAqL1xuICAgIHNldCBoZWlnaHQodmFsdWU6IG51bWJlcik7XG4gICAgZ2V0IGhlaWdodCgpOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBEZWZpbmUgb3MgZWxlbWVudG9zIGRvIGdyw6FmaWNvIHF1ZSBzZXLDo28gY3JpYWRvcyBkaW5hbWljYW1lbnRlLlxuICAgICAqXG4gICAgICogPiBBIGNvbGXDp8OjbyBkZSBvYmpldG9zIGRldmUgaW1wbGVtZW50YXIgYWxndW1hIGRhcyBpbnRlcmZhY2VzIGFiYWl4bzpcbiAgICAgKiAtIGBQb0RvbnV0Q2hhcnRTZXJpZXNgXG4gICAgICogLSBgUG9QaWVDaGFydFNlcmllc2BcbiAgICAgKiAtIGBQb0NoYXJ0R2F1Z2VTZXJpZWBcbiAgICAgKi9cbiAgICBzZXQgc2VyaWVzKHZhbHVlOiBQb0NoYXJ0R2F1Z2VTZXJpZSB8IEFycmF5PFBvRG9udXRDaGFydFNlcmllcyB8IFBvUGllQ2hhcnRTZXJpZXM+KTtcbiAgICBnZXQgc2VyaWVzKCk6IFBvQ2hhcnRHYXVnZVNlcmllIHwgQXJyYXk8UG9Eb251dENoYXJ0U2VyaWVzIHwgUG9QaWVDaGFydFNlcmllcz47XG4gICAgLyoqIERlZmluZSBvIHTDrXR1bG8gZG8gZ3LDoWZpY28uICovXG4gICAgdGl0bGU/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIERlZmluZSBvIHRpcG8gZGUgZ3LDoWZpY28uXG4gICAgICpcbiAgICAgKiA+IFZlamEgb3MgdmFsb3JlcyB2w6FsaWRvcyBubyAqZW51bSogYFBvQ2hhcnRUeXBlYC5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IGBQb0NoYXJ0VHlwZS5QaWVgXG4gICAgICovXG4gICAgc2V0IHR5cGUodmFsdWU6IFBvQ2hhcnRUeXBlKTtcbiAgICBnZXQgdHlwZSgpOiBQb0NoYXJ0VHlwZTtcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogRXZlbnRvIGV4ZWN1dGFkbyBxdWFuZG8gbyB1c3XDoXJpbyBjbGljYXIgc29icmUgdW0gZWxlbWVudG8gZG8gZ3LDoWZpY28uXG4gICAgICpcbiAgICAgKiA+IFNlcsOhIHBhc3NhZG8gcG9yIHBhcsOibWV0cm8gdW0gb2JqZXRvIGNvbnRlbmRvIGEgY2F0ZWdvcmlhIGUgdmFsb3IgZGEgc8OpcmllLlxuICAgICAqL1xuICAgIHNlcmllc0NsaWNrOiBFdmVudEVtaXR0ZXI8UG9DaGFydEdhdWdlU2VyaWUgfCBQb0RvbnV0Q2hhcnRTZXJpZXMgfCBQb1BpZUNoYXJ0U2VyaWVzPjtcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogRXZlbnRvIGV4ZWN1dGFkbyBxdWFuZG8gbyB1c3XDoXJpbyBwYXNzYXIgbyAqbW91c2UqIHNvYnJlIHVtIGVsZW1lbnRvIGRvIGdyw6FmaWNvLlxuICAgICAqXG4gICAgICogPiBTZXLDoSBwYXNzYWRvIHBvciBwYXLDom1ldHJvIHVtIG9iamV0byBjb250ZW5kbyBhIGNhdGVnb3JpYSBlIHZhbG9yIGRhIHPDqXJpZS5cbiAgICAgKi9cbiAgICBzZXJpZXNIb3ZlcjogRXZlbnRFbWl0dGVyPFBvQ2hhcnRHYXVnZVNlcmllIHwgUG9Eb251dENoYXJ0U2VyaWVzIHwgUG9QaWVDaGFydFNlcmllcz47XG4gICAgb25TZXJpZXNDbGljayhldmVudDogYW55KTogdm9pZDtcbiAgICBvblNlcmllc0hvdmVyKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIHByaXZhdGUgc2V0RGVmYXVsdEhlaWdodDtcbiAgICBwcml2YXRlIHRyYW5zZm9ybU9iamVjdFRvQXJyYXlPYmplY3Q7XG4gICAgYWJzdHJhY3QgcmVidWlsZENvbXBvbmVudCgpOiB2b2lkO1xufVxuIl19