import { AfterContentInit, ElementRef } from '@angular/core';
import { Observable } from 'rxjs';
import { PoStepperStatus } from '../enums/po-stepper-status.enum';
/**
 * @description
 *
 * O componente `po-step` é utilizado para envolver e renderizar o conteúdo de um passo (*step*) do `po-stepper`, por exemplo:
 *
 * ```
 * <po-stepper>
 *
 *    <po-step p-label="Endereço">
 *
 *        <!-- Conteúdo referente ao endereço -->
 *
 *    </po-step>
 *
 *    <po-step p-label="Pagamento">
 *
 *        <!-- Conteúdo referente ao pagamento -->
 *
 *    </po-step>
 *
 *  </po-stepper>
 * ```
 *
 * A renderização do conteúdo envolvido na tela e o controle dos status são feitos automaticamente. No qual, o primeiro
 * `po-step` encontrado será colocado como ativo, o próximo fica com o status *default* e os demais ficam
 * desabilitados (*disabled*).
 *
 * Ao clicar no `po-step` que está com o status *default*, o que está ativo ficará com o
 * status de concluído (*done*) e o próximo que estava desabilitado ficará com o status *default* e o restante permanecerá
 * com o status desabilitado.
 *
 * > Ao utilizar o `po-step`, o componente `po-stepper` funcionará de forma sequencial, ou seja, não será possível
 * pular para outro `po-step` que esteja com o status igual a desabilitado (*disabled*).
 *
 * Acesse a [documentação do `po-stepper`](/documentation/po-stepper) para ter mais informações sobre o seu funcionamento
 * e exemplos de uso.
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoStepComponent implements AfterContentInit {
    private elementRef;
    private _status?;
    id?: string;
    /**
     * @optional
     *
     * @description
     *
     * Função chamada quando o próximo *step* for clicado ou quando o método `PoStepperComponent.next()` for chamado.
     * Ao retornar `true` define que esse *step* ficará ativo e o atual como concluído (*done*).
     * Também aceita funções que retornem `Observable<boolean>`. Ao retornar um `Observable<boolean>`,
     * garanta que esse `Observable` será completado, caso houver algum erro durante o processo não será possível prosseguir
     * ao próximo *step*.
     *
     * Ao ser disparada, a mesma receberá por parâmetro o `PoStepComponent` atual.
     *
     * O contexto da função que será chamada, será o mesmo que o do `PoStepComponent`, então para poder alterar
     * para o contexto do componente que o está utilizando, pode ser utilizado a propriedade `bind` do Javascript.
     * Por exemplo, para a função `validate`:
     *
     * ```
     * <po-step p-label="Step 1" [p-can-active-next-step]="validate.bind(this)">
     * ...
     * </po-step>
     * ```
     */
    canActiveNextStep: ((currentStep: any) => boolean) | ((currentStep: any) => Observable<boolean>);
    /** Título que será exibido descrevendo o passo (*step*). */
    label: string;
    set status(status: PoStepperStatus);
    get status(): PoStepperStatus;
    constructor(elementRef: ElementRef);
    ngAfterContentInit(): void;
    protected setDisplayOnActiveOrError(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoStepComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PoStepComponent, "po-step", never, { "status": "p-status"; "canActiveNextStep": "p-can-active-next-step"; "label": "p-label"; }, {}, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tc3RlcC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicG8tc3RlcC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFBvU3RlcHBlclN0YXR1cyB9IGZyb20gJy4uL2VudW1zL3BvLXN0ZXBwZXItc3RhdHVzLmVudW0nO1xuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBPIGNvbXBvbmVudGUgYHBvLXN0ZXBgIMOpIHV0aWxpemFkbyBwYXJhIGVudm9sdmVyIGUgcmVuZGVyaXphciBvIGNvbnRlw7pkbyBkZSB1bSBwYXNzbyAoKnN0ZXAqKSBkbyBgcG8tc3RlcHBlcmAsIHBvciBleGVtcGxvOlxuICpcbiAqIGBgYFxuICogPHBvLXN0ZXBwZXI+XG4gKlxuICogICAgPHBvLXN0ZXAgcC1sYWJlbD1cIkVuZGVyZcOnb1wiPlxuICpcbiAqICAgICAgICA8IS0tIENvbnRlw7pkbyByZWZlcmVudGUgYW8gZW5kZXJlw6dvIC0tPlxuICpcbiAqICAgIDwvcG8tc3RlcD5cbiAqXG4gKiAgICA8cG8tc3RlcCBwLWxhYmVsPVwiUGFnYW1lbnRvXCI+XG4gKlxuICogICAgICAgIDwhLS0gQ29udGXDumRvIHJlZmVyZW50ZSBhbyBwYWdhbWVudG8gLS0+XG4gKlxuICogICAgPC9wby1zdGVwPlxuICpcbiAqICA8L3BvLXN0ZXBwZXI+XG4gKiBgYGBcbiAqXG4gKiBBIHJlbmRlcml6YcOnw6NvIGRvIGNvbnRlw7pkbyBlbnZvbHZpZG8gbmEgdGVsYSBlIG8gY29udHJvbGUgZG9zIHN0YXR1cyBzw6NvIGZlaXRvcyBhdXRvbWF0aWNhbWVudGUuIE5vIHF1YWwsIG8gcHJpbWVpcm9cbiAqIGBwby1zdGVwYCBlbmNvbnRyYWRvIHNlcsOhIGNvbG9jYWRvIGNvbW8gYXRpdm8sIG8gcHLDs3hpbW8gZmljYSBjb20gbyBzdGF0dXMgKmRlZmF1bHQqIGUgb3MgZGVtYWlzIGZpY2FtXG4gKiBkZXNhYmlsaXRhZG9zICgqZGlzYWJsZWQqKS5cbiAqXG4gKiBBbyBjbGljYXIgbm8gYHBvLXN0ZXBgIHF1ZSBlc3TDoSBjb20gbyBzdGF0dXMgKmRlZmF1bHQqLCBvIHF1ZSBlc3TDoSBhdGl2byBmaWNhcsOhIGNvbSBvXG4gKiBzdGF0dXMgZGUgY29uY2x1w61kbyAoKmRvbmUqKSBlIG8gcHLDs3hpbW8gcXVlIGVzdGF2YSBkZXNhYmlsaXRhZG8gZmljYXLDoSBjb20gbyBzdGF0dXMgKmRlZmF1bHQqIGUgbyByZXN0YW50ZSBwZXJtYW5lY2Vyw6FcbiAqIGNvbSBvIHN0YXR1cyBkZXNhYmlsaXRhZG8uXG4gKlxuICogPiBBbyB1dGlsaXphciBvIGBwby1zdGVwYCwgbyBjb21wb25lbnRlIGBwby1zdGVwcGVyYCBmdW5jaW9uYXLDoSBkZSBmb3JtYSBzZXF1ZW5jaWFsLCBvdSBzZWphLCBuw6NvIHNlcsOhIHBvc3PDrXZlbFxuICogcHVsYXIgcGFyYSBvdXRybyBgcG8tc3RlcGAgcXVlIGVzdGVqYSBjb20gbyBzdGF0dXMgaWd1YWwgYSBkZXNhYmlsaXRhZG8gKCpkaXNhYmxlZCopLlxuICpcbiAqIEFjZXNzZSBhIFtkb2N1bWVudGHDp8OjbyBkbyBgcG8tc3RlcHBlcmBdKC9kb2N1bWVudGF0aW9uL3BvLXN0ZXBwZXIpIHBhcmEgdGVyIG1haXMgaW5mb3JtYcOnw7VlcyBzb2JyZSBvIHNldSBmdW5jaW9uYW1lbnRvXG4gKiBlIGV4ZW1wbG9zIGRlIHVzby5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUG9TdGVwQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmO1xuICAgIHByaXZhdGUgX3N0YXR1cz87XG4gICAgaWQ/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIEZ1bsOnw6NvIGNoYW1hZGEgcXVhbmRvIG8gcHLDs3hpbW8gKnN0ZXAqIGZvciBjbGljYWRvIG91IHF1YW5kbyBvIG3DqXRvZG8gYFBvU3RlcHBlckNvbXBvbmVudC5uZXh0KClgIGZvciBjaGFtYWRvLlxuICAgICAqIEFvIHJldG9ybmFyIGB0cnVlYCBkZWZpbmUgcXVlIGVzc2UgKnN0ZXAqIGZpY2Fyw6EgYXRpdm8gZSBvIGF0dWFsIGNvbW8gY29uY2x1w61kbyAoKmRvbmUqKS5cbiAgICAgKiBUYW1iw6ltIGFjZWl0YSBmdW7Dp8O1ZXMgcXVlIHJldG9ybmVtIGBPYnNlcnZhYmxlPGJvb2xlYW4+YC4gQW8gcmV0b3JuYXIgdW0gYE9ic2VydmFibGU8Ym9vbGVhbj5gLFxuICAgICAqIGdhcmFudGEgcXVlIGVzc2UgYE9ic2VydmFibGVgIHNlcsOhIGNvbXBsZXRhZG8sIGNhc28gaG91dmVyIGFsZ3VtIGVycm8gZHVyYW50ZSBvIHByb2Nlc3NvIG7Do28gc2Vyw6EgcG9zc8OtdmVsIHByb3NzZWd1aXJcbiAgICAgKiBhbyBwcsOzeGltbyAqc3RlcCouXG4gICAgICpcbiAgICAgKiBBbyBzZXIgZGlzcGFyYWRhLCBhIG1lc21hIHJlY2ViZXLDoSBwb3IgcGFyw6JtZXRybyBvIGBQb1N0ZXBDb21wb25lbnRgIGF0dWFsLlxuICAgICAqXG4gICAgICogTyBjb250ZXh0byBkYSBmdW7Dp8OjbyBxdWUgc2Vyw6EgY2hhbWFkYSwgc2Vyw6EgbyBtZXNtbyBxdWUgbyBkbyBgUG9TdGVwQ29tcG9uZW50YCwgZW50w6NvIHBhcmEgcG9kZXIgYWx0ZXJhclxuICAgICAqIHBhcmEgbyBjb250ZXh0byBkbyBjb21wb25lbnRlIHF1ZSBvIGVzdMOhIHV0aWxpemFuZG8sIHBvZGUgc2VyIHV0aWxpemFkbyBhIHByb3ByaWVkYWRlIGBiaW5kYCBkbyBKYXZhc2NyaXB0LlxuICAgICAqIFBvciBleGVtcGxvLCBwYXJhIGEgZnVuw6fDo28gYHZhbGlkYXRlYDpcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIDxwby1zdGVwIHAtbGFiZWw9XCJTdGVwIDFcIiBbcC1jYW4tYWN0aXZlLW5leHQtc3RlcF09XCJ2YWxpZGF0ZS5iaW5kKHRoaXMpXCI+XG4gICAgICogLi4uXG4gICAgICogPC9wby1zdGVwPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGNhbkFjdGl2ZU5leHRTdGVwOiAoKGN1cnJlbnRTdGVwOiBhbnkpID0+IGJvb2xlYW4pIHwgKChjdXJyZW50U3RlcDogYW55KSA9PiBPYnNlcnZhYmxlPGJvb2xlYW4+KTtcbiAgICAvKiogVMOtdHVsbyBxdWUgc2Vyw6EgZXhpYmlkbyBkZXNjcmV2ZW5kbyBvIHBhc3NvICgqc3RlcCopLiAqL1xuICAgIGxhYmVsOiBzdHJpbmc7XG4gICAgc2V0IHN0YXR1cyhzdGF0dXM6IFBvU3RlcHBlclN0YXR1cyk7XG4gICAgZ2V0IHN0YXR1cygpOiBQb1N0ZXBwZXJTdGF0dXM7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZik7XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHNldERpc3BsYXlPbkFjdGl2ZU9yRXJyb3IoKTogdm9pZDtcbn1cbiJdfQ==