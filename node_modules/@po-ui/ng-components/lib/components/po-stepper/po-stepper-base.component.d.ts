import { EventEmitter } from '@angular/core';
import { PoStepComponent } from './po-step/po-step.component';
import { PoStepperItem } from './po-stepper-item.interface';
import { PoStepperOrientation } from './enums/po-stepper-orientation.enum';
/**
 * @description
 *
 * O `po-stepper` permite que um processo seja dividido em passos para que o usuário o realize
 * mais facilmente.
 *
 * Existem duas formas de utilização:
 *
 * 1 - Usando o componente [**po-step**](/documentation/po-step) para renderizar e descrever os passos.
 *
 * 2 - Através da propriedade `p-steps` para descrever os passos do processo, sendo responsabilidade do desenvolvedor o controle
 * de renderização do que será exibido a cada *step* ativo.
 *
 * Através de suas propriedades, é possível definir se sua orientação será horizontal ou vertical,
 * além da possibilidade de aumentar o tamanho dos *steps*.
 *
 * Também é possível navegar entre os *steps* através do teclado utilizando a tecla *tab* e, para ativar o *step* em foco basta
 * pressionar a tecla *enter*. Além disso, é possível ativar a exibição de ícones no lugar de números nos *steps* através da
 * propriedade [`p-step-icons`](/documentation/po-stepper#stepIconsProperty).
 *
 * #### Utilizando os métodos do componente:
 *
 * Para acessar os métodos do componente é necessário ter a referência do mesmo.
 *
 * Por exemplo, utilizando um [**ViewChild**](https://angular.io/api/core/ViewChild):
 *
 * ```
 * @ViewChild(PoStepperComponent) poStepperComponent: PoStepperComponent;
 * ```
 *
 * E para acessar o método:
 *
 * ```
 * poStepperComponent.next();
 * ```
 *
 * #### Boas práticas
 *
 * - Evite `labels` extensos que quebram o layout do `po-stepper`, use `labels` diretos, curtos e intuitivos.
 * - Utilize apenas um `po-stepper` por página.
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoStepperBaseComponent {
    private _orientation?;
    private _sequential?;
    private _step;
    private _steps;
    /**
     * @optional
     *
     * @description
     *
     * Define a orientação de exibição do `po-stepper`.
     *
     * > Veja os valores válidos no *enum* [PoStepperOrientation](documentation/po-stepper#stepperOrientation).
     *
     * @default `PoStepperOrientation.Horizontal`
     */
    set orientation(value: PoStepperOrientation);
    get orientation(): PoStepperOrientation;
    /**
     * @optional
     *
     * @description
     *
     * Controla o passo atual do `po-stepper`.
     *
     * > Ao utilizar esta propriedade e também utilizar o componente [**po-step**](/documentation/po-step),
     * o valor desta propriedade será ignorada permanecendo a definição do [**po-step**](/documentation/po-step).
     *
     * @default `1`
     */
    set step(step: number);
    get step(): number;
    /**
     * @optional
     *
     * @description
     *
     * Lista dos itens do stepper. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio.
     *
     * > Ao utilizar esta propriedade e também utilizar o componente [**po-step**](/documentation/po-step),
     * o valor desta propriedade será ignorada permanecendo a definição do [**po-step**](/documentation/po-step).
     */
    set steps(steps: Array<PoStepperItem>);
    get steps(): Array<PoStepperItem>;
    /**
     *
     * @optional
     *
     * @description
     *
     * <a id="stepIconsProperty"></a>
     *
     * Habilita a exibição de ícone ao invés de número no centro do círculo dos *steps*.
     *
     * @default `false`
     */
    stepIcons: boolean;
    /**
     * @optional
     *
     * @description
     *
     * Define o tamanho dos *steps* em *pixels*, possibilitando um maior destaque.
     *
     * O valor informado deve ser entre `24` e `64`.
     *
     * > Valores que não se enquadrarem a esta regra serão ignorados, mantendo-se o valor *default*.
     *
     * @default `24`
     */
    stepSize: number;
    /**
     * @optional
     *
     * @description
     *
     * Define se o `po-stepper` será sequencial ou aleatório.
     *
     * > Ao utilizar o componente [**po-step**](/documentation/po-step), o valor desta propriedade sempre será verdadeiro.
     *
     * @default `true`
     */
    set sequential(sequential: boolean);
    get sequential(): boolean;
    /** Ação que será executada quando o usuário mudar o passo do `po-stepper`. */
    onChangeStep: EventEmitter<number | PoStepComponent>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoStepperBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoStepperBaseComponent, never, never, { "orientation": "p-orientation"; "step": "p-step"; "steps": "p-steps"; "sequential": "p-sequential"; "stepIcons": "p-step-icons"; "stepSize": "p-step-size"; }, { "onChangeStep": "p-change-step"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tc3RlcHBlci1iYXNlLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJwby1zdGVwcGVyLWJhc2UuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQb1N0ZXBDb21wb25lbnQgfSBmcm9tICcuL3BvLXN0ZXAvcG8tc3RlcC5jb21wb25lbnQnO1xuaW1wb3J0IHsgUG9TdGVwcGVySXRlbSB9IGZyb20gJy4vcG8tc3RlcHBlci1pdGVtLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb1N0ZXBwZXJPcmllbnRhdGlvbiB9IGZyb20gJy4vZW51bXMvcG8tc3RlcHBlci1vcmllbnRhdGlvbi5lbnVtJztcbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogTyBgcG8tc3RlcHBlcmAgcGVybWl0ZSBxdWUgdW0gcHJvY2Vzc28gc2VqYSBkaXZpZGlkbyBlbSBwYXNzb3MgcGFyYSBxdWUgbyB1c3XDoXJpbyBvIHJlYWxpemVcbiAqIG1haXMgZmFjaWxtZW50ZS5cbiAqXG4gKiBFeGlzdGVtIGR1YXMgZm9ybWFzIGRlIHV0aWxpemHDp8OjbzpcbiAqXG4gKiAxIC0gVXNhbmRvIG8gY29tcG9uZW50ZSBbKipwby1zdGVwKipdKC9kb2N1bWVudGF0aW9uL3BvLXN0ZXApIHBhcmEgcmVuZGVyaXphciBlIGRlc2NyZXZlciBvcyBwYXNzb3MuXG4gKlxuICogMiAtIEF0cmF2w6lzIGRhIHByb3ByaWVkYWRlIGBwLXN0ZXBzYCBwYXJhIGRlc2NyZXZlciBvcyBwYXNzb3MgZG8gcHJvY2Vzc28sIHNlbmRvIHJlc3BvbnNhYmlsaWRhZGUgZG8gZGVzZW52b2x2ZWRvciBvIGNvbnRyb2xlXG4gKiBkZSByZW5kZXJpemHDp8OjbyBkbyBxdWUgc2Vyw6EgZXhpYmlkbyBhIGNhZGEgKnN0ZXAqIGF0aXZvLlxuICpcbiAqIEF0cmF2w6lzIGRlIHN1YXMgcHJvcHJpZWRhZGVzLCDDqSBwb3Nzw612ZWwgZGVmaW5pciBzZSBzdWEgb3JpZW50YcOnw6NvIHNlcsOhIGhvcml6b250YWwgb3UgdmVydGljYWwsXG4gKiBhbMOpbSBkYSBwb3NzaWJpbGlkYWRlIGRlIGF1bWVudGFyIG8gdGFtYW5obyBkb3MgKnN0ZXBzKi5cbiAqXG4gKiBUYW1iw6ltIMOpIHBvc3PDrXZlbCBuYXZlZ2FyIGVudHJlIG9zICpzdGVwcyogYXRyYXbDqXMgZG8gdGVjbGFkbyB1dGlsaXphbmRvIGEgdGVjbGEgKnRhYiogZSwgcGFyYSBhdGl2YXIgbyAqc3RlcCogZW0gZm9jbyBiYXN0YVxuICogcHJlc3Npb25hciBhIHRlY2xhICplbnRlciouIEFsw6ltIGRpc3NvLCDDqSBwb3Nzw612ZWwgYXRpdmFyIGEgZXhpYmnDp8OjbyBkZSDDrWNvbmVzIG5vIGx1Z2FyIGRlIG7Dum1lcm9zIG5vcyAqc3RlcHMqIGF0cmF2w6lzIGRhXG4gKiBwcm9wcmllZGFkZSBbYHAtc3RlcC1pY29uc2BdKC9kb2N1bWVudGF0aW9uL3BvLXN0ZXBwZXIjc3RlcEljb25zUHJvcGVydHkpLlxuICpcbiAqICMjIyMgVXRpbGl6YW5kbyBvcyBtw6l0b2RvcyBkbyBjb21wb25lbnRlOlxuICpcbiAqIFBhcmEgYWNlc3NhciBvcyBtw6l0b2RvcyBkbyBjb21wb25lbnRlIMOpIG5lY2Vzc8OhcmlvIHRlciBhIHJlZmVyw6puY2lhIGRvIG1lc21vLlxuICpcbiAqIFBvciBleGVtcGxvLCB1dGlsaXphbmRvIHVtIFsqKlZpZXdDaGlsZCoqXShodHRwczovL2FuZ3VsYXIuaW8vYXBpL2NvcmUvVmlld0NoaWxkKTpcbiAqXG4gKiBgYGBcbiAqIEBWaWV3Q2hpbGQoUG9TdGVwcGVyQ29tcG9uZW50KSBwb1N0ZXBwZXJDb21wb25lbnQ6IFBvU3RlcHBlckNvbXBvbmVudDtcbiAqIGBgYFxuICpcbiAqIEUgcGFyYSBhY2Vzc2FyIG8gbcOpdG9kbzpcbiAqXG4gKiBgYGBcbiAqIHBvU3RlcHBlckNvbXBvbmVudC5uZXh0KCk7XG4gKiBgYGBcbiAqXG4gKiAjIyMjIEJvYXMgcHLDoXRpY2FzXG4gKlxuICogLSBFdml0ZSBgbGFiZWxzYCBleHRlbnNvcyBxdWUgcXVlYnJhbSBvIGxheW91dCBkbyBgcG8tc3RlcHBlcmAsIHVzZSBgbGFiZWxzYCBkaXJldG9zLCBjdXJ0b3MgZSBpbnR1aXRpdm9zLlxuICogLSBVdGlsaXplIGFwZW5hcyB1bSBgcG8tc3RlcHBlcmAgcG9yIHDDoWdpbmEuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBvU3RlcHBlckJhc2VDb21wb25lbnQge1xuICAgIHByaXZhdGUgX29yaWVudGF0aW9uPztcbiAgICBwcml2YXRlIF9zZXF1ZW50aWFsPztcbiAgICBwcml2YXRlIF9zdGVwO1xuICAgIHByaXZhdGUgX3N0ZXBzO1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBEZWZpbmUgYSBvcmllbnRhw6fDo28gZGUgZXhpYmnDp8OjbyBkbyBgcG8tc3RlcHBlcmAuXG4gICAgICpcbiAgICAgKiA+IFZlamEgb3MgdmFsb3JlcyB2w6FsaWRvcyBubyAqZW51bSogW1BvU3RlcHBlck9yaWVudGF0aW9uXShkb2N1bWVudGF0aW9uL3BvLXN0ZXBwZXIjc3RlcHBlck9yaWVudGF0aW9uKS5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IGBQb1N0ZXBwZXJPcmllbnRhdGlvbi5Ib3Jpem9udGFsYFxuICAgICAqL1xuICAgIHNldCBvcmllbnRhdGlvbih2YWx1ZTogUG9TdGVwcGVyT3JpZW50YXRpb24pO1xuICAgIGdldCBvcmllbnRhdGlvbigpOiBQb1N0ZXBwZXJPcmllbnRhdGlvbjtcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogQ29udHJvbGEgbyBwYXNzbyBhdHVhbCBkbyBgcG8tc3RlcHBlcmAuXG4gICAgICpcbiAgICAgKiA+IEFvIHV0aWxpemFyIGVzdGEgcHJvcHJpZWRhZGUgZSB0YW1iw6ltIHV0aWxpemFyIG8gY29tcG9uZW50ZSBbKipwby1zdGVwKipdKC9kb2N1bWVudGF0aW9uL3BvLXN0ZXApLFxuICAgICAqIG8gdmFsb3IgZGVzdGEgcHJvcHJpZWRhZGUgc2Vyw6EgaWdub3JhZGEgcGVybWFuZWNlbmRvIGEgZGVmaW5pw6fDo28gZG8gWyoqcG8tc3RlcCoqXSgvZG9jdW1lbnRhdGlvbi9wby1zdGVwKS5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IGAxYFxuICAgICAqL1xuICAgIHNldCBzdGVwKHN0ZXA6IG51bWJlcik7XG4gICAgZ2V0IHN0ZXAoKTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBMaXN0YSBkb3MgaXRlbnMgZG8gc3RlcHBlci4gU2UgbyB2YWxvciBlc3RpdmVyIGluZGVmaW5pZG8gb3UgaW52w6FsaWRvLCBzZXLDoSBpbmljaWFsaXphZG8gY29tbyB1bSBhcnJheSB2YXppby5cbiAgICAgKlxuICAgICAqID4gQW8gdXRpbGl6YXIgZXN0YSBwcm9wcmllZGFkZSBlIHRhbWLDqW0gdXRpbGl6YXIgbyBjb21wb25lbnRlIFsqKnBvLXN0ZXAqKl0oL2RvY3VtZW50YXRpb24vcG8tc3RlcCksXG4gICAgICogbyB2YWxvciBkZXN0YSBwcm9wcmllZGFkZSBzZXLDoSBpZ25vcmFkYSBwZXJtYW5lY2VuZG8gYSBkZWZpbmnDp8OjbyBkbyBbKipwby1zdGVwKipdKC9kb2N1bWVudGF0aW9uL3BvLXN0ZXApLlxuICAgICAqL1xuICAgIHNldCBzdGVwcyhzdGVwczogQXJyYXk8UG9TdGVwcGVySXRlbT4pO1xuICAgIGdldCBzdGVwcygpOiBBcnJheTxQb1N0ZXBwZXJJdGVtPjtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiA8YSBpZD1cInN0ZXBJY29uc1Byb3BlcnR5XCI+PC9hPlxuICAgICAqXG4gICAgICogSGFiaWxpdGEgYSBleGliacOnw6NvIGRlIMOtY29uZSBhbyBpbnbDqXMgZGUgbsO6bWVybyBubyBjZW50cm8gZG8gY8OtcmN1bG8gZG9zICpzdGVwcyouXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAgICovXG4gICAgc3RlcEljb25zOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBEZWZpbmUgbyB0YW1hbmhvIGRvcyAqc3RlcHMqIGVtICpwaXhlbHMqLCBwb3NzaWJpbGl0YW5kbyB1bSBtYWlvciBkZXN0YXF1ZS5cbiAgICAgKlxuICAgICAqIE8gdmFsb3IgaW5mb3JtYWRvIGRldmUgc2VyIGVudHJlIGAyNGAgZSBgNjRgLlxuICAgICAqXG4gICAgICogPiBWYWxvcmVzIHF1ZSBuw6NvIHNlIGVucXVhZHJhcmVtIGEgZXN0YSByZWdyYSBzZXLDo28gaWdub3JhZG9zLCBtYW50ZW5kby1zZSBvIHZhbG9yICpkZWZhdWx0Ki5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IGAyNGBcbiAgICAgKi9cbiAgICBzdGVwU2l6ZTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBEZWZpbmUgc2UgbyBgcG8tc3RlcHBlcmAgc2Vyw6Egc2VxdWVuY2lhbCBvdSBhbGVhdMOzcmlvLlxuICAgICAqXG4gICAgICogPiBBbyB1dGlsaXphciBvIGNvbXBvbmVudGUgWyoqcG8tc3RlcCoqXSgvZG9jdW1lbnRhdGlvbi9wby1zdGVwKSwgbyB2YWxvciBkZXN0YSBwcm9wcmllZGFkZSBzZW1wcmUgc2Vyw6EgdmVyZGFkZWlyby5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IGB0cnVlYFxuICAgICAqL1xuICAgIHNldCBzZXF1ZW50aWFsKHNlcXVlbnRpYWw6IGJvb2xlYW4pO1xuICAgIGdldCBzZXF1ZW50aWFsKCk6IGJvb2xlYW47XG4gICAgLyoqIEHDp8OjbyBxdWUgc2Vyw6EgZXhlY3V0YWRhIHF1YW5kbyBvIHVzdcOhcmlvIG11ZGFyIG8gcGFzc28gZG8gYHBvLXN0ZXBwZXJgLiAqL1xuICAgIG9uQ2hhbmdlU3RlcDogRXZlbnRFbWl0dGVyPG51bWJlciB8IFBvU3RlcENvbXBvbmVudD47XG59XG4iXX0=