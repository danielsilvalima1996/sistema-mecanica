import { AfterContentInit, ChangeDetectorRef, QueryList } from '@angular/core';
import { PoStepComponent } from './po-step/po-step.component';
import { PoStepperBaseComponent } from './po-stepper-base.component';
import { PoStepperItem } from './po-stepper-item.interface';
/**
 * @docsExtends PoStepperBaseComponent
 *
 * @example
 *
 * <example name="po-stepper-basic" title="PO Stepper Basic">
 *  <file name="sample-po-stepper-basic/sample-po-stepper-basic.component.html"> </file>
 *  <file name="sample-po-stepper-basic/sample-po-stepper-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-stepper-labs" title="PO Stepper Labs">
 *  <file name="sample-po-stepper-labs/sample-po-stepper-labs.component.html"> </file>
 *  <file name="sample-po-stepper-labs/sample-po-stepper-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-stepper-sales" title="PO Stepper - Sales">
 *  <file name="sample-po-stepper-sales/sample-po-stepper-sales.component.html"> </file>
 *  <file name="sample-po-stepper-sales/sample-po-stepper-sales.component.ts"> </file>
 * </example>
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoStepperComponent extends PoStepperBaseComponent implements AfterContentInit {
    private changeDetector;
    poSteps: QueryList<PoStepComponent>;
    private currentActiveStep;
    private previousActiveStep;
    get currentStepIndex(): number;
    get stepList(): QueryList<PoStepComponent> | Array<PoStepperItem>;
    get usePoSteps(): boolean;
    constructor(changeDetector: ChangeDetectorRef);
    ngAfterContentInit(): void;
    /**
     * Altera o status do *step* para ativo.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     *
     * @param {number} index Índice do `po-step` que se deseja ativar.
     */
    active(index: number): void;
    /**
     * Ativa o primeiro *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     */
    first(): void;
    /**
     * Ativa o próximo *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     */
    next(): void;
    /**
     * Ativa o *step* anterior.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     */
    previous(): void;
    changeStep(stepIndex: number, step?: PoStepComponent): void;
    onStepActive(step: PoStepComponent): void;
    trackByFn(step: PoStepComponent): string;
    private activeFirstStep;
    private allowNextStep;
    private canActiveNextStep;
    private controlStepsStatus;
    private getStepperStatusByCanActive;
    private getStepsAndIndex;
    private getPoSteps;
    private isBeforeStep;
    private setFinalSteppersAsDisabled;
    private setStepAsActive;
    private setNextStepAsDefault;
    private setPreviousStepAsDone;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoStepperComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PoStepperComponent, "po-stepper", never, {}, {}, ["poSteps"], ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tc3RlcHBlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicG8tc3RlcHBlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIENoYW5nZURldGVjdG9yUmVmLCBRdWVyeUxpc3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBvU3RlcENvbXBvbmVudCB9IGZyb20gJy4vcG8tc3RlcC9wby1zdGVwLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQb1N0ZXBwZXJCYXNlQ29tcG9uZW50IH0gZnJvbSAnLi9wby1zdGVwcGVyLWJhc2UuY29tcG9uZW50JztcbmltcG9ydCB7IFBvU3RlcHBlckl0ZW0gfSBmcm9tICcuL3BvLXN0ZXBwZXItaXRlbS5pbnRlcmZhY2UnO1xuLyoqXG4gKiBAZG9jc0V4dGVuZHMgUG9TdGVwcGVyQmFzZUNvbXBvbmVudFxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInBvLXN0ZXBwZXItYmFzaWNcIiB0aXRsZT1cIlBPIFN0ZXBwZXIgQmFzaWNcIj5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXN0ZXBwZXItYmFzaWMvc2FtcGxlLXBvLXN0ZXBwZXItYmFzaWMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tc3RlcHBlci1iYXNpYy9zYW1wbGUtcG8tc3RlcHBlci1iYXNpYy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJwby1zdGVwcGVyLWxhYnNcIiB0aXRsZT1cIlBPIFN0ZXBwZXIgTGFic1wiPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tc3RlcHBlci1sYWJzL3NhbXBsZS1wby1zdGVwcGVyLWxhYnMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tc3RlcHBlci1sYWJzL3NhbXBsZS1wby1zdGVwcGVyLWxhYnMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tc3RlcHBlci1zYWxlc1wiIHRpdGxlPVwiUE8gU3RlcHBlciAtIFNhbGVzXCI+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1zdGVwcGVyLXNhbGVzL3NhbXBsZS1wby1zdGVwcGVyLXNhbGVzLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXN0ZXBwZXItc2FsZXMvc2FtcGxlLXBvLXN0ZXBwZXItc2FsZXMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUG9TdGVwcGVyQ29tcG9uZW50IGV4dGVuZHMgUG9TdGVwcGVyQmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQge1xuICAgIHByaXZhdGUgY2hhbmdlRGV0ZWN0b3I7XG4gICAgcG9TdGVwczogUXVlcnlMaXN0PFBvU3RlcENvbXBvbmVudD47XG4gICAgcHJpdmF0ZSBjdXJyZW50QWN0aXZlU3RlcDtcbiAgICBwcml2YXRlIHByZXZpb3VzQWN0aXZlU3RlcDtcbiAgICBnZXQgY3VycmVudFN0ZXBJbmRleCgpOiBudW1iZXI7XG4gICAgZ2V0IHN0ZXBMaXN0KCk6IFF1ZXJ5TGlzdDxQb1N0ZXBDb21wb25lbnQ+IHwgQXJyYXk8UG9TdGVwcGVySXRlbT47XG4gICAgZ2V0IHVzZVBvU3RlcHMoKTogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3RvcihjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWYpO1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEFsdGVyYSBvIHN0YXR1cyBkbyAqc3RlcCogcGFyYSBhdGl2by5cbiAgICAgKlxuICAgICAqID4gRXN0ZSBtw6l0b2RvIMOpIHZhbGlkbyBhcGVuYXMgcGFyYSBhcyBpbXBsZW1lbnRhw6fDtWVzIHF1ZSB1dGlsaXphbSBvIGNvbXBvbmVudGUgWyoqcG8tc3RlcCoqXSgvZG9jdW1lbnRhdGlvbi9wby1zdGVwKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCDDjW5kaWNlIGRvIGBwby1zdGVwYCBxdWUgc2UgZGVzZWphIGF0aXZhci5cbiAgICAgKi9cbiAgICBhY3RpdmUoaW5kZXg6IG51bWJlcik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQXRpdmEgbyBwcmltZWlybyAqc3RlcCouXG4gICAgICpcbiAgICAgKiA+IEVzdGUgbcOpdG9kbyDDqSB2YWxpZG8gYXBlbmFzIHBhcmEgYXMgaW1wbGVtZW50YcOnw7VlcyBxdWUgdXRpbGl6YW0gbyBjb21wb25lbnRlIFsqKnBvLXN0ZXAqKl0oL2RvY3VtZW50YXRpb24vcG8tc3RlcCkuXG4gICAgICovXG4gICAgZmlyc3QoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBBdGl2YSBvIHByw7N4aW1vICpzdGVwKi5cbiAgICAgKlxuICAgICAqID4gRXN0ZSBtw6l0b2RvIMOpIHZhbGlkbyBhcGVuYXMgcGFyYSBhcyBpbXBsZW1lbnRhw6fDtWVzIHF1ZSB1dGlsaXphbSBvIGNvbXBvbmVudGUgWyoqcG8tc3RlcCoqXSgvZG9jdW1lbnRhdGlvbi9wby1zdGVwKS5cbiAgICAgKi9cbiAgICBuZXh0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQXRpdmEgbyAqc3RlcCogYW50ZXJpb3IuXG4gICAgICpcbiAgICAgKiA+IEVzdGUgbcOpdG9kbyDDqSB2YWxpZG8gYXBlbmFzIHBhcmEgYXMgaW1wbGVtZW50YcOnw7VlcyBxdWUgdXRpbGl6YW0gbyBjb21wb25lbnRlIFsqKnBvLXN0ZXAqKl0oL2RvY3VtZW50YXRpb24vcG8tc3RlcCkuXG4gICAgICovXG4gICAgcHJldmlvdXMoKTogdm9pZDtcbiAgICBjaGFuZ2VTdGVwKHN0ZXBJbmRleDogbnVtYmVyLCBzdGVwPzogUG9TdGVwQ29tcG9uZW50KTogdm9pZDtcbiAgICBvblN0ZXBBY3RpdmUoc3RlcDogUG9TdGVwQ29tcG9uZW50KTogdm9pZDtcbiAgICB0cmFja0J5Rm4oc3RlcDogUG9TdGVwQ29tcG9uZW50KTogc3RyaW5nO1xuICAgIHByaXZhdGUgYWN0aXZlRmlyc3RTdGVwO1xuICAgIHByaXZhdGUgYWxsb3dOZXh0U3RlcDtcbiAgICBwcml2YXRlIGNhbkFjdGl2ZU5leHRTdGVwO1xuICAgIHByaXZhdGUgY29udHJvbFN0ZXBzU3RhdHVzO1xuICAgIHByaXZhdGUgZ2V0U3RlcHBlclN0YXR1c0J5Q2FuQWN0aXZlO1xuICAgIHByaXZhdGUgZ2V0U3RlcHNBbmRJbmRleDtcbiAgICBwcml2YXRlIGdldFBvU3RlcHM7XG4gICAgcHJpdmF0ZSBpc0JlZm9yZVN0ZXA7XG4gICAgcHJpdmF0ZSBzZXRGaW5hbFN0ZXBwZXJzQXNEaXNhYmxlZDtcbiAgICBwcml2YXRlIHNldFN0ZXBBc0FjdGl2ZTtcbiAgICBwcml2YXRlIHNldE5leHRTdGVwQXNEZWZhdWx0O1xuICAgIHByaXZhdGUgc2V0UHJldmlvdXNTdGVwQXNEb25lO1xufVxuIl19