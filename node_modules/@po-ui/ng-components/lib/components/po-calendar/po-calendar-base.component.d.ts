import { EventEmitter } from '@angular/core';
import { PoCalendarLangService } from './services/po-calendar.lang.service';
import { PoDateService } from '../../services/po-date';
/**
 * @description
 *
 * O `po-calendar` é um componente para seleção de datas. Ele permite uma fácil navegação clicando nas setas
 * de direcionamento e nos *labels* do ano ou mês.
 *
 * Este componente pode receber os seguintes formatos de data:
 *
 * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
 * ```
 * this.date = '2017-11-28T00:00:00-02:00';
 * ```
 *
 * - **Data (E8601DAw.): yyyy-mm-dd**
 * ```
 * this.date = '2017-11-28';
 * ```
 *
 * - **JavaScript Date Object:**
 * ```
 * this.date = new Date(2017, 10, 28);
 * ```
 *
 * > Independentemente do formato utilizado, o componente trata o valor do *model* internamente com o
 * formato **Data (E8601DAw.): yyyy-mm-dd**.
 *
 * Importante:
 *
 * - Caso seja definida uma data fora do range da data mínima e data máxima via *ngModel* o componente mostrará
 * a data desabilitada porém o *model* não será alterado.
 * - Caso seja definida uma data inválida a mesma não será atribuída ao calendário porém o *model* manterá a data inválida.
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoCalendarBaseComponent {
    poDate: PoDateService;
    poCalendarLangService: PoCalendarLangService;
    private _locale;
    private _maxDate;
    private _minDate;
    currentYear: number;
    dayVisible: boolean;
    displayDays: Array<number>;
    displayDecade: Array<number>;
    displayFinalDecade: number;
    displayMonth: any;
    displayMonthNumber: number;
    displayMonths: Array<any>;
    displayStartDecade: number;
    displayWeekDays: Array<any>;
    displayYear: number;
    monthVisible: boolean;
    yearVisible: boolean;
    protected currentMonthNumber: number;
    protected date: Date;
    protected dateIso: string;
    protected lastDisplay: string;
    protected onTouched: any;
    protected propagateChange: any;
    protected today: Date;
    protected validatorChange: any;
    /**
     * @optional
     *
     * @description
     *
     * Idioma do calendário.
     *
     * Valores válidos:
     *  - `pt`
     *  - `en`
     *  - `es`
     *
     * @default `pt`
     */
    set locale(locale: string);
    get locale(): string;
    /**
     * @optional
     *
     * @description
     *
     * Define a data máxima possível de ser selecionada.
     *
     * Pode receber os seguintes formatos de data:
     *
     * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
     * ```
     * this.date = '2017-11-28T00:00:00-02:00';
     * ```
     *
     * - **Data (E8601DAw.): yyyy-mm-dd**
     * ```
     * this.date = '2017-11-28';
     * ```
     *
     * - **JavaScript Date Object:**
     * ```
     * this.date = new Date(2017, 10, 28);
     * ```
     */
    set maxDate(maxDate: any);
    get maxDate(): any;
    /**
     * @optional
     *
     * @description
     *
     * Define a data mínima possível de ser selecionada.
     *
     * Pode receber os seguintes formatos de data:
     *
     * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
     * ```
     * this.date = '2017-11-28T00:00:00-02:00';
     * ```
     *
     * - **Data (E8601DAw.): yyyy-mm-dd**
     * ```
     * this.date = '2017-11-28';
     * ```
     *
     * - **JavaScript Date Object:**
     * ```
     * this.date = new Date(2017, 10, 28);
     * ```
     */
    set minDate(minDate: any);
    get minDate(): any;
    /** Evento disparado ao selecionar um dia do calendário. */
    change: EventEmitter<string>;
    constructor(poDate: PoDateService, poCalendarLangService: PoCalendarLangService);
    initializeLanguage(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoCalendarBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoCalendarBaseComponent, never, never, { "locale": "p-locale"; "maxDate": "p-max-date"; "minDate": "p-min-date"; }, { "change": "p-change"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2FsZW5kYXItYmFzZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicG8tY2FsZW5kYXItYmFzZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBvQ2FsZW5kYXJMYW5nU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvcG8tY2FsZW5kYXIubGFuZy5zZXJ2aWNlJztcbmltcG9ydCB7IFBvRGF0ZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9wby1kYXRlJztcbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogTyBgcG8tY2FsZW5kYXJgIMOpIHVtIGNvbXBvbmVudGUgcGFyYSBzZWxlw6fDo28gZGUgZGF0YXMuIEVsZSBwZXJtaXRlIHVtYSBmw6FjaWwgbmF2ZWdhw6fDo28gY2xpY2FuZG8gbmFzIHNldGFzXG4gKiBkZSBkaXJlY2lvbmFtZW50byBlIG5vcyAqbGFiZWxzKiBkbyBhbm8gb3UgbcOqcy5cbiAqXG4gKiBFc3RlIGNvbXBvbmVudGUgcG9kZSByZWNlYmVyIG9zIHNlZ3VpbnRlcyBmb3JtYXRvcyBkZSBkYXRhOlxuICpcbiAqIC0gKipEYXRhIGUgaG9yYSBjb21iaW5hZG9zIChFODYwMURadyk6IHl5eXktbW0tZGRUaGg6bW06c3MrfC1oaDptbSoqXG4gKiBgYGBcbiAqIHRoaXMuZGF0ZSA9ICcyMDE3LTExLTI4VDAwOjAwOjAwLTAyOjAwJztcbiAqIGBgYFxuICpcbiAqIC0gKipEYXRhIChFODYwMURBdy4pOiB5eXl5LW1tLWRkKipcbiAqIGBgYFxuICogdGhpcy5kYXRlID0gJzIwMTctMTEtMjgnO1xuICogYGBgXG4gKlxuICogLSAqKkphdmFTY3JpcHQgRGF0ZSBPYmplY3Q6KipcbiAqIGBgYFxuICogdGhpcy5kYXRlID0gbmV3IERhdGUoMjAxNywgMTAsIDI4KTtcbiAqIGBgYFxuICpcbiAqID4gSW5kZXBlbmRlbnRlbWVudGUgZG8gZm9ybWF0byB1dGlsaXphZG8sIG8gY29tcG9uZW50ZSB0cmF0YSBvIHZhbG9yIGRvICptb2RlbCogaW50ZXJuYW1lbnRlIGNvbSBvXG4gKiBmb3JtYXRvICoqRGF0YSAoRTg2MDFEQXcuKTogeXl5eS1tbS1kZCoqLlxuICpcbiAqIEltcG9ydGFudGU6XG4gKlxuICogLSBDYXNvIHNlamEgZGVmaW5pZGEgdW1hIGRhdGEgZm9yYSBkbyByYW5nZSBkYSBkYXRhIG3DrW5pbWEgZSBkYXRhIG3DoXhpbWEgdmlhICpuZ01vZGVsKiBvIGNvbXBvbmVudGUgbW9zdHJhcsOhXG4gKiBhIGRhdGEgZGVzYWJpbGl0YWRhIHBvcsOpbSBvICptb2RlbCogbsOjbyBzZXLDoSBhbHRlcmFkby5cbiAqIC0gQ2FzbyBzZWphIGRlZmluaWRhIHVtYSBkYXRhIGludsOhbGlkYSBhIG1lc21hIG7Do28gc2Vyw6EgYXRyaWJ1w61kYSBhbyBjYWxlbmTDoXJpbyBwb3LDqW0gbyAqbW9kZWwqIG1hbnRlcsOhIGEgZGF0YSBpbnbDoWxpZGEuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBvQ2FsZW5kYXJCYXNlQ29tcG9uZW50IHtcbiAgICBwb0RhdGU6IFBvRGF0ZVNlcnZpY2U7XG4gICAgcG9DYWxlbmRhckxhbmdTZXJ2aWNlOiBQb0NhbGVuZGFyTGFuZ1NlcnZpY2U7XG4gICAgcHJpdmF0ZSBfbG9jYWxlO1xuICAgIHByaXZhdGUgX21heERhdGU7XG4gICAgcHJpdmF0ZSBfbWluRGF0ZTtcbiAgICBjdXJyZW50WWVhcjogbnVtYmVyO1xuICAgIGRheVZpc2libGU6IGJvb2xlYW47XG4gICAgZGlzcGxheURheXM6IEFycmF5PG51bWJlcj47XG4gICAgZGlzcGxheURlY2FkZTogQXJyYXk8bnVtYmVyPjtcbiAgICBkaXNwbGF5RmluYWxEZWNhZGU6IG51bWJlcjtcbiAgICBkaXNwbGF5TW9udGg6IGFueTtcbiAgICBkaXNwbGF5TW9udGhOdW1iZXI6IG51bWJlcjtcbiAgICBkaXNwbGF5TW9udGhzOiBBcnJheTxhbnk+O1xuICAgIGRpc3BsYXlTdGFydERlY2FkZTogbnVtYmVyO1xuICAgIGRpc3BsYXlXZWVrRGF5czogQXJyYXk8YW55PjtcbiAgICBkaXNwbGF5WWVhcjogbnVtYmVyO1xuICAgIG1vbnRoVmlzaWJsZTogYm9vbGVhbjtcbiAgICB5ZWFyVmlzaWJsZTogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgY3VycmVudE1vbnRoTnVtYmVyOiBudW1iZXI7XG4gICAgcHJvdGVjdGVkIGRhdGU6IERhdGU7XG4gICAgcHJvdGVjdGVkIGRhdGVJc286IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgbGFzdERpc3BsYXk6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgb25Ub3VjaGVkOiBhbnk7XG4gICAgcHJvdGVjdGVkIHByb3BhZ2F0ZUNoYW5nZTogYW55O1xuICAgIHByb3RlY3RlZCB0b2RheTogRGF0ZTtcbiAgICBwcm90ZWN0ZWQgdmFsaWRhdG9yQ2hhbmdlOiBhbnk7XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIElkaW9tYSBkbyBjYWxlbmTDoXJpby5cbiAgICAgKlxuICAgICAqIFZhbG9yZXMgdsOhbGlkb3M6XG4gICAgICogIC0gYHB0YFxuICAgICAqICAtIGBlbmBcbiAgICAgKiAgLSBgZXNgXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBgcHRgXG4gICAgICovXG4gICAgc2V0IGxvY2FsZShsb2NhbGU6IHN0cmluZyk7XG4gICAgZ2V0IGxvY2FsZSgpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIERlZmluZSBhIGRhdGEgbcOheGltYSBwb3Nzw612ZWwgZGUgc2VyIHNlbGVjaW9uYWRhLlxuICAgICAqXG4gICAgICogUG9kZSByZWNlYmVyIG9zIHNlZ3VpbnRlcyBmb3JtYXRvcyBkZSBkYXRhOlxuICAgICAqXG4gICAgICogLSAqKkRhdGEgZSBob3JhIGNvbWJpbmFkb3MgKEU4NjAxRFp3KTogeXl5eS1tbS1kZFRoaDptbTpzcyt8LWhoOm1tKipcbiAgICAgKiBgYGBcbiAgICAgKiB0aGlzLmRhdGUgPSAnMjAxNy0xMS0yOFQwMDowMDowMC0wMjowMCc7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiAtICoqRGF0YSAoRTg2MDFEQXcuKTogeXl5eS1tbS1kZCoqXG4gICAgICogYGBgXG4gICAgICogdGhpcy5kYXRlID0gJzIwMTctMTEtMjgnO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogLSAqKkphdmFTY3JpcHQgRGF0ZSBPYmplY3Q6KipcbiAgICAgKiBgYGBcbiAgICAgKiB0aGlzLmRhdGUgPSBuZXcgRGF0ZSgyMDE3LCAxMCwgMjgpO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHNldCBtYXhEYXRlKG1heERhdGU6IGFueSk7XG4gICAgZ2V0IG1heERhdGUoKTogYW55O1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBEZWZpbmUgYSBkYXRhIG3DrW5pbWEgcG9zc8OtdmVsIGRlIHNlciBzZWxlY2lvbmFkYS5cbiAgICAgKlxuICAgICAqIFBvZGUgcmVjZWJlciBvcyBzZWd1aW50ZXMgZm9ybWF0b3MgZGUgZGF0YTpcbiAgICAgKlxuICAgICAqIC0gKipEYXRhIGUgaG9yYSBjb21iaW5hZG9zIChFODYwMURadyk6IHl5eXktbW0tZGRUaGg6bW06c3MrfC1oaDptbSoqXG4gICAgICogYGBgXG4gICAgICogdGhpcy5kYXRlID0gJzIwMTctMTEtMjhUMDA6MDA6MDAtMDI6MDAnO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogLSAqKkRhdGEgKEU4NjAxREF3Lik6IHl5eXktbW0tZGQqKlxuICAgICAqIGBgYFxuICAgICAqIHRoaXMuZGF0ZSA9ICcyMDE3LTExLTI4JztcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIC0gKipKYXZhU2NyaXB0IERhdGUgT2JqZWN0OioqXG4gICAgICogYGBgXG4gICAgICogdGhpcy5kYXRlID0gbmV3IERhdGUoMjAxNywgMTAsIDI4KTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBzZXQgbWluRGF0ZShtaW5EYXRlOiBhbnkpO1xuICAgIGdldCBtaW5EYXRlKCk6IGFueTtcbiAgICAvKiogRXZlbnRvIGRpc3BhcmFkbyBhbyBzZWxlY2lvbmFyIHVtIGRpYSBkbyBjYWxlbmTDoXJpby4gKi9cbiAgICBjaGFuZ2U6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xuICAgIGNvbnN0cnVjdG9yKHBvRGF0ZTogUG9EYXRlU2VydmljZSwgcG9DYWxlbmRhckxhbmdTZXJ2aWNlOiBQb0NhbGVuZGFyTGFuZ1NlcnZpY2UpO1xuICAgIGluaXRpYWxpemVMYW5ndWFnZSgpOiB2b2lkO1xufVxuIl19