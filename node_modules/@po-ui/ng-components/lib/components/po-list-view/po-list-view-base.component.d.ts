import { EventEmitter } from '@angular/core';
import { PoListViewAction } from './interfaces/po-list-view-action.interface';
import { PoListViewLiterals } from './interfaces/po-list-view-literals.interface';
import * as ɵngcc0 from '@angular/core';
export declare const poListViewLiteralsDefault: {
    en: PoListViewLiterals;
    es: PoListViewLiterals;
    pt: PoListViewLiterals;
    ru: PoListViewLiterals;
};
/**
 * @description
 *
 * Componente de lista que recebe um array de objetos e renderiza de forma dinâmica os dados de
 * acordo com a necessidade de cada tela e deve ser utilizado em conjunto com as diretivas de *templates*
 *  **[p-list-view-content-template](/documentation/po-list-view-content-template)** e
 * **[p-list-view-detail-template](/documentation/po-list-view-detail-template)**.
 *
 * O componente disponibiliza uma área específica para exibição informações adicionais,
 * através da diretiva **[p-list-view-detail-template](/documentation/po-list-view-detail-template)**.
 */
export declare class PoListViewBaseComponent {
    private _actions;
    private _height;
    private _hideSelectAll;
    private _items;
    private _literals;
    private _select;
    private _showMoreDisabled;
    popupTarget: any;
    selectAll: boolean;
    showHeader: boolean;
    /**
     * @optional
     *
     * @description
     *
     * Lista de ações que serão exibidas no componente.
     */
    set actions(value: Array<PoListViewAction>);
    get actions(): Array<PoListViewAction>;
    /**
     * @optional
     *
     * @description
     *
     * Define a altura do `po-list-view` em *pixels*.
     */
    set height(height: number);
    get height(): number;
    /**
     * @description
     *
     * Esconde o *checkbox* para seleção de todos os itens.
     *
     * @default `false`
     */
    set hideSelectAll(hideSelectAll: boolean);
    get hideSelectAll(): boolean;
    /** Lista de itens que serão exibidos no componente. */
    set items(value: Array<any>);
    get items(): Array<any>;
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-list-view`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoListViewLiterals = {
     *    hideDetail: 'Ocultar detalhes completamente',
     *    loadMoreData: 'Mais dados',
     *    showDetail: 'Mostrar mais detalhes',
     *    selectAll: 'Selecionar todos os itens'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoListViewLiterals = {
     *    showDetail: 'Mostrar mais detalhes'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-list-view
     *   [p-literals]="customLiterals">
     * </po-list-view>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
     */
    set literals(value: PoListViewLiterals);
    get literals(): PoListViewLiterals;
    /** Recebe uma propriedade que será utilizada para recuperar o valor do objeto que será usado como link para o título. */
    propertyLink?: string;
    /** Recebe uma propriedade que será utilizada para recuperar o valor do objeto que será exibido como o título de cada item. */
    propertyTitle?: string;
    /**
     * @optional
     *
     * @description
     *
     * Habilita um *checkbox* para cada item da lista. Todos os items possuem a propriedade dinâmica `$selected` para identificar se o
     * item está selecionado, por exemplo:
     *
     * ```
     *  item.$selected
     *
     *  // ou
     *
     *  item['$selected']
     * ```
     *
     * @default `false`
     */
    set select(select: boolean);
    get select(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Indica que o botão `Carregar Mais Resultados` será desabilitado.
     */
    set showMoreDisabled(value: boolean);
    get showMoreDisabled(): boolean;
    /**
     * Recebe uma ação, que será executada quando clicar no botão "Carregar mais resultados".
     *
     * > Caso nenhuma ação for definida o mesmo não ficará visível.
     */
    showMore?: EventEmitter<any>;
    /**
     * Ação que será executada ao clicar no título.
     *
     * Ao ser disparado, o método inserido na ação irá receber como parâmetro o item da lista clicado.
     */
    titleAction?: EventEmitter<any>;
    onClickAction(listViewAction: PoListViewAction, item: any): void;
    onShowMore(): void;
    runTitleAction(listItem: any): void;
    selectAllListItems(): void;
    selectListItem(row: any): void;
    private deleteInternalAttrs;
    private checkIfItemsAreSelected;
    private showMainHeader;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoListViewBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoListViewBaseComponent, never, never, { "actions": "p-actions"; "height": "p-height"; "hideSelectAll": "p-hide-select-all"; "items": "p-items"; "literals": "p-literals"; "select": "p-select"; "showMoreDisabled": "p-show-more-disabled"; "propertyLink": "p-property-link"; "propertyTitle": "p-property-title"; }, { "showMore": "p-show-more"; "titleAction": "p-title-action"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbGlzdC12aWV3LWJhc2UuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBvLWxpc3Qtdmlldy1iYXNlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUG9MaXN0Vmlld0FjdGlvbiB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1saXN0LXZpZXctYWN0aW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb0xpc3RWaWV3TGl0ZXJhbHMgfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tbGlzdC12aWV3LWxpdGVyYWxzLmludGVyZmFjZSc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBwb0xpc3RWaWV3TGl0ZXJhbHNEZWZhdWx0OiB7XG4gICAgZW46IFBvTGlzdFZpZXdMaXRlcmFscztcbiAgICBlczogUG9MaXN0Vmlld0xpdGVyYWxzO1xuICAgIHB0OiBQb0xpc3RWaWV3TGl0ZXJhbHM7XG4gICAgcnU6IFBvTGlzdFZpZXdMaXRlcmFscztcbn07XG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIENvbXBvbmVudGUgZGUgbGlzdGEgcXVlIHJlY2ViZSB1bSBhcnJheSBkZSBvYmpldG9zIGUgcmVuZGVyaXphIGRlIGZvcm1hIGRpbsOibWljYSBvcyBkYWRvcyBkZVxuICogYWNvcmRvIGNvbSBhIG5lY2Vzc2lkYWRlIGRlIGNhZGEgdGVsYSBlIGRldmUgc2VyIHV0aWxpemFkbyBlbSBjb25qdW50byBjb20gYXMgZGlyZXRpdmFzIGRlICp0ZW1wbGF0ZXMqXG4gKiAgKipbcC1saXN0LXZpZXctY29udGVudC10ZW1wbGF0ZV0oL2RvY3VtZW50YXRpb24vcG8tbGlzdC12aWV3LWNvbnRlbnQtdGVtcGxhdGUpKiogZVxuICogKipbcC1saXN0LXZpZXctZGV0YWlsLXRlbXBsYXRlXSgvZG9jdW1lbnRhdGlvbi9wby1saXN0LXZpZXctZGV0YWlsLXRlbXBsYXRlKSoqLlxuICpcbiAqIE8gY29tcG9uZW50ZSBkaXNwb25pYmlsaXphIHVtYSDDoXJlYSBlc3BlY8OtZmljYSBwYXJhIGV4aWJpw6fDo28gaW5mb3JtYcOnw7VlcyBhZGljaW9uYWlzLFxuICogYXRyYXbDqXMgZGEgZGlyZXRpdmEgKipbcC1saXN0LXZpZXctZGV0YWlsLXRlbXBsYXRlXSgvZG9jdW1lbnRhdGlvbi9wby1saXN0LXZpZXctZGV0YWlsLXRlbXBsYXRlKSoqLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQb0xpc3RWaWV3QmFzZUNvbXBvbmVudCB7XG4gICAgcHJpdmF0ZSBfYWN0aW9ucztcbiAgICBwcml2YXRlIF9oZWlnaHQ7XG4gICAgcHJpdmF0ZSBfaGlkZVNlbGVjdEFsbDtcbiAgICBwcml2YXRlIF9pdGVtcztcbiAgICBwcml2YXRlIF9saXRlcmFscztcbiAgICBwcml2YXRlIF9zZWxlY3Q7XG4gICAgcHJpdmF0ZSBfc2hvd01vcmVEaXNhYmxlZDtcbiAgICBwb3B1cFRhcmdldDogYW55O1xuICAgIHNlbGVjdEFsbDogYm9vbGVhbjtcbiAgICBzaG93SGVhZGVyOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBMaXN0YSBkZSBhw6fDtWVzIHF1ZSBzZXLDo28gZXhpYmlkYXMgbm8gY29tcG9uZW50ZS5cbiAgICAgKi9cbiAgICBzZXQgYWN0aW9ucyh2YWx1ZTogQXJyYXk8UG9MaXN0Vmlld0FjdGlvbj4pO1xuICAgIGdldCBhY3Rpb25zKCk6IEFycmF5PFBvTGlzdFZpZXdBY3Rpb24+O1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBEZWZpbmUgYSBhbHR1cmEgZG8gYHBvLWxpc3Qtdmlld2AgZW0gKnBpeGVscyouXG4gICAgICovXG4gICAgc2V0IGhlaWdodChoZWlnaHQ6IG51bWJlcik7XG4gICAgZ2V0IGhlaWdodCgpOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBFc2NvbmRlIG8gKmNoZWNrYm94KiBwYXJhIHNlbGXDp8OjbyBkZSB0b2RvcyBvcyBpdGVucy5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICAgKi9cbiAgICBzZXQgaGlkZVNlbGVjdEFsbChoaWRlU2VsZWN0QWxsOiBib29sZWFuKTtcbiAgICBnZXQgaGlkZVNlbGVjdEFsbCgpOiBib29sZWFuO1xuICAgIC8qKiBMaXN0YSBkZSBpdGVucyBxdWUgc2Vyw6NvIGV4aWJpZG9zIG5vIGNvbXBvbmVudGUuICovXG4gICAgc2V0IGl0ZW1zKHZhbHVlOiBBcnJheTxhbnk+KTtcbiAgICBnZXQgaXRlbXMoKTogQXJyYXk8YW55PjtcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogT2JqZXRvIGNvbSBhcyBsaXRlcmFpcyB1c2FkYXMgbm8gYHBvLWxpc3Qtdmlld2AuXG4gICAgICpcbiAgICAgKiBFeGlzdGVtIGR1YXMgbWFuZWlyYXMgZGUgY3VzdG9taXphciBvIGNvbXBvbmVudGUsIHBhc3NhbmRvIHVtIG9iamV0byBjb20gdG9kYXMgYXMgbGl0ZXJhaXMgZGlzcG9uw612ZWlzOlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogIGNvbnN0IGN1c3RvbUxpdGVyYWxzOiBQb0xpc3RWaWV3TGl0ZXJhbHMgPSB7XG4gICAgICogICAgaGlkZURldGFpbDogJ09jdWx0YXIgZGV0YWxoZXMgY29tcGxldGFtZW50ZScsXG4gICAgICogICAgbG9hZE1vcmVEYXRhOiAnTWFpcyBkYWRvcycsXG4gICAgICogICAgc2hvd0RldGFpbDogJ01vc3RyYXIgbWFpcyBkZXRhbGhlcycsXG4gICAgICogICAgc2VsZWN0QWxsOiAnU2VsZWNpb25hciB0b2RvcyBvcyBpdGVucydcbiAgICAgKiAgfTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIE91IHBhc3NhbmRvIGFwZW5hcyBhcyBsaXRlcmFpcyBxdWUgZGVzZWphIGN1c3RvbWl6YXI6XG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiAgY29uc3QgY3VzdG9tTGl0ZXJhbHM6IFBvTGlzdFZpZXdMaXRlcmFscyA9IHtcbiAgICAgKiAgICBzaG93RGV0YWlsOiAnTW9zdHJhciBtYWlzIGRldGFsaGVzJ1xuICAgICAqICB9O1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogRSBwYXJhIGNhcnJlZ2FyIGFzIGxpdGVyYWlzIGN1c3RvbWl6YWRhcywgYmFzdGEgYXBlbmFzIHBhc3NhciBvIG9iamV0byBwYXJhIG8gY29tcG9uZW50ZS5cbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIDxwby1saXN0LXZpZXdcbiAgICAgKiAgIFtwLWxpdGVyYWxzXT1cImN1c3RvbUxpdGVyYWxzXCI+XG4gICAgICogPC9wby1saXN0LXZpZXc+XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiA+IE8gb2JqZXRvIHBhZHLDo28gZGUgbGl0ZXJhaXMgc2Vyw6EgdHJhZHV6aWRvIGRlIGFjb3JkbyBjb20gbyBpZGlvbWEgZG8gYnJvd3NlciAocHQsIGVuLCBlcykuXG4gICAgICovXG4gICAgc2V0IGxpdGVyYWxzKHZhbHVlOiBQb0xpc3RWaWV3TGl0ZXJhbHMpO1xuICAgIGdldCBsaXRlcmFscygpOiBQb0xpc3RWaWV3TGl0ZXJhbHM7XG4gICAgLyoqIFJlY2ViZSB1bWEgcHJvcHJpZWRhZGUgcXVlIHNlcsOhIHV0aWxpemFkYSBwYXJhIHJlY3VwZXJhciBvIHZhbG9yIGRvIG9iamV0byBxdWUgc2Vyw6EgdXNhZG8gY29tbyBsaW5rIHBhcmEgbyB0w610dWxvLiAqL1xuICAgIHByb3BlcnR5TGluaz86IHN0cmluZztcbiAgICAvKiogUmVjZWJlIHVtYSBwcm9wcmllZGFkZSBxdWUgc2Vyw6EgdXRpbGl6YWRhIHBhcmEgcmVjdXBlcmFyIG8gdmFsb3IgZG8gb2JqZXRvIHF1ZSBzZXLDoSBleGliaWRvIGNvbW8gbyB0w610dWxvIGRlIGNhZGEgaXRlbS4gKi9cbiAgICBwcm9wZXJ0eVRpdGxlPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBIYWJpbGl0YSB1bSAqY2hlY2tib3gqIHBhcmEgY2FkYSBpdGVtIGRhIGxpc3RhLiBUb2RvcyBvcyBpdGVtcyBwb3NzdWVtIGEgcHJvcHJpZWRhZGUgZGluw6JtaWNhIGAkc2VsZWN0ZWRgIHBhcmEgaWRlbnRpZmljYXIgc2Ugb1xuICAgICAqIGl0ZW0gZXN0w6Egc2VsZWNpb25hZG8sIHBvciBleGVtcGxvOlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogIGl0ZW0uJHNlbGVjdGVkXG4gICAgICpcbiAgICAgKiAgLy8gb3VcbiAgICAgKlxuICAgICAqICBpdGVtWyckc2VsZWN0ZWQnXVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgICAqL1xuICAgIHNldCBzZWxlY3Qoc2VsZWN0OiBib29sZWFuKTtcbiAgICBnZXQgc2VsZWN0KCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQG9wdGlvbmFsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIEluZGljYSBxdWUgbyBib3TDo28gYENhcnJlZ2FyIE1haXMgUmVzdWx0YWRvc2Agc2Vyw6EgZGVzYWJpbGl0YWRvLlxuICAgICAqL1xuICAgIHNldCBzaG93TW9yZURpc2FibGVkKHZhbHVlOiBib29sZWFuKTtcbiAgICBnZXQgc2hvd01vcmVEaXNhYmxlZCgpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFJlY2ViZSB1bWEgYcOnw6NvLCBxdWUgc2Vyw6EgZXhlY3V0YWRhIHF1YW5kbyBjbGljYXIgbm8gYm90w6NvIFwiQ2FycmVnYXIgbWFpcyByZXN1bHRhZG9zXCIuXG4gICAgICpcbiAgICAgKiA+IENhc28gbmVuaHVtYSBhw6fDo28gZm9yIGRlZmluaWRhIG8gbWVzbW8gbsOjbyBmaWNhcsOhIHZpc8OtdmVsLlxuICAgICAqL1xuICAgIHNob3dNb3JlPzogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgLyoqXG4gICAgICogQcOnw6NvIHF1ZSBzZXLDoSBleGVjdXRhZGEgYW8gY2xpY2FyIG5vIHTDrXR1bG8uXG4gICAgICpcbiAgICAgKiBBbyBzZXIgZGlzcGFyYWRvLCBvIG3DqXRvZG8gaW5zZXJpZG8gbmEgYcOnw6NvIGlyw6EgcmVjZWJlciBjb21vIHBhcsOibWV0cm8gbyBpdGVtIGRhIGxpc3RhIGNsaWNhZG8uXG4gICAgICovXG4gICAgdGl0bGVBY3Rpb24/OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbkNsaWNrQWN0aW9uKGxpc3RWaWV3QWN0aW9uOiBQb0xpc3RWaWV3QWN0aW9uLCBpdGVtOiBhbnkpOiB2b2lkO1xuICAgIG9uU2hvd01vcmUoKTogdm9pZDtcbiAgICBydW5UaXRsZUFjdGlvbihsaXN0SXRlbTogYW55KTogdm9pZDtcbiAgICBzZWxlY3RBbGxMaXN0SXRlbXMoKTogdm9pZDtcbiAgICBzZWxlY3RMaXN0SXRlbShyb3c6IGFueSk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBkZWxldGVJbnRlcm5hbEF0dHJzO1xuICAgIHByaXZhdGUgY2hlY2tJZkl0ZW1zQXJlU2VsZWN0ZWQ7XG4gICAgcHJpdmF0ZSBzaG93TWFpbkhlYWRlcjtcbn1cbiJdfQ==