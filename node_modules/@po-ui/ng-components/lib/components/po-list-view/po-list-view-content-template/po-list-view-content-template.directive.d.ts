import { TemplateRef } from '@angular/core';
/**
 * @usedBy PoListViewComponent
 *
 * @description
 *
 * Esta diretiva permite que sejam apresentadas informações essenciais de cada item.
 *
 * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
 *  - Item: `item` determina o item da linha corrente.
 *  - Índice: `index` determina o índice da linha corrente.
 *
 * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <po-list-view
 *   p-property-title="name"
 *   [p-items]="[{id: 1, name: "Register", email: register@po-ui.com}]">
 *
 *   <ng-template p-list-view-content-template let-item let-code="index">
 *     <div class="po-row">
 *       <po-info class="po-md-6" p-label="Code" [p-value]="code"></po-info>
 *       <po-info class="po-md-6" p-label="Email" [p-value]="item.email"></po-info>
 *     </div>
 *   </ng-template>
 *
 * </po-list-view>
 *
 * ...
 * ```
 *
 * ```
 * ...
 * <po-list-view
 *    p-property-title="name"
 *    [p-items]="[{id: 1, name: "Register", email: register@po-ui.com}]">
 *
 *    <div *p-list-view-content-template="let item, let i=index" class="po-row">
 *      <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
 *    </div>
 * </po-list-view>
 * ...
 *
 * ```
 *
 * A diretiva **p-list-view-content-template**, possibilita também alterar o título dos itens. Para isto,
 * é necessário atribuir a referência da função que faz a alteração, à propriedade `p-title`,
 * a mesma deve retornar um valor do tipo *string*. Veja o exemplo a seguir:
 *
 * ```
 * ...
 * @Component({
 *    selector: 'app-root',
 *    template: `
 *      ...
 *      <po-list-view
 *        [p-items]="items">
 *        <ng-template p-list-view-content-template let-item [p-title]="customTitle">
 *          <div class="po-row">
 *            <po-info class="po-md-12" p-label="Customer" [p-value]="item.customer"></po-info>
 *          </div>
 *        </ng-template>
 *      ...
 *    `
 * })
 * export class AppComponent {
 *    public items = [{
 *      code: 1200,
 *      product: 'Rice',
 *      customer: 'Supermarket 1',
 *    }, {
 *      code: 1355,
 *      product: 'Bean',
 *      customer: 'Supermarket 2'
 *    }];
 *
 *    customTitle(item) {
 *      return `${item.code} - ${item.product}`;
 *    }
 * }
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoListViewContentTemplateDirective {
    templateRef: TemplateRef<any>;
    /**
     * @optional
     *
     * @description
     *
     * Função que deve retornar um valor do tipo `string`, que será utilizado como o título de cada item da lista.
     *
     * > Por parâmetro será enviado o item corrente, onde poderá utilizá-lo para recuperar dados sobre o mesmo.
     */
    title: (item: any) => string;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoListViewContentTemplateDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoListViewContentTemplateDirective, "[p-list-view-content-template]", never, { "title": "p-title"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbGlzdC12aWV3LWNvbnRlbnQtdGVtcGxhdGUuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbInBvLWxpc3Qtdmlldy1jb250ZW50LXRlbXBsYXRlLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbi8qKlxuICogQHVzZWRCeSBQb0xpc3RWaWV3Q29tcG9uZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogRXN0YSBkaXJldGl2YSBwZXJtaXRlIHF1ZSBzZWphbSBhcHJlc2VudGFkYXMgaW5mb3JtYcOnw7VlcyBlc3NlbmNpYWlzIGRlIGNhZGEgaXRlbS5cbiAqXG4gKiBEZXZlLXNlIHV0aWxpemFyIGNvbW8gcGFyw6JtZXRybyBhIHJlZmVyw6puY2lhIGRvIGl0ZW0gZS9vdSDDrW5kaWNlLCBzZW5kbyBwb3IgcGFkcsOjbyBvIGl0ZW0uXG4gKiAgLSBJdGVtOiBgaXRlbWAgZGV0ZXJtaW5hIG8gaXRlbSBkYSBsaW5oYSBjb3JyZW50ZS5cbiAqICAtIMONbmRpY2U6IGBpbmRleGAgZGV0ZXJtaW5hIG8gw61uZGljZSBkYSBsaW5oYSBjb3JyZW50ZS5cbiAqXG4gKiBFc3RhIGRpcmV0aXZhIHBvZGUgc2VyIHVzYWRhIGRlIGR1YXMgZm9ybWFzOiBleHBsw61jaXRhIG91ICpzeW50YXggc3VnYXIqLiBWZWphIGEgc2VndWlyIGFtYm9zLCByZXNwZWN0aXZhbWVudGU6XG4gKlxuICogYGBgXG4gKiAuLi5cbiAqIDxwby1saXN0LXZpZXdcbiAqICAgcC1wcm9wZXJ0eS10aXRsZT1cIm5hbWVcIlxuICogICBbcC1pdGVtc109XCJbe2lkOiAxLCBuYW1lOiBcIlJlZ2lzdGVyXCIsIGVtYWlsOiByZWdpc3RlckBwby11aS5jb219XVwiPlxuICpcbiAqICAgPG5nLXRlbXBsYXRlIHAtbGlzdC12aWV3LWNvbnRlbnQtdGVtcGxhdGUgbGV0LWl0ZW0gbGV0LWNvZGU9XCJpbmRleFwiPlxuICogICAgIDxkaXYgY2xhc3M9XCJwby1yb3dcIj5cbiAqICAgICAgIDxwby1pbmZvIGNsYXNzPVwicG8tbWQtNlwiIHAtbGFiZWw9XCJDb2RlXCIgW3AtdmFsdWVdPVwiY29kZVwiPjwvcG8taW5mbz5cbiAqICAgICAgIDxwby1pbmZvIGNsYXNzPVwicG8tbWQtNlwiIHAtbGFiZWw9XCJFbWFpbFwiIFtwLXZhbHVlXT1cIml0ZW0uZW1haWxcIj48L3BvLWluZm8+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvbmctdGVtcGxhdGU+XG4gKlxuICogPC9wby1saXN0LXZpZXc+XG4gKlxuICogLi4uXG4gKiBgYGBcbiAqXG4gKiBgYGBcbiAqIC4uLlxuICogPHBvLWxpc3Qtdmlld1xuICogICAgcC1wcm9wZXJ0eS10aXRsZT1cIm5hbWVcIlxuICogICAgW3AtaXRlbXNdPVwiW3tpZDogMSwgbmFtZTogXCJSZWdpc3RlclwiLCBlbWFpbDogcmVnaXN0ZXJAcG8tdWkuY29tfV1cIj5cbiAqXG4gKiAgICA8ZGl2ICpwLWxpc3Qtdmlldy1jb250ZW50LXRlbXBsYXRlPVwibGV0IGl0ZW0sIGxldCBpPWluZGV4XCIgY2xhc3M9XCJwby1yb3dcIj5cbiAqICAgICAgPHBvLWluZm8gY2xhc3M9XCJwby1tZC0xMlwiIHAtbGFiZWw9XCJFbWFpbFwiIFtwLXZhbHVlXT1cIml0ZW0uZW1haWxcIj48L3BvLWluZm8+XG4gKiAgICA8L2Rpdj5cbiAqIDwvcG8tbGlzdC12aWV3PlxuICogLi4uXG4gKlxuICogYGBgXG4gKlxuICogQSBkaXJldGl2YSAqKnAtbGlzdC12aWV3LWNvbnRlbnQtdGVtcGxhdGUqKiwgcG9zc2liaWxpdGEgdGFtYsOpbSBhbHRlcmFyIG8gdMOtdHVsbyBkb3MgaXRlbnMuIFBhcmEgaXN0byxcbiAqIMOpIG5lY2Vzc8OhcmlvIGF0cmlidWlyIGEgcmVmZXLDqm5jaWEgZGEgZnVuw6fDo28gcXVlIGZheiBhIGFsdGVyYcOnw6NvLCDDoCBwcm9wcmllZGFkZSBgcC10aXRsZWAsXG4gKiBhIG1lc21hIGRldmUgcmV0b3JuYXIgdW0gdmFsb3IgZG8gdGlwbyAqc3RyaW5nKi4gVmVqYSBvIGV4ZW1wbG8gYSBzZWd1aXI6XG4gKlxuICogYGBgXG4gKiAuLi5cbiAqIEBDb21wb25lbnQoe1xuICogICAgc2VsZWN0b3I6ICdhcHAtcm9vdCcsXG4gKiAgICB0ZW1wbGF0ZTogYFxuICogICAgICAuLi5cbiAqICAgICAgPHBvLWxpc3Qtdmlld1xuICogICAgICAgIFtwLWl0ZW1zXT1cIml0ZW1zXCI+XG4gKiAgICAgICAgPG5nLXRlbXBsYXRlIHAtbGlzdC12aWV3LWNvbnRlbnQtdGVtcGxhdGUgbGV0LWl0ZW0gW3AtdGl0bGVdPVwiY3VzdG9tVGl0bGVcIj5cbiAqICAgICAgICAgIDxkaXYgY2xhc3M9XCJwby1yb3dcIj5cbiAqICAgICAgICAgICAgPHBvLWluZm8gY2xhc3M9XCJwby1tZC0xMlwiIHAtbGFiZWw9XCJDdXN0b21lclwiIFtwLXZhbHVlXT1cIml0ZW0uY3VzdG9tZXJcIj48L3BvLWluZm8+XG4gKiAgICAgICAgICA8L2Rpdj5cbiAqICAgICAgICA8L25nLXRlbXBsYXRlPlxuICogICAgICAuLi5cbiAqICAgIGBcbiAqIH0pXG4gKiBleHBvcnQgY2xhc3MgQXBwQ29tcG9uZW50IHtcbiAqICAgIHB1YmxpYyBpdGVtcyA9IFt7XG4gKiAgICAgIGNvZGU6IDEyMDAsXG4gKiAgICAgIHByb2R1Y3Q6ICdSaWNlJyxcbiAqICAgICAgY3VzdG9tZXI6ICdTdXBlcm1hcmtldCAxJyxcbiAqICAgIH0sIHtcbiAqICAgICAgY29kZTogMTM1NSxcbiAqICAgICAgcHJvZHVjdDogJ0JlYW4nLFxuICogICAgICBjdXN0b21lcjogJ1N1cGVybWFya2V0IDInXG4gKiAgICB9XTtcbiAqXG4gKiAgICBjdXN0b21UaXRsZShpdGVtKSB7XG4gKiAgICAgIHJldHVybiBgJHtpdGVtLmNvZGV9IC0gJHtpdGVtLnByb2R1Y3R9YDtcbiAqICAgIH1cbiAqIH1cbiAqIGBgYFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQb0xpc3RWaWV3Q29udGVudFRlbXBsYXRlRGlyZWN0aXZlIHtcbiAgICB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PjtcbiAgICAvKipcbiAgICAgKiBAb3B0aW9uYWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogRnVuw6fDo28gcXVlIGRldmUgcmV0b3JuYXIgdW0gdmFsb3IgZG8gdGlwbyBgc3RyaW5nYCwgcXVlIHNlcsOhIHV0aWxpemFkbyBjb21vIG8gdMOtdHVsbyBkZSBjYWRhIGl0ZW0gZGEgbGlzdGEuXG4gICAgICpcbiAgICAgKiA+IFBvciBwYXLDom1ldHJvIHNlcsOhIGVudmlhZG8gbyBpdGVtIGNvcnJlbnRlLCBvbmRlIHBvZGVyw6EgdXRpbGl6w6EtbG8gcGFyYSByZWN1cGVyYXIgZGFkb3Mgc29icmUgbyBtZXNtby5cbiAgICAgKi9cbiAgICB0aXRsZTogKGl0ZW06IGFueSkgPT4gc3RyaW5nO1xuICAgIGNvbnN0cnVjdG9yKHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+KTtcbn1cbiJdfQ==