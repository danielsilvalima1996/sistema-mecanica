import { AfterContentInit, ChangeDetectorRef, DoCheck, IterableDiffers } from '@angular/core';
import { PoPopupComponent } from '../po-popup/po-popup.component';
import { PoListViewAction } from './interfaces/po-list-view-action.interface';
import { PoListViewBaseComponent } from './po-list-view-base.component';
import { PoListViewContentTemplateDirective } from './po-list-view-content-template/po-list-view-content-template.directive';
import { PoListViewDetailTemplateDirective } from './po-list-view-detail-template/po-list-view-detail-template.directive';
/**
 * @docsExtends PoListViewBaseComponent
 *
 * @example
 *
 * <example name="po-list-view-basic" title="PO List View Basic">
 *  <file name="sample-po-list-view-basic/sample-po-list-view-basic.component.html"> </file>
 *  <file name="sample-po-list-view-basic/sample-po-list-view-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-list-view-labs" title="PO List View Labs">
 *  <file name="sample-po-list-view-labs/sample-po-list-view-labs.component.html"> </file>
 *  <file name="sample-po-list-view-labs/sample-po-list-view-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-list-view-hiring-processes" title="PO List View - Hiring Processes">
 *  <file name="sample-po-list-view-hiring-processes/sample-po-list-view-hiring-processes.component.html"> </file>
 *  <file name="sample-po-list-view-hiring-processes/sample-po-list-view-hiring-processes.component.ts"> </file>
 *  <file name="sample-po-list-view-hiring-processes/sample-po-list-view-hiring-processes.service.ts"> </file>
 * </example>
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoListViewComponent extends PoListViewBaseComponent implements AfterContentInit, DoCheck {
    private changeDetector;
    listViewContentTemplate: PoListViewContentTemplateDirective;
    listViewDetailTemplate: PoListViewDetailTemplateDirective;
    poPopupComponent: PoPopupComponent;
    private differ;
    constructor(changeDetector: ChangeDetectorRef, differs: IterableDiffers);
    get hasContentTemplate(): boolean;
    get hasDetailTemplate(): boolean;
    get displayShowMoreButton(): boolean;
    get showButtonsActions(): boolean;
    get showPopupActions(): boolean;
    get titleHasAction(): boolean;
    get visibleActions(): PoListViewAction[];
    ngAfterContentInit(): void;
    ngDoCheck(): void;
    checkTitleType(item: any): "externalLink" | "internalLink" | "noLink";
    getItemTitle(item: any): any;
    hasItems(): boolean;
    returnBooleanValue(listViewAction: PoListViewAction, item: any): any;
    trackBy(index: any): any;
    togglePopup(item: any, targetRef: HTMLElement): void;
    private checkItemsChange;
    private initShowDetail;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoListViewComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PoListViewComponent, "po-list-view", never, {}, {}, ["listViewContentTemplate", "listViewDetailTemplate"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbGlzdC12aWV3LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJwby1saXN0LXZpZXcuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlckNvbnRlbnRJbml0LCBDaGFuZ2VEZXRlY3RvclJlZiwgRG9DaGVjaywgSXRlcmFibGVEaWZmZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQb1BvcHVwQ29tcG9uZW50IH0gZnJvbSAnLi4vcG8tcG9wdXAvcG8tcG9wdXAuY29tcG9uZW50JztcbmltcG9ydCB7IFBvTGlzdFZpZXdBY3Rpb24gfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tbGlzdC12aWV3LWFjdGlvbi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9MaXN0Vmlld0Jhc2VDb21wb25lbnQgfSBmcm9tICcuL3BvLWxpc3Qtdmlldy1iYXNlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQb0xpc3RWaWV3Q29udGVudFRlbXBsYXRlRGlyZWN0aXZlIH0gZnJvbSAnLi9wby1saXN0LXZpZXctY29udGVudC10ZW1wbGF0ZS9wby1saXN0LXZpZXctY29udGVudC10ZW1wbGF0ZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgUG9MaXN0Vmlld0RldGFpbFRlbXBsYXRlRGlyZWN0aXZlIH0gZnJvbSAnLi9wby1saXN0LXZpZXctZGV0YWlsLXRlbXBsYXRlL3BvLWxpc3Qtdmlldy1kZXRhaWwtdGVtcGxhdGUuZGlyZWN0aXZlJztcbi8qKlxuICogQGRvY3NFeHRlbmRzIFBvTGlzdFZpZXdCYXNlQ29tcG9uZW50XG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tbGlzdC12aWV3LWJhc2ljXCIgdGl0bGU9XCJQTyBMaXN0IFZpZXcgQmFzaWNcIj5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWxpc3Qtdmlldy1iYXNpYy9zYW1wbGUtcG8tbGlzdC12aWV3LWJhc2ljLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWxpc3Qtdmlldy1iYXNpYy9zYW1wbGUtcG8tbGlzdC12aWV3LWJhc2ljLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInBvLWxpc3Qtdmlldy1sYWJzXCIgdGl0bGU9XCJQTyBMaXN0IFZpZXcgTGFic1wiPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tbGlzdC12aWV3LWxhYnMvc2FtcGxlLXBvLWxpc3Qtdmlldy1sYWJzLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWxpc3Qtdmlldy1sYWJzL3NhbXBsZS1wby1saXN0LXZpZXctbGFicy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJwby1saXN0LXZpZXctaGlyaW5nLXByb2Nlc3Nlc1wiIHRpdGxlPVwiUE8gTGlzdCBWaWV3IC0gSGlyaW5nIFByb2Nlc3Nlc1wiPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tbGlzdC12aWV3LWhpcmluZy1wcm9jZXNzZXMvc2FtcGxlLXBvLWxpc3Qtdmlldy1oaXJpbmctcHJvY2Vzc2VzLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWxpc3Qtdmlldy1oaXJpbmctcHJvY2Vzc2VzL3NhbXBsZS1wby1saXN0LXZpZXctaGlyaW5nLXByb2Nlc3Nlcy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tbGlzdC12aWV3LWhpcmluZy1wcm9jZXNzZXMvc2FtcGxlLXBvLWxpc3Qtdmlldy1oaXJpbmctcHJvY2Vzc2VzLnNlcnZpY2UudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQb0xpc3RWaWV3Q29tcG9uZW50IGV4dGVuZHMgUG9MaXN0Vmlld0Jhc2VDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBEb0NoZWNrIHtcbiAgICBwcml2YXRlIGNoYW5nZURldGVjdG9yO1xuICAgIGxpc3RWaWV3Q29udGVudFRlbXBsYXRlOiBQb0xpc3RWaWV3Q29udGVudFRlbXBsYXRlRGlyZWN0aXZlO1xuICAgIGxpc3RWaWV3RGV0YWlsVGVtcGxhdGU6IFBvTGlzdFZpZXdEZXRhaWxUZW1wbGF0ZURpcmVjdGl2ZTtcbiAgICBwb1BvcHVwQ29tcG9uZW50OiBQb1BvcHVwQ29tcG9uZW50O1xuICAgIHByaXZhdGUgZGlmZmVyO1xuICAgIGNvbnN0cnVjdG9yKGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZiwgZGlmZmVyczogSXRlcmFibGVEaWZmZXJzKTtcbiAgICBnZXQgaGFzQ29udGVudFRlbXBsYXRlKCk6IGJvb2xlYW47XG4gICAgZ2V0IGhhc0RldGFpbFRlbXBsYXRlKCk6IGJvb2xlYW47XG4gICAgZ2V0IGRpc3BsYXlTaG93TW9yZUJ1dHRvbigpOiBib29sZWFuO1xuICAgIGdldCBzaG93QnV0dG9uc0FjdGlvbnMoKTogYm9vbGVhbjtcbiAgICBnZXQgc2hvd1BvcHVwQWN0aW9ucygpOiBib29sZWFuO1xuICAgIGdldCB0aXRsZUhhc0FjdGlvbigpOiBib29sZWFuO1xuICAgIGdldCB2aXNpYmxlQWN0aW9ucygpOiBQb0xpc3RWaWV3QWN0aW9uW107XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XG4gICAgbmdEb0NoZWNrKCk6IHZvaWQ7XG4gICAgY2hlY2tUaXRsZVR5cGUoaXRlbTogYW55KTogXCJleHRlcm5hbExpbmtcIiB8IFwiaW50ZXJuYWxMaW5rXCIgfCBcIm5vTGlua1wiO1xuICAgIGdldEl0ZW1UaXRsZShpdGVtOiBhbnkpOiBhbnk7XG4gICAgaGFzSXRlbXMoKTogYm9vbGVhbjtcbiAgICByZXR1cm5Cb29sZWFuVmFsdWUobGlzdFZpZXdBY3Rpb246IFBvTGlzdFZpZXdBY3Rpb24sIGl0ZW06IGFueSk6IGFueTtcbiAgICB0cmFja0J5KGluZGV4OiBhbnkpOiBhbnk7XG4gICAgdG9nZ2xlUG9wdXAoaXRlbTogYW55LCB0YXJnZXRSZWY6IEhUTUxFbGVtZW50KTogdm9pZDtcbiAgICBwcml2YXRlIGNoZWNrSXRlbXNDaGFuZ2U7XG4gICAgcHJpdmF0ZSBpbml0U2hvd0RldGFpbDtcbn1cbiJdfQ==