import { PoButtonGroupItem } from './po-button-group-item.interface';
/**
 * @description
 *
 * O componente `po-button-group` é formado por um conjunto de botões distribuídos horizontalmente.
 * Cada botão do grupo é tratado de forma individual, recebendo assim um rótulo, uma ação bem como se deverá estar habilitado ou não.
 *
 * Este componente além de servir como um agrupador de botões para ação, também permite que sejam utilizados
 * para seleções multiplas e únicas.
 *
 * O grupo de botões deve ser utilizado para organizar as ações de maneira uniforme e transmitir a ideia de que os botões fazem
 * parte de um mesmo contexto.
 *
 * #### Boas práticas
 *
 * - Evite usar o `po-button-group` com apenas 1 ação, para isso utilize o `po-button`.
 * - Procure utilizar no máximo 3 ações para cada `po-button-group`.
 *
 * > As recomendações do `po-button` também valem para o `po-button-group`.
 */
import * as ɵngcc0 from '@angular/core';
export declare class PoButtonGroupBaseComponent {
    private _small?;
    private _toggle?;
    /** Lista de botões. */
    buttons: Array<PoButtonGroupItem>;
    /**
     * @optional
     *
     * @description
     *
     * Torna o grupo de botões com tamanho minificado.
     *
     * @default `false`
     */
    set small(value: boolean);
    get small(): boolean;
    /**
     * @optional
     *
     * @description
     *
     * Define o modo de seleção de botões.
     *
     * > Veja os valores válidos no *enum* `PoMultiselectFilterMode`.
     *
     * @default `none`
     */
    set toggle(value: string);
    get toggle(): string;
    onButtonClick(buttonClicked: PoButtonGroupItem, buttonIndex: number): void;
    private checkSelecteds;
    private deselectAllButtons;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PoButtonGroupBaseComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<PoButtonGroupBaseComponent, never, never, { "buttons": "p-buttons"; "small": "p-small"; "toggle": "p-toggle"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYnV0dG9uLWdyb3VwLWJhc2UuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBvLWJ1dHRvbi1ncm91cC1iYXNlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQb0J1dHRvbkdyb3VwSXRlbSB9IGZyb20gJy4vcG8tYnV0dG9uLWdyb3VwLWl0ZW0uaW50ZXJmYWNlJztcbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogTyBjb21wb25lbnRlIGBwby1idXR0b24tZ3JvdXBgIMOpIGZvcm1hZG8gcG9yIHVtIGNvbmp1bnRvIGRlIGJvdMO1ZXMgZGlzdHJpYnXDrWRvcyBob3Jpem9udGFsbWVudGUuXG4gKiBDYWRhIGJvdMOjbyBkbyBncnVwbyDDqSB0cmF0YWRvIGRlIGZvcm1hIGluZGl2aWR1YWwsIHJlY2ViZW5kbyBhc3NpbSB1bSByw7N0dWxvLCB1bWEgYcOnw6NvIGJlbSBjb21vIHNlIGRldmVyw6EgZXN0YXIgaGFiaWxpdGFkbyBvdSBuw6NvLlxuICpcbiAqIEVzdGUgY29tcG9uZW50ZSBhbMOpbSBkZSBzZXJ2aXIgY29tbyB1bSBhZ3J1cGFkb3IgZGUgYm90w7VlcyBwYXJhIGHDp8OjbywgdGFtYsOpbSBwZXJtaXRlIHF1ZSBzZWphbSB1dGlsaXphZG9zXG4gKiBwYXJhIHNlbGXDp8O1ZXMgbXVsdGlwbGFzIGUgw7puaWNhcy5cbiAqXG4gKiBPIGdydXBvIGRlIGJvdMO1ZXMgZGV2ZSBzZXIgdXRpbGl6YWRvIHBhcmEgb3JnYW5pemFyIGFzIGHDp8O1ZXMgZGUgbWFuZWlyYSB1bmlmb3JtZSBlIHRyYW5zbWl0aXIgYSBpZGVpYSBkZSBxdWUgb3MgYm90w7VlcyBmYXplbVxuICogcGFydGUgZGUgdW0gbWVzbW8gY29udGV4dG8uXG4gKlxuICogIyMjIyBCb2FzIHByw6F0aWNhc1xuICpcbiAqIC0gRXZpdGUgdXNhciBvIGBwby1idXR0b24tZ3JvdXBgIGNvbSBhcGVuYXMgMSBhw6fDo28sIHBhcmEgaXNzbyB1dGlsaXplIG8gYHBvLWJ1dHRvbmAuXG4gKiAtIFByb2N1cmUgdXRpbGl6YXIgbm8gbcOheGltbyAzIGHDp8O1ZXMgcGFyYSBjYWRhIGBwby1idXR0b24tZ3JvdXBgLlxuICpcbiAqID4gQXMgcmVjb21lbmRhw6fDtWVzIGRvIGBwby1idXR0b25gIHRhbWLDqW0gdmFsZW0gcGFyYSBvIGBwby1idXR0b24tZ3JvdXBgLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQb0J1dHRvbkdyb3VwQmFzZUNvbXBvbmVudCB7XG4gICAgcHJpdmF0ZSBfc21hbGw/O1xuICAgIHByaXZhdGUgX3RvZ2dsZT87XG4gICAgLyoqIExpc3RhIGRlIGJvdMO1ZXMuICovXG4gICAgYnV0dG9uczogQXJyYXk8UG9CdXR0b25Hcm91cEl0ZW0+O1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBUb3JuYSBvIGdydXBvIGRlIGJvdMO1ZXMgY29tIHRhbWFuaG8gbWluaWZpY2Fkby5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICAgKi9cbiAgICBzZXQgc21hbGwodmFsdWU6IGJvb2xlYW4pO1xuICAgIGdldCBzbWFsbCgpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBvcHRpb25hbFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBEZWZpbmUgbyBtb2RvIGRlIHNlbGXDp8OjbyBkZSBib3TDtWVzLlxuICAgICAqXG4gICAgICogPiBWZWphIG9zIHZhbG9yZXMgdsOhbGlkb3Mgbm8gKmVudW0qIGBQb011bHRpc2VsZWN0RmlsdGVyTW9kZWAuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBgbm9uZWBcbiAgICAgKi9cbiAgICBzZXQgdG9nZ2xlKHZhbHVlOiBzdHJpbmcpO1xuICAgIGdldCB0b2dnbGUoKTogc3RyaW5nO1xuICAgIG9uQnV0dG9uQ2xpY2soYnV0dG9uQ2xpY2tlZDogUG9CdXR0b25Hcm91cEl0ZW0sIGJ1dHRvbkluZGV4OiBudW1iZXIpOiB2b2lkO1xuICAgIHByaXZhdGUgY2hlY2tTZWxlY3RlZHM7XG4gICAgcHJpdmF0ZSBkZXNlbGVjdEFsbEJ1dHRvbnM7XG59XG4iXX0=