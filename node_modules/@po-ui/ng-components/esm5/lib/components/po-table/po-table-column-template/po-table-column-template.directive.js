import { __decorate, __metadata } from "tslib";
import { Directive, Input, TemplateRef } from '@angular/core';
/**
 * @usedBy PoTableComponent
 *
 * @description
 *
 * Esta diretiva permite que seja possível alterar o conteúdo das células de uma coluna, para que os valores possam ser exibidos
 * de acordo com a necessidade do usuário.
 *
 * Em seu uso, deve-se utilizar como parâmetro de entrada o input [p-property], o qual é responsável por informar ao PO-TABLE qual a coluna que
 * será adicionado o conteúdo do template.
 *
 * Retorno:
 *  - value: valor referente ao conteúdo da linha corrente.
 *
 * Modo de uso:
 * ```html
 * ...
 * <po-table
 *   [p-columns]="columns"
 *   [p-items]="items">
 *   <ng-template p-table-column-template [p-property]="targetProperty" let-value>
 *     <span [innerText]="value"></span>
 *   </ng-template>
 * </po-table>
 * ...
 * ```
 * > No exemplo acima, todas as células correspondentes a coluna `status` terão o conteúdo alterado para `<h1>${value}</h1>`,
 * sendo que `value` refere-se ao conteúdo da linha.
 *
 * ```html
 * ...
 * <po-table
 *   [p-columns]="columns"
 *   [p-items]="items">
 *   <ng-template  p-table-column-template [p-property]="targetProperty" let-value>
 *     <span *ngIf="value === 'FINISHED'" [style.background]="'silver'" [innerText]="value"></span>
 *     <span *ngIf="value === 'OPENED'" [style.background]="'gray'" [innerText]="value"></span>
 *   </ng-template>
 * </po-table>
 * ...
 * ```
 * > Agora, neste exemplo, com o valor da linha corrente retornado (value), é feito uma validação para
 * definir o template exato para adicionar a uma específica célula.
 *
 * Abaixo, a declaração dos dados de entrada do PO-TABLE para o uso da directiva.
 * ```typescript
 * ...
 * export class AppComponent {
 *
 *    targetProperty= 'status';
 *    public items = [{
 *      code: 1200,
 *      product: 'Rice',
 *      status: 'CANCELED'
 *      },{
 *      code: 1355,
 *      product: 'Bean',
 *      status: 'FINISHED'
 *      }];
 *
 *    public columns = [
 *       { property: 'code', label: 'ID', type: 'string' },
 *       { property: 'product', label: 'PRODUTO', type: 'string' },
 *       { property: 'status', label: 'STATUS', type: 'column-template' }
 *      ];
 * }
 * ...
 * ```
 * > OBS: Sempre adicionar o **type** da property que deseja manipular com a directiva como `columnTemplate`
 */
var PoTableColumnTemplateDirective = /** @class */ (function () {
    // Necessário manter templateRef para o funcionamento do column template.
    function PoTableColumnTemplateDirective(templateRef) {
        this.templateRef = templateRef;
    }
    PoTableColumnTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    __decorate([
        Input('p-property'),
        __metadata("design:type", Object)
    ], PoTableColumnTemplateDirective.prototype, "targetProperty", void 0);
    PoTableColumnTemplateDirective = __decorate([
        Directive({
            selector: '[p-table-column-template]'
        }),
        __metadata("design:paramtypes", [TemplateRef])
    ], PoTableColumnTemplateDirective);
    return PoTableColumnTemplateDirective;
}());
export { PoTableColumnTemplateDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGFibGUtY29sdW1uLXRlbXBsYXRlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwby11aS9uZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tdGFibGUvcG8tdGFibGUtY29sdW1uLXRlbXBsYXRlL3BvLXRhYmxlLWNvbHVtbi10ZW1wbGF0ZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBcUVHO0FBS0g7SUFjRSx5RUFBeUU7SUFDekUsd0NBQW1CLFdBQTZCO1FBQTdCLGdCQUFXLEdBQVgsV0FBVyxDQUFrQjtJQUFHLENBQUM7O2dCQUFwQixXQUFXOztJQUh0QjtRQUFwQixLQUFLLENBQUMsWUFBWSxDQUFDOzswRUFBZ0I7SUFaekIsOEJBQThCO1FBSDFDLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSwyQkFBMkI7U0FDdEMsQ0FBQzt5Q0FnQmdDLFdBQVc7T0FmaEMsOEJBQThCLENBZ0IxQztJQUFELHFDQUFDO0NBQUEsQUFoQkQsSUFnQkM7U0FoQlksOEJBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbi8qKlxuICogQHVzZWRCeSBQb1RhYmxlQ29tcG9uZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogRXN0YSBkaXJldGl2YSBwZXJtaXRlIHF1ZSBzZWphIHBvc3PDrXZlbCBhbHRlcmFyIG8gY29udGXDumRvIGRhcyBjw6lsdWxhcyBkZSB1bWEgY29sdW5hLCBwYXJhIHF1ZSBvcyB2YWxvcmVzIHBvc3NhbSBzZXIgZXhpYmlkb3NcbiAqIGRlIGFjb3JkbyBjb20gYSBuZWNlc3NpZGFkZSBkbyB1c3XDoXJpby5cbiAqXG4gKiBFbSBzZXUgdXNvLCBkZXZlLXNlIHV0aWxpemFyIGNvbW8gcGFyw6JtZXRybyBkZSBlbnRyYWRhIG8gaW5wdXQgW3AtcHJvcGVydHldLCBvIHF1YWwgw6kgcmVzcG9uc8OhdmVsIHBvciBpbmZvcm1hciBhbyBQTy1UQUJMRSBxdWFsIGEgY29sdW5hIHF1ZVxuICogc2Vyw6EgYWRpY2lvbmFkbyBvIGNvbnRlw7pkbyBkbyB0ZW1wbGF0ZS5cbiAqXG4gKiBSZXRvcm5vOlxuICogIC0gdmFsdWU6IHZhbG9yIHJlZmVyZW50ZSBhbyBjb250ZcO6ZG8gZGEgbGluaGEgY29ycmVudGUuXG4gKlxuICogTW9kbyBkZSB1c286XG4gKiBgYGBodG1sXG4gKiAuLi5cbiAqIDxwby10YWJsZVxuICogICBbcC1jb2x1bW5zXT1cImNvbHVtbnNcIlxuICogICBbcC1pdGVtc109XCJpdGVtc1wiPlxuICogICA8bmctdGVtcGxhdGUgcC10YWJsZS1jb2x1bW4tdGVtcGxhdGUgW3AtcHJvcGVydHldPVwidGFyZ2V0UHJvcGVydHlcIiBsZXQtdmFsdWU+XG4gKiAgICAgPHNwYW4gW2lubmVyVGV4dF09XCJ2YWx1ZVwiPjwvc3Bhbj5cbiAqICAgPC9uZy10ZW1wbGF0ZT5cbiAqIDwvcG8tdGFibGU+XG4gKiAuLi5cbiAqIGBgYFxuICogPiBObyBleGVtcGxvIGFjaW1hLCB0b2RhcyBhcyBjw6lsdWxhcyBjb3JyZXNwb25kZW50ZXMgYSBjb2x1bmEgYHN0YXR1c2AgdGVyw6NvIG8gY29udGXDumRvIGFsdGVyYWRvIHBhcmEgYDxoMT4ke3ZhbHVlfTwvaDE+YCxcbiAqIHNlbmRvIHF1ZSBgdmFsdWVgIHJlZmVyZS1zZSBhbyBjb250ZcO6ZG8gZGEgbGluaGEuXG4gKlxuICogYGBgaHRtbFxuICogLi4uXG4gKiA8cG8tdGFibGVcbiAqICAgW3AtY29sdW1uc109XCJjb2x1bW5zXCJcbiAqICAgW3AtaXRlbXNdPVwiaXRlbXNcIj5cbiAqICAgPG5nLXRlbXBsYXRlICBwLXRhYmxlLWNvbHVtbi10ZW1wbGF0ZSBbcC1wcm9wZXJ0eV09XCJ0YXJnZXRQcm9wZXJ0eVwiIGxldC12YWx1ZT5cbiAqICAgICA8c3BhbiAqbmdJZj1cInZhbHVlID09PSAnRklOSVNIRUQnXCIgW3N0eWxlLmJhY2tncm91bmRdPVwiJ3NpbHZlcidcIiBbaW5uZXJUZXh0XT1cInZhbHVlXCI+PC9zcGFuPlxuICogICAgIDxzcGFuICpuZ0lmPVwidmFsdWUgPT09ICdPUEVORUQnXCIgW3N0eWxlLmJhY2tncm91bmRdPVwiJ2dyYXknXCIgW2lubmVyVGV4dF09XCJ2YWx1ZVwiPjwvc3Bhbj5cbiAqICAgPC9uZy10ZW1wbGF0ZT5cbiAqIDwvcG8tdGFibGU+XG4gKiAuLi5cbiAqIGBgYFxuICogPiBBZ29yYSwgbmVzdGUgZXhlbXBsbywgY29tIG8gdmFsb3IgZGEgbGluaGEgY29ycmVudGUgcmV0b3JuYWRvICh2YWx1ZSksIMOpIGZlaXRvIHVtYSB2YWxpZGHDp8OjbyBwYXJhXG4gKiBkZWZpbmlyIG8gdGVtcGxhdGUgZXhhdG8gcGFyYSBhZGljaW9uYXIgYSB1bWEgZXNwZWPDrWZpY2EgY8OpbHVsYS5cbiAqXG4gKiBBYmFpeG8sIGEgZGVjbGFyYcOnw6NvIGRvcyBkYWRvcyBkZSBlbnRyYWRhIGRvIFBPLVRBQkxFIHBhcmEgbyB1c28gZGEgZGlyZWN0aXZhLlxuICogYGBgdHlwZXNjcmlwdFxuICogLi4uXG4gKiBleHBvcnQgY2xhc3MgQXBwQ29tcG9uZW50IHtcbiAqXG4gKiAgICB0YXJnZXRQcm9wZXJ0eT0gJ3N0YXR1cyc7XG4gKiAgICBwdWJsaWMgaXRlbXMgPSBbe1xuICogICAgICBjb2RlOiAxMjAwLFxuICogICAgICBwcm9kdWN0OiAnUmljZScsXG4gKiAgICAgIHN0YXR1czogJ0NBTkNFTEVEJ1xuICogICAgICB9LHtcbiAqICAgICAgY29kZTogMTM1NSxcbiAqICAgICAgcHJvZHVjdDogJ0JlYW4nLFxuICogICAgICBzdGF0dXM6ICdGSU5JU0hFRCdcbiAqICAgICAgfV07XG4gKlxuICogICAgcHVibGljIGNvbHVtbnMgPSBbXG4gKiAgICAgICB7IHByb3BlcnR5OiAnY29kZScsIGxhYmVsOiAnSUQnLCB0eXBlOiAnc3RyaW5nJyB9LFxuICogICAgICAgeyBwcm9wZXJ0eTogJ3Byb2R1Y3QnLCBsYWJlbDogJ1BST0RVVE8nLCB0eXBlOiAnc3RyaW5nJyB9LFxuICogICAgICAgeyBwcm9wZXJ0eTogJ3N0YXR1cycsIGxhYmVsOiAnU1RBVFVTJywgdHlwZTogJ2NvbHVtbi10ZW1wbGF0ZScgfVxuICogICAgICBdO1xuICogfVxuICogLi4uXG4gKiBgYGBcbiAqID4gT0JTOiBTZW1wcmUgYWRpY2lvbmFyIG8gKip0eXBlKiogZGEgcHJvcGVydHkgcXVlIGRlc2VqYSBtYW5pcHVsYXIgY29tIGEgZGlyZWN0aXZhIGNvbW8gYGNvbHVtblRlbXBsYXRlYFxuICovXG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1twLXRhYmxlLWNvbHVtbi10ZW1wbGF0ZV0nXG59KVxuZXhwb3J0IGNsYXNzIFBvVGFibGVDb2x1bW5UZW1wbGF0ZURpcmVjdGl2ZSB7XG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIFZhcmnDoXZlbCByZXNwb25zw6F2ZWwgcG9yIGFybWF6ZW5hciBhIHByb3BlcnR5IGRhIGNvbHVuYSBkYSB0YWJlbGEgcXVlIHNlcsOhIGFkaWNpb25hZG8gbyB0ZW1wbGF0ZS5cbiAgICpcbiAgICogQ2FzbyBuw6NvIHNlamEgaW5mb3JtYWRhIGVzdGEgcHJvcHJpZWRhZGUsIHNlcsOjbyBhcHJlc2VudGFkb3Mgbm9ybWFsbWVudGUgb3MgZGFkb3MgZGEgY29sdW5hLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgdHJ1ZWBcbiAgICovXG4gIEBJbnB1dCgncC1wcm9wZXJ0eScpIHRhcmdldFByb3BlcnR5O1xuXG4gIC8vIE5lY2Vzc8OhcmlvIG1hbnRlciB0ZW1wbGF0ZVJlZiBwYXJhIG8gZnVuY2lvbmFtZW50byBkbyBjb2x1bW4gdGVtcGxhdGUuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55Pikge31cbn1cbiJdfQ==