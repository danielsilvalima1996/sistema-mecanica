import { __decorate, __extends, __metadata } from "tslib";
import { ChangeDetectorRef, Component, ElementRef, Renderer2, ViewChild, ViewContainerRef } from '@angular/core';
import { Router } from '@angular/router';
import { callFunction, getParentRef, isExternalLink, isTypeof, openExternalLink } from '../../utils/util';
import { PoControlPositionService } from '../../services/po-control-position/po-control-position.service';
import { PoPopupBaseComponent } from './po-popup-base.component';
/**
 *
 * @docsExtends PoPopupBaseComponent
 *
 * @example
 *
 * <example name="po-popup-basic" title="PO Popup - Basic">
 *   <file name="sample-po-popup-basic/sample-po-popup-basic.component.html"> </file>
 *   <file name="sample-po-popup-basic/sample-po-popup-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-popup-labs" title="PO Popup - Labs">
 *   <file name="sample-po-popup-labs/sample-po-popup-labs.component.html"> </file>
 *   <file name="sample-po-popup-labs/sample-po-popup-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-popup-email" title="PO Popup Email">
 *   <file name="sample-po-popup-email/sample-po-popup-email.component.html"> </file>
 *   <file name="sample-po-popup-email/sample-po-popup-email.component.ts"> </file>
 * </example>
 *
 */
var PoPopupComponent = /** @class */ (function (_super) {
    __extends(PoPopupComponent, _super);
    function PoPopupComponent(viewContainerRef, renderer, router, poControlPosition, changeDetector) {
        var _this = _super.call(this) || this;
        _this.renderer = renderer;
        _this.router = router;
        _this.poControlPosition = poControlPosition;
        _this.changeDetector = changeDetector;
        _this.onScroll = function () {
            if (_this.showPopup) {
                _this.close();
            }
        };
        _this.parentRef = getParentRef(viewContainerRef);
        return _this;
    }
    /**
     * Fecha o componente *popup*.
     *
     * > Por padrão, este comportamento é acionado somente ao clicar fora do componente ou em determinada ação / url.
     */
    PoPopupComponent.prototype.close = function () {
        this.removeListeners();
        this.showPopup = false;
    };
    PoPopupComponent.prototype.onActionClick = function (popupAction) {
        var actionNoDisabled = popupAction && !this.returnBooleanValue(popupAction, 'disabled');
        if (popupAction && popupAction.action && actionNoDisabled) {
            this.close();
            return callFunction(popupAction.action, this.parentRef, this.param || popupAction);
        }
        if (popupAction && popupAction.url && actionNoDisabled) {
            this.close();
            return this.openUrl(popupAction.url);
        }
    };
    /**
     * Abre o componente *popup*.
     *
     * > É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
     */
    PoPopupComponent.prototype.open = function (param) {
        this.oldTarget = this.target;
        this.param = param;
        this.showPopup = true;
        this.changeDetector.detectChanges();
        this.validateInitialContent();
    };
    PoPopupComponent.prototype.returnBooleanValue = function (popupAction, property) {
        return isTypeof(popupAction[property], 'function')
            ? popupAction[property](this.param || popupAction)
            : popupAction[property];
    };
    /**
     * Responsável por abrir e fechar o *popup*.
     *
     * Quando disparado abrirá o *popup* e caso o mesmo já estiver aberto e possuir o mesmo `target` irá fecha-lo.
     *
     * É possível informar um parâmetro que será utilizado na execução da ação do item e na função de desabilitar.
     */
    PoPopupComponent.prototype.toggle = function (param) {
        this.showPopup && this.oldTarget === this.target ? this.close() : this.open(param);
    };
    PoPopupComponent.prototype.clickedOutDisabledItem = function (event) {
        var containsItemDisabled = this.elementContains(event.target, 'po-popup-item-disabled') ||
            this.elementContains(event.target.parentElement, 'po-popup-item-disabled');
        return !containsItemDisabled;
    };
    PoPopupComponent.prototype.clickedOutHeaderTemplate = function (event) {
        var popupHeaderTemplate = this.popupRef && this.popupRef.nativeElement.querySelector('[p-popup-header-template]');
        return !(popupHeaderTemplate && popupHeaderTemplate.contains(event.target));
    };
    PoPopupComponent.prototype.clickedOutTarget = function (event) {
        return this.target && !this.target.contains(event.target);
    };
    PoPopupComponent.prototype.closePopupOnClickout = function (event) {
        if (this.clickedOutTarget(event) && this.clickedOutDisabledItem(event) && this.clickedOutHeaderTemplate(event)) {
            this.close();
        }
    };
    PoPopupComponent.prototype.elementContains = function (element, className) {
        return element && element.classList.contains(className);
    };
    PoPopupComponent.prototype.hasContentToShow = function () {
        return !!(this.popupRef.nativeElement && this.popupRef.nativeElement.clientHeight);
    };
    PoPopupComponent.prototype.initializeListeners = function () {
        var _this = this;
        this.resizeListener = this.renderer.listen('window', 'resize', function () {
            _this.close();
        });
        this.clickoutListener = this.renderer.listen('document', 'click', function (event) {
            _this.closePopupOnClickout(event);
        });
        window.addEventListener('scroll', this.onScroll, true);
    };
    PoPopupComponent.prototype.openUrl = function (url) {
        if (isExternalLink(url)) {
            return openExternalLink(url);
        }
        if (url) {
            return this.router.navigate([url]);
        }
    };
    PoPopupComponent.prototype.removeListeners = function () {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        if (this.resizeListener) {
            this.resizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
    };
    PoPopupComponent.prototype.setPosition = function () {
        this.poControlPosition.setElements(this.popupRef.nativeElement, 8, this.target, this.customPositions, false, this.isCornerAlign);
        this.poControlPosition.adjustPosition(this.position);
        this.arrowDirection = this.poControlPosition.getArrowDirection();
    };
    PoPopupComponent.prototype.validateInitialContent = function () {
        if (this.hasContentToShow()) {
            this.setPosition();
            this.initializeListeners();
        }
        else {
            this.close();
        }
    };
    PoPopupComponent.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: Renderer2 },
        { type: Router },
        { type: PoControlPositionService },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        ViewChild('popupRef', { read: ElementRef }),
        __metadata("design:type", ElementRef)
    ], PoPopupComponent.prototype, "popupRef", void 0);
    PoPopupComponent = __decorate([
        Component({
            selector: 'po-popup',
            template: "<div #popupRef class=\"po-popup\" *ngIf=\"showPopup\">\n  <div *ngIf=\"!hideArrow\" class=\"po-popup-arrow po-arrow-{{ arrowDirection }}\"></div>\n\n  <ng-content select=\"[p-popup-header-template]\"></ng-content>\n\n  <ng-container *ngFor=\"let action of actions; let actionIndex = index\">\n    <div\n      *ngIf=\"action.visible !== false\"\n      [class.po-popup-item-default]=\"action.type !== 'danger'\"\n      [class.po-popup-item-danger]=\"action.type === 'danger'\"\n      [class.po-popup-item-disabled]=\"returnBooleanValue(action, 'disabled')\"\n      [class.po-popup-item-separator]=\"action.separator && actionIndex !== 0\"\n      [class.po-popup-item-selected]=\"action.selected\"\n      (click)=\"onActionClick(action)\"\n    >\n      <span *ngIf=\"action.icon\" class=\"po-icon {{ action.icon }} po-popup-icon-item\"></span>\n      {{ action.label }}\n    </div>\n  </ng-container>\n</div>\n",
            providers: [PoControlPositionService]
        }),
        __metadata("design:paramtypes", [ViewContainerRef,
            Renderer2,
            Router,
            PoControlPositionService,
            ChangeDetectorRef])
    ], PoPopupComponent);
    return PoPopupComponent;
}(PoPopupBaseComponent));
export { PoPopupComponent };
//# sourceMappingURL=data:application/json;base64,