import { __assign, __decorate, __metadata, __rest } from "tslib";
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { isTypeof } from '../../../../utils/util';
/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço padrão utilizado para filtrar os dados do componente po-lookup.
 */
var PoLookupFilterService = /** @class */ (function () {
    function PoLookupFilterService(httpClient) {
        this.httpClient = httpClient;
        this.headers = new HttpHeaders({
            'X-PO-No-Message': 'true'
        });
    }
    PoLookupFilterService.prototype.getFilteredItems = function (filteredItemsParams) {
        var filterParams = filteredItemsParams.filterParams, restFilteredItemsParams = __rest(filteredItemsParams, ["filterParams"]);
        var validatedFilterParams = this.validateParams(filterParams);
        var params = __assign(__assign({}, restFilteredItemsParams), validatedFilterParams);
        return this.httpClient.get(this.url, { headers: this.headers, params: params });
    };
    PoLookupFilterService.prototype.getObjectByValue = function (value, filterParams) {
        var validatedFilterParams = this.validateParams(filterParams);
        return this.httpClient.get(this.url + "/" + value, { headers: this.headers, params: validatedFilterParams });
    };
    PoLookupFilterService.prototype.setUrl = function (url) {
        this.url = url;
    };
    PoLookupFilterService.prototype.validateParams = function (params) {
        return isTypeof(params, 'object') && !Array.isArray(params) ? params : undefined;
    };
    PoLookupFilterService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    PoLookupFilterService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [HttpClient])
    ], PoLookupFilterService);
    return PoLookupFilterService;
}());
export { PoLookupFilterService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbG9va3VwLWZpbHRlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvLXVpL25nLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1maWVsZC9wby1sb29rdXAvc2VydmljZXMvcG8tbG9va3VwLWZpbHRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFJM0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBS2xEOzs7Ozs7R0FNRztBQUVIO0lBT0UsK0JBQW9CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFKakMsWUFBTyxHQUFnQixJQUFJLFdBQVcsQ0FBQztZQUM5QyxpQkFBaUIsRUFBRSxNQUFNO1NBQzFCLENBQUMsQ0FBQztJQUUwQyxDQUFDO0lBRTlDLGdEQUFnQixHQUFoQixVQUFpQixtQkFBZ0Q7UUFDdkQsSUFBQSwrQ0FBWSxFQUFFLHVFQUEwQixDQUF5QjtRQUV6RSxJQUFNLHFCQUFxQixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFaEUsSUFBTSxNQUFNLHlCQUFRLHVCQUF1QixHQUFLLHFCQUFxQixDQUFFLENBQUM7UUFFeEUsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxRQUFBLEVBQUUsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFRCxnREFBZ0IsR0FBaEIsVUFBaUIsS0FBYSxFQUFFLFlBQWtCO1FBQ2hELElBQU0scUJBQXFCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUVoRSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFJLElBQUksQ0FBQyxHQUFHLFNBQUksS0FBTyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLHFCQUFxQixFQUFFLENBQUMsQ0FBQztJQUMvRyxDQUFDO0lBRUQsc0NBQU0sR0FBTixVQUFPLEdBQVc7UUFDaEIsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7SUFDakIsQ0FBQztJQUVPLDhDQUFjLEdBQXRCLFVBQXVCLE1BQVc7UUFDaEMsT0FBTyxRQUFRLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDbkYsQ0FBQzs7Z0JBeEIrQixVQUFVOztJQVAvQixxQkFBcUI7UUFEakMsVUFBVSxFQUFFO3lDQVFxQixVQUFVO09BUC9CLHFCQUFxQixDQWdDakM7SUFBRCw0QkFBQztDQUFBLEFBaENELElBZ0NDO1NBaENZLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBIZWFkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IGlzVHlwZW9mIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmltcG9ydCB7IFBvTG9va3VwRmlsdGVyIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9wby1sb29rdXAtZmlsdGVyLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb0xvb2t1cEZpbHRlcmVkSXRlbXNQYXJhbXMgfSBmcm9tICcuLi9pbnRlcmZhY2VzL3BvLWxvb2t1cC1maWx0ZXJlZC1pdGVtcy1wYXJhbXMuaW50ZXJmYWNlJztcblxuLyoqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBTZXJ2acOnbyBwYWRyw6NvIHV0aWxpemFkbyBwYXJhIGZpbHRyYXIgb3MgZGFkb3MgZG8gY29tcG9uZW50ZSBwby1sb29rdXAuXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQb0xvb2t1cEZpbHRlclNlcnZpY2UgaW1wbGVtZW50cyBQb0xvb2t1cEZpbHRlciB7XG4gIHByaXZhdGUgdXJsOiBzdHJpbmc7XG5cbiAgcmVhZG9ubHkgaGVhZGVyczogSHR0cEhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoe1xuICAgICdYLVBPLU5vLU1lc3NhZ2UnOiAndHJ1ZSdcbiAgfSk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwQ2xpZW50OiBIdHRwQ2xpZW50KSB7fVxuXG4gIGdldEZpbHRlcmVkSXRlbXMoZmlsdGVyZWRJdGVtc1BhcmFtczogUG9Mb29rdXBGaWx0ZXJlZEl0ZW1zUGFyYW1zKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBjb25zdCB7IGZpbHRlclBhcmFtcywgLi4ucmVzdEZpbHRlcmVkSXRlbXNQYXJhbXMgfSA9IGZpbHRlcmVkSXRlbXNQYXJhbXM7XG5cbiAgICBjb25zdCB2YWxpZGF0ZWRGaWx0ZXJQYXJhbXMgPSB0aGlzLnZhbGlkYXRlUGFyYW1zKGZpbHRlclBhcmFtcyk7XG5cbiAgICBjb25zdCBwYXJhbXMgPSB7IC4uLnJlc3RGaWx0ZXJlZEl0ZW1zUGFyYW1zLCAuLi52YWxpZGF0ZWRGaWx0ZXJQYXJhbXMgfTtcblxuICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZ2V0KHRoaXMudXJsLCB7IGhlYWRlcnM6IHRoaXMuaGVhZGVycywgcGFyYW1zIH0pO1xuICB9XG5cbiAgZ2V0T2JqZWN0QnlWYWx1ZSh2YWx1ZTogc3RyaW5nLCBmaWx0ZXJQYXJhbXM/OiBhbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIGNvbnN0IHZhbGlkYXRlZEZpbHRlclBhcmFtcyA9IHRoaXMudmFsaWRhdGVQYXJhbXMoZmlsdGVyUGFyYW1zKTtcblxuICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZ2V0KGAke3RoaXMudXJsfS8ke3ZhbHVlfWAsIHsgaGVhZGVyczogdGhpcy5oZWFkZXJzLCBwYXJhbXM6IHZhbGlkYXRlZEZpbHRlclBhcmFtcyB9KTtcbiAgfVxuXG4gIHNldFVybCh1cmw6IHN0cmluZykge1xuICAgIHRoaXMudXJsID0gdXJsO1xuICB9XG5cbiAgcHJpdmF0ZSB2YWxpZGF0ZVBhcmFtcyhwYXJhbXM6IGFueSkge1xuICAgIHJldHVybiBpc1R5cGVvZihwYXJhbXMsICdvYmplY3QnKSAmJiAhQXJyYXkuaXNBcnJheShwYXJhbXMpID8gcGFyYW1zIDogdW5kZWZpbmVkO1xuICB9XG59XG4iXX0=