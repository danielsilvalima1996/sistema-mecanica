import { __decorate, __metadata } from "tslib";
import { Directive, TemplateRef } from '@angular/core';
/**
 * @usedBy PoTableComponent
 *
 * @description
 *
 * Esta diretiva permite que seja possível alterar o conteúdo das células de uma coluna, para que os valores possam ser exibidos
 * de acordo com a necessidade do usuário.
 *
 * Em seu uso, deve-se apenas adicionar a diretiva **p-table-cell-template** à tag `ng-template`.
 *
 * Retorno:
 *  - `column`: conteúdo da coluna corrente.
 *  - `row`: conteúdo da linha corrente
 *
 * Modo de uso:
 *
 * ```
 * ...
 * <po-table
 *   [p-columns]="columns"
 *   [p-items]="items">
 *     <ng-template p-table-cell-template let-column="column" let-row="row">
 *      <div *ngIf="column.property === 'status' && row.status === 'CANCELED'">
 *        <h1 [style.background]="'red'">CANCELADA</h1>
 *        <span (click)="onClick()"><small>clique aqui</small></span>
 *      </div>
 *      <h1 *ngIf="column.property === 'status' && row.status === 'FINISHED'" [style.background]="'green'">FINALIZADA</h1>
 *      <h1 *ngIf="column.property === 'status' && row.status === 'OPENED'" [style.background]="'orange'">ABERTA</h1>
 *      <h1 *ngIf="column.property === 'status2'">Conteúdo do status 2</h1>
 *      <h1 *ngIf="column.property === 'status3'">Conteúdo do status 3</h1>
 *    </ng-template>
 * ...
 * ```
 * > No exemplo acima, o usuário tem como retorno `row` e a `column` corrente, neste caso ele tem total liberdade para manipular os objetos.
 *
 * Abaixo, a declaração dos dados de entrada do PO-TABLE para o uso da directiva.
 * ```
 * ...
 * export class AppComponent {
 *
 *    public items = [{
 *      code: 1200,
 *      product: 'Rice',
 *      status: 'CANCELED',
 *      status2: '',
 *      status3: ''
 *      },{
 *      code: 1355,
 *      product: 'Bean',
 *      status: 'FINISHED',
 *      status2: '',
 *      status3: ''
 *      }];
 *
 *    public columns = [
 *       { property: 'code', label: 'ID', type: 'string' },
 *       { property: 'product', label: 'PRODUTO', type: 'string' },
 *       { property: 'status', label: 'STATUS', type: 'cell-template' },
 *       { property: 'status2', label: 'STATUS 2', type: 'cell-template' },
 *       { property: 'status3', label: 'STATUS 3', type: 'cell-template' }
 *      ];
 * }
 * ...
 * ```
 * > OBS: Sempre adicionar o **type** da property que deseja manipular com a directiva como `cellTemplate`
 */
let PoTableCellTemplateDirective = class PoTableCellTemplateDirective {
    // Necessário manter templateRef para o funcionamento do cell template.
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
};
PoTableCellTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
PoTableCellTemplateDirective = __decorate([
    Directive({
        selector: '[p-table-cell-template]'
    }),
    __metadata("design:paramtypes", [TemplateRef])
], PoTableCellTemplateDirective);
export { PoTableCellTemplateDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGFibGUtY2VsbC10ZW1wbGF0ZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG8tdWkvbmctY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLXRhYmxlL3BvLXRhYmxlLWNlbGwtdGVtcGxhdGUvcG8tdGFibGUtY2VsbC10ZW1wbGF0ZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQWlFRztBQUlILElBQWEsNEJBQTRCLEdBQXpDLE1BQWEsNEJBQTRCO0lBQ3ZDLHVFQUF1RTtJQUN2RSxZQUFtQixXQUE2QjtRQUE3QixnQkFBVyxHQUFYLFdBQVcsQ0FBa0I7SUFBRyxDQUFDO0NBQ3JELENBQUE7O1lBRGlDLFdBQVc7O0FBRmhDLDRCQUE0QjtJQUh4QyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUseUJBQXlCO0tBQ3BDLENBQUM7cUNBR2dDLFdBQVc7R0FGaEMsNEJBQTRCLENBR3hDO1NBSFksNEJBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuLyoqXG4gKiBAdXNlZEJ5IFBvVGFibGVDb21wb25lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBFc3RhIGRpcmV0aXZhIHBlcm1pdGUgcXVlIHNlamEgcG9zc8OtdmVsIGFsdGVyYXIgbyBjb250ZcO6ZG8gZGFzIGPDqWx1bGFzIGRlIHVtYSBjb2x1bmEsIHBhcmEgcXVlIG9zIHZhbG9yZXMgcG9zc2FtIHNlciBleGliaWRvc1xuICogZGUgYWNvcmRvIGNvbSBhIG5lY2Vzc2lkYWRlIGRvIHVzdcOhcmlvLlxuICpcbiAqIEVtIHNldSB1c28sIGRldmUtc2UgYXBlbmFzIGFkaWNpb25hciBhIGRpcmV0aXZhICoqcC10YWJsZS1jZWxsLXRlbXBsYXRlKiogw6AgdGFnIGBuZy10ZW1wbGF0ZWAuXG4gKlxuICogUmV0b3JubzpcbiAqICAtIGBjb2x1bW5gOiBjb250ZcO6ZG8gZGEgY29sdW5hIGNvcnJlbnRlLlxuICogIC0gYHJvd2A6IGNvbnRlw7pkbyBkYSBsaW5oYSBjb3JyZW50ZVxuICpcbiAqIE1vZG8gZGUgdXNvOlxuICpcbiAqIGBgYFxuICogLi4uXG4gKiA8cG8tdGFibGVcbiAqICAgW3AtY29sdW1uc109XCJjb2x1bW5zXCJcbiAqICAgW3AtaXRlbXNdPVwiaXRlbXNcIj5cbiAqICAgICA8bmctdGVtcGxhdGUgcC10YWJsZS1jZWxsLXRlbXBsYXRlIGxldC1jb2x1bW49XCJjb2x1bW5cIiBsZXQtcm93PVwicm93XCI+XG4gKiAgICAgIDxkaXYgKm5nSWY9XCJjb2x1bW4ucHJvcGVydHkgPT09ICdzdGF0dXMnICYmIHJvdy5zdGF0dXMgPT09ICdDQU5DRUxFRCdcIj5cbiAqICAgICAgICA8aDEgW3N0eWxlLmJhY2tncm91bmRdPVwiJ3JlZCdcIj5DQU5DRUxBREE8L2gxPlxuICogICAgICAgIDxzcGFuIChjbGljayk9XCJvbkNsaWNrKClcIj48c21hbGw+Y2xpcXVlIGFxdWk8L3NtYWxsPjwvc3Bhbj5cbiAqICAgICAgPC9kaXY+XG4gKiAgICAgIDxoMSAqbmdJZj1cImNvbHVtbi5wcm9wZXJ0eSA9PT0gJ3N0YXR1cycgJiYgcm93LnN0YXR1cyA9PT0gJ0ZJTklTSEVEJ1wiIFtzdHlsZS5iYWNrZ3JvdW5kXT1cIidncmVlbidcIj5GSU5BTElaQURBPC9oMT5cbiAqICAgICAgPGgxICpuZ0lmPVwiY29sdW1uLnByb3BlcnR5ID09PSAnc3RhdHVzJyAmJiByb3cuc3RhdHVzID09PSAnT1BFTkVEJ1wiIFtzdHlsZS5iYWNrZ3JvdW5kXT1cIidvcmFuZ2UnXCI+QUJFUlRBPC9oMT5cbiAqICAgICAgPGgxICpuZ0lmPVwiY29sdW1uLnByb3BlcnR5ID09PSAnc3RhdHVzMidcIj5Db250ZcO6ZG8gZG8gc3RhdHVzIDI8L2gxPlxuICogICAgICA8aDEgKm5nSWY9XCJjb2x1bW4ucHJvcGVydHkgPT09ICdzdGF0dXMzJ1wiPkNvbnRlw7pkbyBkbyBzdGF0dXMgMzwvaDE+XG4gKiAgICA8L25nLXRlbXBsYXRlPlxuICogLi4uXG4gKiBgYGBcbiAqID4gTm8gZXhlbXBsbyBhY2ltYSwgbyB1c3XDoXJpbyB0ZW0gY29tbyByZXRvcm5vIGByb3dgIGUgYSBgY29sdW1uYCBjb3JyZW50ZSwgbmVzdGUgY2FzbyBlbGUgdGVtIHRvdGFsIGxpYmVyZGFkZSBwYXJhIG1hbmlwdWxhciBvcyBvYmpldG9zLlxuICpcbiAqIEFiYWl4bywgYSBkZWNsYXJhw6fDo28gZG9zIGRhZG9zIGRlIGVudHJhZGEgZG8gUE8tVEFCTEUgcGFyYSBvIHVzbyBkYSBkaXJlY3RpdmEuXG4gKiBgYGBcbiAqIC4uLlxuICogZXhwb3J0IGNsYXNzIEFwcENvbXBvbmVudCB7XG4gKlxuICogICAgcHVibGljIGl0ZW1zID0gW3tcbiAqICAgICAgY29kZTogMTIwMCxcbiAqICAgICAgcHJvZHVjdDogJ1JpY2UnLFxuICogICAgICBzdGF0dXM6ICdDQU5DRUxFRCcsXG4gKiAgICAgIHN0YXR1czI6ICcnLFxuICogICAgICBzdGF0dXMzOiAnJ1xuICogICAgICB9LHtcbiAqICAgICAgY29kZTogMTM1NSxcbiAqICAgICAgcHJvZHVjdDogJ0JlYW4nLFxuICogICAgICBzdGF0dXM6ICdGSU5JU0hFRCcsXG4gKiAgICAgIHN0YXR1czI6ICcnLFxuICogICAgICBzdGF0dXMzOiAnJ1xuICogICAgICB9XTtcbiAqXG4gKiAgICBwdWJsaWMgY29sdW1ucyA9IFtcbiAqICAgICAgIHsgcHJvcGVydHk6ICdjb2RlJywgbGFiZWw6ICdJRCcsIHR5cGU6ICdzdHJpbmcnIH0sXG4gKiAgICAgICB7IHByb3BlcnR5OiAncHJvZHVjdCcsIGxhYmVsOiAnUFJPRFVUTycsIHR5cGU6ICdzdHJpbmcnIH0sXG4gKiAgICAgICB7IHByb3BlcnR5OiAnc3RhdHVzJywgbGFiZWw6ICdTVEFUVVMnLCB0eXBlOiAnY2VsbC10ZW1wbGF0ZScgfSxcbiAqICAgICAgIHsgcHJvcGVydHk6ICdzdGF0dXMyJywgbGFiZWw6ICdTVEFUVVMgMicsIHR5cGU6ICdjZWxsLXRlbXBsYXRlJyB9LFxuICogICAgICAgeyBwcm9wZXJ0eTogJ3N0YXR1czMnLCBsYWJlbDogJ1NUQVRVUyAzJywgdHlwZTogJ2NlbGwtdGVtcGxhdGUnIH1cbiAqICAgICAgXTtcbiAqIH1cbiAqIC4uLlxuICogYGBgXG4gKiA+IE9CUzogU2VtcHJlIGFkaWNpb25hciBvICoqdHlwZSoqIGRhIHByb3BlcnR5IHF1ZSBkZXNlamEgbWFuaXB1bGFyIGNvbSBhIGRpcmVjdGl2YSBjb21vIGBjZWxsVGVtcGxhdGVgXG4gKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1twLXRhYmxlLWNlbGwtdGVtcGxhdGVdJ1xufSlcbmV4cG9ydCBjbGFzcyBQb1RhYmxlQ2VsbFRlbXBsYXRlRGlyZWN0aXZlIHtcbiAgLy8gTmVjZXNzw6FyaW8gbWFudGVyIHRlbXBsYXRlUmVmIHBhcmEgbyBmdW5jaW9uYW1lbnRvIGRvIGNlbGwgdGVtcGxhdGUuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55Pikge31cbn1cbiJdfQ==