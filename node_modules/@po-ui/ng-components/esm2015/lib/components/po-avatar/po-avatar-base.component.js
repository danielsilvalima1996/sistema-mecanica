import { __decorate, __metadata } from "tslib";
import { Directive, EventEmitter, Input, Output } from '@angular/core';
const PO_AVATAR_SIZES = ['xs', 'sm', 'md', 'lg', 'xl'];
const PO_AVATAR_SIZE_DEFAULT = 'md';
/**
 * @description
 *
 * O componente `po-avatar` é um container para imagens em miniatura, possui um formato redondo e cinco opções de
 * tamanho, pode ser utilizado para mostrar a foto do perfil de um usuário, entre outras possibilidades.
 *
 * Além de poder ser utilizado separadamente, é possível usar o `po-avatar` juntamente com outros componentes e criar
 * layouts ricos e bem interessantes para os usuários, como por exemplo, uma lista de itens ou produtos.
 */
let PoAvatarBaseComponent = class PoAvatarBaseComponent {
    constructor() {
        this._size = 'md';
        /** Evento disparado ao clicar na imagem do *avatar*. */
        this.click = new EventEmitter();
    }
    /**
     * @optional
     *
     * @description
     *
     * Tamanho de exibição do componente.
     *
     * Valores válidos:
     *  - `xs` (24x24)
     *  - `sm` (32x32)
     *  - `md` (64x64)
     *  - `lg` (96x96)
     *  - `xl` (144x144)
     *
     * @default `md`
     */
    set size(value) {
        this._size = PO_AVATAR_SIZES.includes(value) ? value : PO_AVATAR_SIZE_DEFAULT;
    }
    get size() {
        return this._size;
    }
    get hasClickEvent() {
        return !!this.click.observers.length;
    }
};
__decorate([
    Input('p-src'),
    __metadata("design:type", String)
], PoAvatarBaseComponent.prototype, "src", void 0);
__decorate([
    Input('p-size'),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], PoAvatarBaseComponent.prototype, "size", null);
__decorate([
    Output('p-click'),
    __metadata("design:type", Object)
], PoAvatarBaseComponent.prototype, "click", void 0);
PoAvatarBaseComponent = __decorate([
    Directive()
], PoAvatarBaseComponent);
export { PoAvatarBaseComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYXZhdGFyLWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvLXVpL25nLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1hdmF0YXIvcG8tYXZhdGFyLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXZFLE1BQU0sZUFBZSxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3ZELE1BQU0sc0JBQXNCLEdBQUcsSUFBSSxDQUFDO0FBRXBDOzs7Ozs7OztHQVFHO0FBRUgsSUFBYSxxQkFBcUIsR0FBbEMsTUFBYSxxQkFBcUI7SUFBbEM7UUFDVSxVQUFLLEdBQVcsSUFBSSxDQUFDO1FBK0I3Qix3REFBd0Q7UUFDckMsVUFBSyxHQUFJLElBQUksWUFBWSxFQUFPLENBQUM7SUFLdEQsQ0FBQztJQTdCQzs7Ozs7Ozs7Ozs7Ozs7O09BZUc7SUFDYyxJQUFJLElBQUksQ0FBQyxLQUFhO1FBQ3JDLElBQUksQ0FBQyxLQUFLLEdBQUcsZUFBZSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQztJQUNoRixDQUFDO0lBQ0QsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFLRCxJQUFJLGFBQWE7UUFDZixPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7SUFDdkMsQ0FBQztDQUNGLENBQUE7QUEvQmlCO0lBQWYsS0FBSyxDQUFDLE9BQU8sQ0FBQzs7a0RBQWE7QUFrQlg7SUFBaEIsS0FBSyxDQUFDLFFBQVEsQ0FBQzs7O2lEQUVmO0FBTWtCO0lBQWxCLE1BQU0sQ0FBQyxTQUFTLENBQUM7O29EQUFrQztBQWpDekMscUJBQXFCO0lBRGpDLFNBQVMsRUFBRTtHQUNDLHFCQUFxQixDQXNDakM7U0F0Q1kscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuY29uc3QgUE9fQVZBVEFSX1NJWkVTID0gWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddO1xuY29uc3QgUE9fQVZBVEFSX1NJWkVfREVGQVVMVCA9ICdtZCc7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogTyBjb21wb25lbnRlIGBwby1hdmF0YXJgIMOpIHVtIGNvbnRhaW5lciBwYXJhIGltYWdlbnMgZW0gbWluaWF0dXJhLCBwb3NzdWkgdW0gZm9ybWF0byByZWRvbmRvIGUgY2luY28gb3DDp8O1ZXMgZGVcbiAqIHRhbWFuaG8sIHBvZGUgc2VyIHV0aWxpemFkbyBwYXJhIG1vc3RyYXIgYSBmb3RvIGRvIHBlcmZpbCBkZSB1bSB1c3XDoXJpbywgZW50cmUgb3V0cmFzIHBvc3NpYmlsaWRhZGVzLlxuICpcbiAqIEFsw6ltIGRlIHBvZGVyIHNlciB1dGlsaXphZG8gc2VwYXJhZGFtZW50ZSwgw6kgcG9zc8OtdmVsIHVzYXIgbyBgcG8tYXZhdGFyYCBqdW50YW1lbnRlIGNvbSBvdXRyb3MgY29tcG9uZW50ZXMgZSBjcmlhclxuICogbGF5b3V0cyByaWNvcyBlIGJlbSBpbnRlcmVzc2FudGVzIHBhcmEgb3MgdXN1w6FyaW9zLCBjb21vIHBvciBleGVtcGxvLCB1bWEgbGlzdGEgZGUgaXRlbnMgb3UgcHJvZHV0b3MuXG4gKi9cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGNsYXNzIFBvQXZhdGFyQmFzZUNvbXBvbmVudCB7XG4gIHByaXZhdGUgX3NpemU6IHN0cmluZyA9ICdtZCc7XG5cbiAgLyoqXG4gICAqIEZvbnRlIGRhIGltYWdlbSBxdWUgcG9kZSBzZXIgdW0gY2FtaW5obyBsb2NhbCAoYC4vYXNzZXRzL2ltYWdlcy9sb2dvLWJsYWNrLXNtYWxsLnBuZ2ApXG4gICAqIG91IHVtIHNlcnZpZG9yIGV4dGVybm8gKGBodHRwczovL3BvLXVpLmlvL2Fzc2V0cy9pbWFnZXMvbG9nby1ibGFjay1zbWFsbC5wbmdgKS5cbiAgICovXG4gIEBJbnB1dCgncC1zcmMnKSBzcmM6IHN0cmluZztcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBUYW1hbmhvIGRlIGV4aWJpw6fDo28gZG8gY29tcG9uZW50ZS5cbiAgICpcbiAgICogVmFsb3JlcyB2w6FsaWRvczpcbiAgICogIC0gYHhzYCAoMjR4MjQpXG4gICAqICAtIGBzbWAgKDMyeDMyKVxuICAgKiAgLSBgbWRgICg2NHg2NClcbiAgICogIC0gYGxnYCAoOTZ4OTYpXG4gICAqICAtIGB4bGAgKDE0NHgxNDQpXG4gICAqXG4gICAqIEBkZWZhdWx0IGBtZGBcbiAgICovXG4gIEBJbnB1dCgncC1zaXplJykgc2V0IHNpemUodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX3NpemUgPSBQT19BVkFUQVJfU0laRVMuaW5jbHVkZXModmFsdWUpID8gdmFsdWUgOiBQT19BVkFUQVJfU0laRV9ERUZBVUxUO1xuICB9XG4gIGdldCBzaXplKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3NpemU7XG4gIH1cblxuICAvKiogRXZlbnRvIGRpc3BhcmFkbyBhbyBjbGljYXIgbmEgaW1hZ2VtIGRvICphdmF0YXIqLiAqL1xuICBAT3V0cHV0KCdwLWNsaWNrJykgY2xpY2s/ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgZ2V0IGhhc0NsaWNrRXZlbnQoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5jbGljay5vYnNlcnZlcnMubGVuZ3RoO1xuICB9XG59XG4iXX0=