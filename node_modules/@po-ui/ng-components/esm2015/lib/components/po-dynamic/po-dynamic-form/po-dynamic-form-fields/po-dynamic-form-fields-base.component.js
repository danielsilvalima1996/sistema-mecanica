import { __decorate, __metadata } from "tslib";
import { Input, EventEmitter, Output, Directive } from '@angular/core';
import { TitleCasePipe } from '@angular/common';
import { isTypeof, sortFields } from '../../../../utils/util';
import { getGridColumnsClasses, isVisibleField } from '../../po-dynamic.util';
import { PoDynamicFieldType } from '../../po-dynamic-field-type.enum';
let PoDynamicFormFieldsBaseComponent = class PoDynamicFormFieldsBaseComponent {
    constructor(titleCasePipe) {
        this.titleCasePipe = titleCasePipe;
        this._value = {};
        this.visibleFields = [];
        this.fieldsChange = new EventEmitter();
        this.formValidate = new EventEmitter();
    }
    // array de objetos que implementam a interface PoDynamicFormField, que serão exibidos no componente.
    set fields(value) {
        this._fields = Array.isArray(value) ? [...value] : [];
    }
    get fields() {
        return this._fields;
    }
    // valor que será utilizado para iniciar valor no componente.
    set value(value) {
        this._value = value && isTypeof(value, 'object') ? value : {};
    }
    get value() {
        return this._value;
    }
    compareTo(value, compareTo) {
        return value === compareTo;
    }
    // retorna um array com os objetos configurados e visiveis.
    getVisibleFields() {
        const visibleFields = [];
        this.fields.forEach(field => {
            if (this.existsProperty(visibleFields, field.property)) {
                this.printError(`"po-dynamic-form" property "${field.property}" está duplicado. Interface: PoDynamicFormField.`);
                return;
            }
            if (!field['property']) {
                this.printError('"po-dynamic-form" É obrigatório ser especificado um property.');
                return;
            }
            if (isVisibleField(field)) {
                visibleFields.push(this.createField(field));
            }
        });
        return sortFields(visibleFields);
    }
    // converte um array em string para um array de objetos que contem label e value.
    convertOptions(options) {
        const everyOptionString = options.every(option => typeof option === 'string');
        if (everyOptionString) {
            return options.map(value => ({ label: value, value }));
        }
        return options;
    }
    // cria um novo objeto com as classes de grid system, com control (tipo do componente) e label default.
    createField(field) {
        const control = this.getComponentControl(field);
        const options = !!field.options ? this.convertOptions(field.options) : undefined;
        const focus = this.hasFocus(field);
        const componentClass = getGridColumnsClasses(field.gridSmColumns, field.gridMdColumns, field.gridLgColumns, field.gridXlColumns, field.gridColumns);
        return Object.assign(Object.assign({ label: this.titleCasePipe.transform(field.property) }, field), { componentClass,
            control,
            focus,
            options });
    }
    existsProperty(fields, property) {
        return fields.some(field => {
            return field.property === property;
        });
    }
    // recupera o componente de acordo com algumas regras do field.
    getComponentControl(field = {}) {
        const type = field && field.type ? field.type.toLocaleLowerCase() : 'string';
        if (this.isNumberType(field, type)) {
            return 'number';
        }
        else if (this.isCurrencyType(field, type)) {
            return 'decimal';
        }
        else if (this.isSelect(field)) {
            return 'select';
        }
        else if (this.isRadioGroup(field)) {
            return 'radioGroup';
        }
        else if (this.isCheckboxGroup(field)) {
            return 'checkboxGroup';
        }
        else if (this.isMultiselect(field)) {
            return 'multiselect';
        }
        else if (this.compareTo(type, PoDynamicFieldType.Boolean)) {
            return 'switch';
        }
        else if (this.compareTo(type, PoDynamicFieldType.Date) || this.compareTo(type, PoDynamicFieldType.DateTime)) {
            return 'datepicker';
        }
        else if (this.compareTo(type, PoDynamicFieldType.Time)) {
            field.mask = field.mask || '99:99';
            return 'input';
        }
        else if (this.isCombo(field)) {
            return 'combo';
        }
        else if (this.isLookup(field)) {
            return 'lookup';
        }
        else if (this.isTextarea(field)) {
            return 'textarea';
        }
        else if (this.isPassword(field)) {
            return 'password';
        }
        return 'input';
    }
    hasFocus(field) {
        return !!this.autoFocus && this.autoFocus === field.property;
    }
    isCheckboxGroup(field) {
        const { optionsService, optionsMulti, options } = field;
        return !optionsService && optionsMulti && !!options && options.length <= 3;
    }
    isCombo(field) {
        const { optionsService } = field;
        return !!optionsService && isTypeof(optionsService, 'string');
    }
    isCurrencyType(field, type) {
        const { mask, pattern } = field;
        return this.compareTo(type, PoDynamicFieldType.Currency) && !mask && !pattern;
    }
    isLookup(field) {
        const { searchService } = field;
        return !!searchService && isTypeof(searchService, 'string');
    }
    isMultiselect(field) {
        const { optionsService, optionsMulti, options } = field;
        return !optionsService && optionsMulti && !!options && options.length > 3;
    }
    isNumberType(field, type) {
        const { mask, pattern } = field;
        return this.compareTo(type, PoDynamicFieldType.Number) && !mask && !pattern;
    }
    isPassword(field) {
        const { secret } = field;
        return secret;
    }
    isRadioGroup(field) {
        const { optionsMulti, options } = field;
        return !optionsMulti && !!options && options.length <= 3;
    }
    isSelect(field) {
        const { optionsMulti, options } = field;
        return !optionsMulti && !!options && options.length > 3;
    }
    isTextarea(field) {
        const { rows } = field;
        return rows && rows >= 3;
    }
    printError(error) {
        console.error(error);
    }
};
PoDynamicFormFieldsBaseComponent.ctorParameters = () => [
    { type: TitleCasePipe }
];
__decorate([
    Input('p-auto-focus'),
    __metadata("design:type", String)
], PoDynamicFormFieldsBaseComponent.prototype, "autoFocus", void 0);
__decorate([
    Input('p-fields'),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], PoDynamicFormFieldsBaseComponent.prototype, "fields", null);
__decorate([
    Output('p-fieldsChange'),
    __metadata("design:type", Object)
], PoDynamicFormFieldsBaseComponent.prototype, "fieldsChange", void 0);
__decorate([
    Input('p-value'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], PoDynamicFormFieldsBaseComponent.prototype, "value", null);
__decorate([
    Input('p-disabled-form'),
    __metadata("design:type", Boolean)
], PoDynamicFormFieldsBaseComponent.prototype, "disabledForm", void 0);
__decorate([
    Input('p-validate'),
    __metadata("design:type", Object)
], PoDynamicFormFieldsBaseComponent.prototype, "validate", void 0);
__decorate([
    Output('p-form-validate'),
    __metadata("design:type", Object)
], PoDynamicFormFieldsBaseComponent.prototype, "formValidate", void 0);
PoDynamicFormFieldsBaseComponent = __decorate([
    Directive(),
    __metadata("design:paramtypes", [TitleCasePipe])
], PoDynamicFormFieldsBaseComponent);
export { PoDynamicFormFieldsBaseComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZHluYW1pYy1mb3JtLWZpZWxkcy1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwby11aS9uZy1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tZHluYW1pYy9wby1keW5hbWljLWZvcm0vcG8tZHluYW1pYy1mb3JtLWZpZWxkcy9wby1keW5hbWljLWZvcm0tZmllbGRzLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUVoRCxPQUFPLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRTlELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxjQUFjLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM5RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUt0RSxJQUFhLGdDQUFnQyxHQUE3QyxNQUFhLGdDQUFnQztJQWtDM0MsWUFBb0IsYUFBNEI7UUFBNUIsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFoQ3hDLFdBQU0sR0FBUyxFQUFFLENBQUM7UUFFMUIsa0JBQWEsR0FBc0MsRUFBRSxDQUFDO1FBYTVCLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQWV0QyxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7SUFFZixDQUFDO0lBMUJwRCxxR0FBcUc7SUFDbEYsSUFBSSxNQUFNLENBQUMsS0FBZ0M7UUFDNUQsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUN4RCxD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IERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVGl0bGVDYXNlUGlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmltcG9ydCB7IGlzVHlwZW9mLCBzb3J0RmllbGRzIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmltcG9ydCB7IGdldEdyaWRDb2x1bW5zQ2xhc3NlcywgaXNWaXNpYmxlRmllbGQgfSBmcm9tICcuLi8uLi9wby1keW5hbWljLnV0aWwnO1xuaW1wb3J0IHsgUG9EeW5hbWljRmllbGRUeXBlIH0gZnJvbSAnLi4vLi4vcG8tZHluYW1pYy1maWVsZC10eXBlLmVudW0nO1xuaW1wb3J0IHsgUG9EeW5hbWljRm9ybUZpZWxkIH0gZnJvbSAnLi4vcG8tZHluYW1pYy1mb3JtLWZpZWxkLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb0R5bmFtaWNGb3JtRmllbGRJbnRlcm5hbCB9IGZyb20gJy4vcG8tZHluYW1pYy1mb3JtLWZpZWxkLWludGVybmFsLmludGVyZmFjZSc7XG5cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGNsYXNzIFBvRHluYW1pY0Zvcm1GaWVsZHNCYXNlQ29tcG9uZW50IHtcbiAgcHJpdmF0ZSBfZmllbGRzOiBBcnJheTxQb0R5bmFtaWNGb3JtRmllbGQ+O1xuICBwcml2YXRlIF92YWx1ZT86IGFueSA9IHt9O1xuXG4gIHZpc2libGVGaWVsZHM6IEFycmF5PFBvRHluYW1pY0Zvcm1GaWVsZEludGVybmFsPiA9IFtdO1xuXG4gIEBJbnB1dCgncC1hdXRvLWZvY3VzJykgYXV0b0ZvY3VzPzogc3RyaW5nO1xuXG4gIC8vIGFycmF5IGRlIG9iamV0b3MgcXVlIGltcGxlbWVudGFtIGEgaW50ZXJmYWNlIFBvRHluYW1pY0Zvcm1GaWVsZCwgcXVlIHNlcsOjbyBleGliaWRvcyBubyBjb21wb25lbnRlLlxuICBASW5wdXQoJ3AtZmllbGRzJykgc2V0IGZpZWxkcyh2YWx1ZTogQXJyYXk8UG9EeW5hbWljRm9ybUZpZWxkPikge1xuICAgIHRoaXMuX2ZpZWxkcyA9IEFycmF5LmlzQXJyYXkodmFsdWUpID8gWy4uLnZhbHVlXSA6IFtdO1xuICB9XG5cbiAgZ2V0IGZpZWxkcygpIHtcbiAgICByZXR1cm4gdGhpcy5fZmllbGRzO1xuICB9XG5cbiAgQE91dHB1dCgncC1maWVsZHNDaGFuZ2UnKSBmaWVsZHNDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAvLyB2YWxvciBxdWUgc2Vyw6EgdXRpbGl6YWRvIHBhcmEgaW5pY2lhciB2YWxvciBubyBjb21wb25lbnRlLlxuICBASW5wdXQoJ3AtdmFsdWUnKSBzZXQgdmFsdWUodmFsdWU6IGFueSkge1xuICAgIHRoaXMuX3ZhbHVlID0gdmFsdWUgJiYgaXNUeXBlb2YodmFsdWUsICdvYmplY3QnKSA/IHZhbHVlIDoge307XG4gIH1cblxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgQElucHV0KCdwLWRpc2FibGVkLWZvcm0nKSBkaXNhYmxlZEZvcm06IGJvb2xlYW47XG5cbiAgQElucHV0KCdwLXZhbGlkYXRlJykgdmFsaWRhdGU/OiBzdHJpbmcgfCBGdW5jdGlvbjtcblxuICBAT3V0cHV0KCdwLWZvcm0tdmFsaWRhdGUnKSBmb3JtVmFsaWRhdGUgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRpdGxlQ2FzZVBpcGU6IFRpdGxlQ2FzZVBpcGUpIHt9XG5cbiAgY29tcGFyZVRvKHZhbHVlLCBjb21wYXJlVG8pIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IGNvbXBhcmVUbztcbiAgfVxuXG4gIC8vIHJldG9ybmEgdW0gYXJyYXkgY29tIG9zIG9iamV0b3MgY29uZmlndXJhZG9zIGUgdmlzaXZlaXMuXG4gIHByb3RlY3RlZCBnZXRWaXNpYmxlRmllbGRzKCkge1xuICAgIGNvbnN0IHZpc2libGVGaWVsZHMgPSBbXTtcblxuICAgIHRoaXMuZmllbGRzLmZvckVhY2goZmllbGQgPT4ge1xuICAgICAgaWYgKHRoaXMuZXhpc3RzUHJvcGVydHkodmlzaWJsZUZpZWxkcywgZmllbGQucHJvcGVydHkpKSB7XG4gICAgICAgIHRoaXMucHJpbnRFcnJvcihcbiAgICAgICAgICBgXCJwby1keW5hbWljLWZvcm1cIiBwcm9wZXJ0eSBcIiR7ZmllbGQucHJvcGVydHl9XCIgZXN0w6EgZHVwbGljYWRvLiBJbnRlcmZhY2U6IFBvRHluYW1pY0Zvcm1GaWVsZC5gXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFmaWVsZFsncHJvcGVydHknXSkge1xuICAgICAgICB0aGlzLnByaW50RXJyb3IoJ1wicG8tZHluYW1pYy1mb3JtXCIgw4kgb2JyaWdhdMOzcmlvIHNlciBlc3BlY2lmaWNhZG8gdW0gcHJvcGVydHkuJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzVmlzaWJsZUZpZWxkKGZpZWxkKSkge1xuICAgICAgICB2aXNpYmxlRmllbGRzLnB1c2godGhpcy5jcmVhdGVGaWVsZChmaWVsZCkpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNvcnRGaWVsZHModmlzaWJsZUZpZWxkcyk7XG4gIH1cblxuICAvLyBjb252ZXJ0ZSB1bSBhcnJheSBlbSBzdHJpbmcgcGFyYSB1bSBhcnJheSBkZSBvYmpldG9zIHF1ZSBjb250ZW0gbGFiZWwgZSB2YWx1ZS5cbiAgcHJpdmF0ZSBjb252ZXJ0T3B0aW9ucyhvcHRpb25zOiBBcnJheTxhbnk+KTogQXJyYXk8eyBsYWJlbDogc3RyaW5nOyB2YWx1ZTogc3RyaW5nIH0+IHtcbiAgICBjb25zdCBldmVyeU9wdGlvblN0cmluZyA9IG9wdGlvbnMuZXZlcnkob3B0aW9uID0+IHR5cGVvZiBvcHRpb24gPT09ICdzdHJpbmcnKTtcblxuICAgIGlmIChldmVyeU9wdGlvblN0cmluZykge1xuICAgICAgcmV0dXJuIG9wdGlvbnMubWFwKHZhbHVlID0+ICh7IGxhYmVsOiB2YWx1ZSwgdmFsdWUgfSkpO1xuICAgIH1cblxuICAgIHJldHVybiBvcHRpb25zO1xuICB9XG5cbiAgLy8gY3JpYSB1bSBub3ZvIG9iamV0byBjb20gYXMgY2xhc3NlcyBkZSBncmlkIHN5c3RlbSwgY29tIGNvbnRyb2wgKHRpcG8gZG8gY29tcG9uZW50ZSkgZSBsYWJlbCBkZWZhdWx0LlxuICBwcml2YXRlIGNyZWF0ZUZpZWxkKGZpZWxkOiBQb0R5bmFtaWNGb3JtRmllbGQpOiBQb0R5bmFtaWNGb3JtRmllbGRJbnRlcm5hbCB7XG4gICAgY29uc3QgY29udHJvbCA9IHRoaXMuZ2V0Q29tcG9uZW50Q29udHJvbChmaWVsZCk7XG4gICAgY29uc3Qgb3B0aW9ucyA9ICEhZmllbGQub3B0aW9ucyA/IHRoaXMuY29udmVydE9wdGlvbnMoZmllbGQub3B0aW9ucykgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgZm9jdXMgPSB0aGlzLmhhc0ZvY3VzKGZpZWxkKTtcblxuICAgIGNvbnN0IGNvbXBvbmVudENsYXNzID0gZ2V0R3JpZENvbHVtbnNDbGFzc2VzKFxuICAgICAgZmllbGQuZ3JpZFNtQ29sdW1ucyxcbiAgICAgIGZpZWxkLmdyaWRNZENvbHVtbnMsXG4gICAgICBmaWVsZC5ncmlkTGdDb2x1bW5zLFxuICAgICAgZmllbGQuZ3JpZFhsQ29sdW1ucyxcbiAgICAgIGZpZWxkLmdyaWRDb2x1bW5zXG4gICAgKTtcblxuICAgIHJldHVybiB7XG4gICAgICBsYWJlbDogdGhpcy50aXRsZUNhc2VQaXBlLnRyYW5zZm9ybShmaWVsZC5wcm9wZXJ0eSksXG4gICAgICAuLi5maWVsZCxcbiAgICAgIGNvbXBvbmVudENsYXNzLFxuICAgICAgY29udHJvbCxcbiAgICAgIGZvY3VzLFxuICAgICAgb3B0aW9uc1xuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGV4aXN0c1Byb3BlcnR5KGZpZWxkczogQXJyYXk8UG9EeW5hbWljRm9ybUZpZWxkPiwgcHJvcGVydHk6IHN0cmluZykge1xuICAgIHJldHVybiBmaWVsZHMuc29tZShmaWVsZCA9PiB7XG4gICAgICByZXR1cm4gZmllbGQucHJvcGVydHkgPT09IHByb3BlcnR5O1xuICAgIH0pO1xuICB9XG5cbiAgLy8gcmVjdXBlcmEgbyBjb21wb25lbnRlIGRlIGFjb3JkbyBjb20gYWxndW1hcyByZWdyYXMgZG8gZmllbGQuXG4gIHByaXZhdGUgZ2V0Q29tcG9uZW50Q29udHJvbChmaWVsZDogUG9EeW5hbWljRm9ybUZpZWxkID0gPGFueT57fSkge1xuICAgIGNvbnN0IHR5cGUgPSBmaWVsZCAmJiBmaWVsZC50eXBlID8gZmllbGQudHlwZS50b0xvY2FsZUxvd2VyQ2FzZSgpIDogJ3N0cmluZyc7XG5cbiAgICBpZiAodGhpcy5pc051bWJlclR5cGUoZmllbGQsIHR5cGUpKSB7XG4gICAgICByZXR1cm4gJ251bWJlcic7XG4gICAgfSBlbHNlIGlmICh0aGlzLmlzQ3VycmVuY3lUeXBlKGZpZWxkLCB0eXBlKSkge1xuICAgICAgcmV0dXJuICdkZWNpbWFsJztcbiAgICB9IGVsc2UgaWYgKHRoaXMuaXNTZWxlY3QoZmllbGQpKSB7XG4gICAgICByZXR1cm4gJ3NlbGVjdCc7XG4gICAgfSBlbHNlIGlmICh0aGlzLmlzUmFkaW9Hcm91cChmaWVsZCkpIHtcbiAgICAgIHJldHVybiAncmFkaW9Hcm91cCc7XG4gICAgfSBlbHNlIGlmICh0aGlzLmlzQ2hlY2tib3hHcm91cChmaWVsZCkpIHtcbiAgICAgIHJldHVybiAnY2hlY2tib3hHcm91cCc7XG4gICAgfSBlbHNlIGlmICh0aGlzLmlzTXVsdGlzZWxlY3QoZmllbGQpKSB7XG4gICAgICByZXR1cm4gJ211bHRpc2VsZWN0JztcbiAgICB9IGVsc2UgaWYgKHRoaXMuY29tcGFyZVRvKHR5cGUsIFBvRHluYW1pY0ZpZWxkVHlwZS5Cb29sZWFuKSkge1xuICAgICAgcmV0dXJuICdzd2l0Y2gnO1xuICAgIH0gZWxzZSBpZiAodGhpcy5jb21wYXJlVG8odHlwZSwgUG9EeW5hbWljRmllbGRUeXBlLkRhdGUpIHx8IHRoaXMuY29tcGFyZVRvKHR5cGUsIFBvRHluYW1pY0ZpZWxkVHlwZS5EYXRlVGltZSkpIHtcbiAgICAgIHJldHVybiAnZGF0ZXBpY2tlcic7XG4gICAgfSBlbHNlIGlmICh0aGlzLmNvbXBhcmVUbyh0eXBlLCBQb0R5bmFtaWNGaWVsZFR5cGUuVGltZSkpIHtcbiAgICAgIGZpZWxkLm1hc2sgPSBmaWVsZC5tYXNrIHx8ICc5OTo5OSc7XG5cbiAgICAgIHJldHVybiAnaW5wdXQnO1xuICAgIH0gZWxzZSBpZiAodGhpcy5pc0NvbWJvKGZpZWxkKSkge1xuICAgICAgcmV0dXJuICdjb21ibyc7XG4gICAgfSBlbHNlIGlmICh0aGlzLmlzTG9va3VwKGZpZWxkKSkge1xuICAgICAgcmV0dXJuICdsb29rdXAnO1xuICAgIH0gZWxzZSBpZiAodGhpcy5pc1RleHRhcmVhKGZpZWxkKSkge1xuICAgICAgcmV0dXJuICd0ZXh0YXJlYSc7XG4gICAgfSBlbHNlIGlmICh0aGlzLmlzUGFzc3dvcmQoZmllbGQpKSB7XG4gICAgICByZXR1cm4gJ3Bhc3N3b3JkJztcbiAgICB9XG5cbiAgICByZXR1cm4gJ2lucHV0JztcbiAgfVxuXG4gIHByaXZhdGUgaGFzRm9jdXMoZmllbGQ6IFBvRHluYW1pY0Zvcm1GaWVsZCkge1xuICAgIHJldHVybiAhIXRoaXMuYXV0b0ZvY3VzICYmIHRoaXMuYXV0b0ZvY3VzID09PSBmaWVsZC5wcm9wZXJ0eTtcbiAgfVxuXG4gIHByaXZhdGUgaXNDaGVja2JveEdyb3VwKGZpZWxkOiBQb0R5bmFtaWNGb3JtRmllbGQpIHtcbiAgICBjb25zdCB7IG9wdGlvbnNTZXJ2aWNlLCBvcHRpb25zTXVsdGksIG9wdGlvbnMgfSA9IGZpZWxkO1xuXG4gICAgcmV0dXJuICFvcHRpb25zU2VydmljZSAmJiBvcHRpb25zTXVsdGkgJiYgISFvcHRpb25zICYmIG9wdGlvbnMubGVuZ3RoIDw9IDM7XG4gIH1cblxuICBwcml2YXRlIGlzQ29tYm8oZmllbGQ6IFBvRHluYW1pY0Zvcm1GaWVsZCkge1xuICAgIGNvbnN0IHsgb3B0aW9uc1NlcnZpY2UgfSA9IGZpZWxkO1xuXG4gICAgcmV0dXJuICEhb3B0aW9uc1NlcnZpY2UgJiYgaXNUeXBlb2Yob3B0aW9uc1NlcnZpY2UsICdzdHJpbmcnKTtcbiAgfVxuXG4gIHByaXZhdGUgaXNDdXJyZW5jeVR5cGUoZmllbGQ6IFBvRHluYW1pY0Zvcm1GaWVsZCwgdHlwZTogc3RyaW5nKSB7XG4gICAgY29uc3QgeyBtYXNrLCBwYXR0ZXJuIH0gPSBmaWVsZDtcblxuICAgIHJldHVybiB0aGlzLmNvbXBhcmVUbyh0eXBlLCBQb0R5bmFtaWNGaWVsZFR5cGUuQ3VycmVuY3kpICYmICFtYXNrICYmICFwYXR0ZXJuO1xuICB9XG5cbiAgcHJpdmF0ZSBpc0xvb2t1cChmaWVsZDogUG9EeW5hbWljRm9ybUZpZWxkKSB7XG4gICAgY29uc3QgeyBzZWFyY2hTZXJ2aWNlIH0gPSBmaWVsZDtcblxuICAgIHJldHVybiAhIXNlYXJjaFNlcnZpY2UgJiYgaXNUeXBlb2Yoc2VhcmNoU2VydmljZSwgJ3N0cmluZycpO1xuICB9XG5cbiAgcHJpdmF0ZSBpc011bHRpc2VsZWN0KGZpZWxkOiBQb0R5bmFtaWNGb3JtRmllbGQpIHtcbiAgICBjb25zdCB7IG9wdGlvbnNTZXJ2aWNlLCBvcHRpb25zTXVsdGksIG9wdGlvbnMgfSA9IGZpZWxkO1xuXG4gICAgcmV0dXJuICFvcHRpb25zU2VydmljZSAmJiBvcHRpb25zTXVsdGkgJiYgISFvcHRpb25zICYmIG9wdGlvbnMubGVuZ3RoID4gMztcbiAgfVxuXG4gIHByaXZhdGUgaXNOdW1iZXJUeXBlKGZpZWxkOiBQb0R5bmFtaWNGb3JtRmllbGQsIHR5cGU6IHN0cmluZykge1xuICAgIGNvbnN0IHsgbWFzaywgcGF0dGVybiB9ID0gZmllbGQ7XG5cbiAgICByZXR1cm4gdGhpcy5jb21wYXJlVG8odHlwZSwgUG9EeW5hbWljRmllbGRUeXBlLk51bWJlcikgJiYgIW1hc2sgJiYgIXBhdHRlcm47XG4gIH1cblxuICBwcml2YXRlIGlzUGFzc3dvcmQoZmllbGQ6IFBvRHluYW1pY0Zvcm1GaWVsZCkge1xuICAgIGNvbnN0IHsgc2VjcmV0IH0gPSBmaWVsZDtcblxuICAgIHJldHVybiBzZWNyZXQ7XG4gIH1cblxuICBwcml2YXRlIGlzUmFkaW9Hcm91cChmaWVsZDogUG9EeW5hbWljRm9ybUZpZWxkKSB7XG4gICAgY29uc3QgeyBvcHRpb25zTXVsdGksIG9wdGlvbnMgfSA9IGZpZWxkO1xuXG4gICAgcmV0dXJuICFvcHRpb25zTXVsdGkgJiYgISFvcHRpb25zICYmIG9wdGlvbnMubGVuZ3RoIDw9IDM7XG4gIH1cblxuICBwcml2YXRlIGlzU2VsZWN0KGZpZWxkOiBQb0R5bmFtaWNGb3JtRmllbGQpIHtcbiAgICBjb25zdCB7IG9wdGlvbnNNdWx0aSwgb3B0aW9ucyB9ID0gZmllbGQ7XG5cbiAgICByZXR1cm4gIW9wdGlvbnNNdWx0aSAmJiAhIW9wdGlvbnMgJiYgb3B0aW9ucy5sZW5ndGggPiAzO1xuICB9XG5cbiAgcHJpdmF0ZSBpc1RleHRhcmVhKGZpZWxkOiBQb0R5bmFtaWNGb3JtRmllbGQpIHtcbiAgICBjb25zdCB7IHJvd3MgfSA9IGZpZWxkO1xuXG4gICAgcmV0dXJuIHJvd3MgJiYgcm93cyA+PSAzO1xuICB9XG5cbiAgcHJpdmF0ZSBwcmludEVycm9yKGVycm9yOiBzdHJpbmcpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgfVxufVxuIl19