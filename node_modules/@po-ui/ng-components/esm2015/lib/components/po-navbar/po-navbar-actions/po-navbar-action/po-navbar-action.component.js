import { __decorate, __metadata } from "tslib";
import { Component, Input, ViewContainerRef } from '@angular/core';
import { Router } from '@angular/router';
import { callFunction, getParentRef, isExternalLink, openExternalLink } from '../../../../utils/util';
let PoNavbarActionComponent = class PoNavbarActionComponent {
    constructor(viewContainerRef, router) {
        this.router = router;
        this.parentRef = getParentRef(viewContainerRef);
    }
    click() {
        if (this.action) {
            callFunction(this.action, this.parentRef || this);
            return;
        }
        if (this.link) {
            return this.openUrl(this.link);
        }
    }
    openUrl(url) {
        if (isExternalLink(url)) {
            return openExternalLink(url);
        }
        if (url) {
            return this.router.navigate([url]);
        }
    }
};
PoNavbarActionComponent.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: Router }
];
__decorate([
    Input('p-action'),
    __metadata("design:type", Function)
], PoNavbarActionComponent.prototype, "action", void 0);
__decorate([
    Input('p-icon'),
    __metadata("design:type", String)
], PoNavbarActionComponent.prototype, "icon", void 0);
__decorate([
    Input('p-label'),
    __metadata("design:type", String)
], PoNavbarActionComponent.prototype, "label", void 0);
__decorate([
    Input('p-link'),
    __metadata("design:type", String)
], PoNavbarActionComponent.prototype, "link", void 0);
__decorate([
    Input('p-tooltip-text'),
    __metadata("design:type", String)
], PoNavbarActionComponent.prototype, "tooltip", void 0);
PoNavbarActionComponent = __decorate([
    Component({
        selector: 'po-navbar-action',
        template: "<div tabindex=\"0\" class=\"po-navbar-action-content po-clickable\" (click)=\"click()\">\n  <span class=\"po-icon {{ icon }}\" [p-tooltip]=\"tooltip\"> </span>\n</div>\n"
    }),
    __metadata("design:paramtypes", [ViewContainerRef, Router])
], PoNavbarActionComponent);
export { PoNavbarActionComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbmF2YmFyLWFjdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG8tdWkvbmctY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLW5hdmJhci9wby1uYXZiYXItYWN0aW9ucy9wby1uYXZiYXItYWN0aW9uL3BvLW5hdmJhci1hY3Rpb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFekMsT0FBTyxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsY0FBYyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFNdEcsSUFBYSx1QkFBdUIsR0FBcEMsTUFBYSx1QkFBdUI7SUFhbEMsWUFBWSxnQkFBa0MsRUFBVSxNQUFjO1FBQWQsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNwRSxJQUFJLENBQUMsU0FBUyxHQUFHLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRCxLQUFLO1FBQ0gsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2YsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsQ0FBQztZQUNsRCxPQUFPO1NBQ1I7UUFFRCxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDYixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2hDO0lBQ0gsQ0FBQztJQUVPLE9BQU8sQ0FBQyxHQUFXO1FBQ3pCLElBQUksY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3ZCLE9BQU8sZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDOUI7UUFFRCxJQUFJLEdBQUcsRUFBRTtZQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQ3BDO0lBQ0gsQ0FBQztDQUNGLENBQUE7O1lBeEIrQixnQkFBZ0I7WUFBa0IsTUFBTTs7QUFWbkQ7SUFBbEIsS0FBSyxDQUFDLFVBQVUsQ0FBQzs4QkFBVSxRQUFRO3VEQUFDO0FBRXBCO0lBQWhCLEtBQUssQ0FBQyxRQUFRLENBQUM7O3FEQUFjO0FBRVo7SUFBakIsS0FBSyxDQUFDLFNBQVMsQ0FBQzs7c0RBQWU7QUFFZjtJQUFoQixLQUFLLENBQUMsUUFBUSxDQUFDOztxREFBZTtBQUVOO0lBQXhCLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQzs7d0RBQWtCO0FBWC9CLHVCQUF1QjtJQUpuQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsa0JBQWtCO1FBQzVCLHFMQUFnRDtLQUNqRCxDQUFDO3FDQWM4QixnQkFBZ0IsRUFBa0IsTUFBTTtHQWIzRCx1QkFBdUIsQ0FxQ25DO1NBckNZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5cbmltcG9ydCB7IGNhbGxGdW5jdGlvbiwgZ2V0UGFyZW50UmVmLCBpc0V4dGVybmFsTGluaywgb3BlbkV4dGVybmFsTGluayB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwby1uYXZiYXItYWN0aW9uJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLW5hdmJhci1hY3Rpb24uY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFBvTmF2YmFyQWN0aW9uQ29tcG9uZW50IHtcbiAgcHJpdmF0ZSBwYXJlbnRSZWY6IGFueTtcblxuICBASW5wdXQoJ3AtYWN0aW9uJykgYWN0aW9uPzogRnVuY3Rpb247XG5cbiAgQElucHV0KCdwLWljb24nKSBpY29uOiBzdHJpbmc7XG5cbiAgQElucHV0KCdwLWxhYmVsJykgbGFiZWw6IHN0cmluZztcblxuICBASW5wdXQoJ3AtbGluaycpIGxpbms/OiBzdHJpbmc7XG5cbiAgQElucHV0KCdwLXRvb2x0aXAtdGV4dCcpIHRvb2x0aXA/OiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3Iodmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZiwgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcikge1xuICAgIHRoaXMucGFyZW50UmVmID0gZ2V0UGFyZW50UmVmKHZpZXdDb250YWluZXJSZWYpO1xuICB9XG5cbiAgY2xpY2soKSB7XG4gICAgaWYgKHRoaXMuYWN0aW9uKSB7XG4gICAgICBjYWxsRnVuY3Rpb24odGhpcy5hY3Rpb24sIHRoaXMucGFyZW50UmVmIHx8IHRoaXMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxpbmspIHtcbiAgICAgIHJldHVybiB0aGlzLm9wZW5VcmwodGhpcy5saW5rKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIG9wZW5VcmwodXJsOiBzdHJpbmcpIHtcbiAgICBpZiAoaXNFeHRlcm5hbExpbmsodXJsKSkge1xuICAgICAgcmV0dXJuIG9wZW5FeHRlcm5hbExpbmsodXJsKTtcbiAgICB9XG5cbiAgICBpZiAodXJsKSB7XG4gICAgICByZXR1cm4gdGhpcy5yb3V0ZXIubmF2aWdhdGUoW3VybF0pO1xuICAgIH1cbiAgfVxufVxuIl19